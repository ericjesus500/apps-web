<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        
                        <link rel="stylesheet" type="text/css" href="poo_en_php_files/semantic.css">
            <link rel="stylesheet" type="text/css" href="poo_en_php_files/sem2.css">
        
    <script type="text/javascript" async="" src="poo_en_php_files/js"></script><script async="" src="poo_en_php_files/analytics.js"></script><script src="poo_en_php_files/highlight.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <link rel="stylesheet" href="poo_en_php_files/agate.css">

        <link rel="icon" type="image/x-icon" href="https://diego.com.es/favicon.ico">

        <title>
        Programación orientada a objetos en PHP        </title>

        <meta name="description" content="
        Introducción a la Programación Orientada a Objetos POO en el lenguaje de programación PHP">
                    <script>
                (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
                })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

                ga('create', 'UA-62157855-1', 'auto');
                ga('send', 'pageview');
            </script>
            <meta http-equiv="origin-trial" content="AymqwRC7u88Y4JPvfIF2F37QKylC04248hLCdJAsh8xgOfe/dVJPV3XS3wLFca1ZMVOtnBfVjaCMTVudWM//5g4AAAB7eyJvcmlnaW4iOiJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbTo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjk1MTY3OTk5LCJpc1RoaXJkUGFydHkiOnRydWV9"></head>

    <body class="pushable" cz-shortcut-listen="true"><audio class="audio-for-speech" src=""></audio><div class="translate-tooltip-mtz translator-hidden">
                    <div class="header">
                        <div class="header-controls">
                            Translator
                        </div>
                        <div class="header-controls">
                            <span class="support"></span>
                        </div>
                        <div class="header-controls">
                            <span class="settings"></span>
                        </div>
                    </div>
                    <div class="translated-text">
                        <div class="words"></div>
                        <div class="sentences"></div>
                    </div>
                </div><span class="translate-button-mtz translator-hidden" style="top: 299.18333435058594px;left: 619px;"></span>

        <div class="ui large top fixed menu transition visible" style="display: flex !important;">
    <div class="ui container">

        <a class="active item" href="https://diego.com.es/">Diego Lázaro</a>
        <a class="active red item" href="https://angular.diego.com.es/">Angular</a>
        <a class="item" href="https://leanpub.com/guiadephp">Libro de PHP</a>

        <div class="right item">
            <a href="#"><i class="arrow up icon"></i></a>
        </div>
    </div>
</div>

<div class="ui left vertical inverted sidebar labeled icon menu">
    <a class="item" href="https://diego.com.es/">
        <i class="home icon"></i>
        Inicio
    </a>
    <a class="active red item" href="https://angular.diego.com.es/">
        <i class="circle icon"></i>
        Angular
    </a>
</div>
        <div class="pusher">
                <div class="ui inverted vertical masthead center aligned segment">
        <div class="ui container">
    <div class="ui large secondary inverted pointing menu">

        <a class="toc item">
            <i class="sidebar icon"></i>
        </a>

        <a class="active item" href="https://diego.com.es/">Diego Lázaro</a>
        <a class="item" href="https://diego.com.es/contacto">Contacto</a>
        <a class="active red item" href="https://angular.diego.com.es/">Angular</a>

        <div class="right item">
            <a class="ui inverted button" href="https://leanpub.com/guiadephp">Libro de PHP</a>
        </div>

    </div>
</div>

            
                 <div class="ui text container">

                        <div class="ui inverted segment">
                                                    </div>

                        <h1 class="ui inverted header">
                            Programación orientada a objetos en PHP                        </h1>

                        <div class="ui text container diego-subheader">
                            <h2>Introducción a la Programación Orientada a Objetos POO en el lenguaje de programación PHP</h2>
                        </div>

                 </div>

                </div>

        <div class="main ui container">
        <div class="ui basic segment">

            
            
    
    <div class="ui yellow message">
        <i class="close icon"></i>
        <div class="header">
            Contenido modificable
        </div>

        <p>Si ves errores o quieres modificar/añadir contenidos, puedes
                    <a href="https://github.com/diegotham/certificacion-symfony/blob/master/1-PHP-and-web-security/1-programacion-orientada-a-objetos-en-php.md"><i class="github icon"></i>crear un pull request</a>. Gracias</p>
            </div>

    
    <div class="ui basic segment">
        <p>La programación orientada a objetos (<strong>Object Oriented Programming OOP</strong>) es un <strong>modelo de lenguaje de programación</strong> organizado por <strong>objetos</strong> constituidos por <strong>datos y funciones</strong>,
 entre los cuales se pueden crear relaciones como herencia, cohesión, 
abstracción, polimorfismo o encapsulamiento. Esto permite que haya una 
gran flexibilidad y se puedan crear <strong>objetos</strong> que pueden heredarse y transmitirse sin necesidad de ser modificados continuamente.</p>
<p><strong>Indice de contenido</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1. Clases y Objetos</td>
<td>6. Propiedades y métodos estáticos</td>
</tr>
<tr>
<td>2. Interacciones entre objetos</td>
<td>7. Traits</td>
</tr>
<tr>
<td>3. Public, protected y private</td>
<td>8. Type hinting</td>
</tr>
<tr>
<td>4. Paamayim Nekudotayim</td>
<td>9. Métodos mágicos</td>
</tr>
<tr>
<td>5. Constantes</td>
<td></td>
</tr>
</tbody>
</table>
<h3>1. Clases y objetos</h3>
<p>Una <strong>clase</strong> define los datos y la lógica de un objeto. La lógica se divide en funciones (<strong>métodos</strong>) y variables (<strong>propiedades</strong>).</p>
<p>Para definir una propiedad:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>;
}</code></pre>
<p>Se puede especificar el tipo de dato de la propiedad:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="text-skyblue_2">string</span> <span class="hljs-variable">$color</span>;
}</code></pre>

<p>Para definir un método:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-comment">// Contenido de la función</span>
    }
}</code></pre>

<p>Se puede especificar el tipo de dato de un método:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span><span class="hljs-params">()</span>: <span class="text-skyblue_2">string</span>
    </span>{
        <span class="hljs-comment">// Contenido de la función</span>
    }
}</code></pre>

<p>Para <strong>crear un objeto</strong> hay que <strong>instanciar una clase</strong>: </p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
 <span class="hljs-comment">// Contenido de la clase</span>
}

<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> Coche(); <span class="hljs-comment">// Objeto</span></code></pre>
<p>La <strong>clase</strong> es como una <strong>plantilla</strong> que define características y funciones. El <strong>objeto</strong> agrupa los datos de la clase y permite utilizarlos desde una unidad.</p>
<p>Podemos definir las características de un coche de la siguiente forma:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$potencia</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$marca</span>;
}

<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> Coche();
<span class="hljs-variable">$miCoche</span>-&gt;color = <span class="hljs-string">'rojo'</span>;
<span class="hljs-variable">$miCoche</span>-&gt;potencia = <span class="hljs-number">120</span>;
<span class="hljs-variable">$miCoche</span>-&gt;marca = <span class="hljs-string">'audi'</span>;</code></pre>
<p>De momento sólo hemos definido <strong>propiedades</strong> del objeto. Si queremos mostrar alguna característica ahora:</p>
<pre><code class="hljs php"><span class="hljs-comment">//...</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Color del coche: '</span> . <span class="hljs-variable">$miCoche</span>-&gt;color; <span class="hljs-comment">// Muestra Color del coche: rojo</span></code></pre>
<p>Ahora vamos a definir un <strong>método que devuelve una propiedad</strong>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-comment">//...</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;color;
    }
}
<span class="hljs-comment">//...</span></code></pre>
<p>El método <em><strong>getColor()</strong></em> nos permite devolver el color del objeto instanciado. La variable <em><strong>$this</strong></em>
 se puede utilizar en cualquier método, y hace referencia al objeto que 
hemos instanciado, en este caso $miCoche. Podemos obtener el mismo 
resultado que antes para mostrar el color del coche pero ahora 
utilizando un <strong>método</strong> para mostrar la <strong>propiedad </strong>color:</p>
<pre><code class="hljs php"><span class="hljs-comment">//...</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Color del coche: '</span> . <span class="hljs-variable">$miCoche</span>-&gt;getColor();</code></pre>
<p>Las <strong>propiedades</strong> pueden tener <strong>valores por defecto</strong>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span> = <span class="hljs-string">'rojo'</span>;
<span class="hljs-comment">//...</span>
}</code></pre>
<p>De esta forma siempre que se instancie un objeto de la clase <strong>Coche</strong>, éste será de color rojo a no ser que se modifique después. Ahora creamos también el objeto <em>$otroCoche</em> y le ponemos otras características:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{

    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span> = <span class="hljs-string">'rojo'</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$potencia</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$marca</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;color;
    }
}

<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> Coche();
<span class="hljs-variable">$miCoche</span>-&gt;color = <span class="hljs-string">'verde'</span>;
<span class="hljs-variable">$miCoche</span>-&gt;potencia = <span class="hljs-number">120</span>;
<span class="hljs-variable">$miCoche</span>-&gt;marca = <span class="hljs-string">'audi'</span>;

<span class="hljs-variable">$otroCoche</span> = <span class="hljs-keyword">new</span> Coche();
<span class="hljs-variable">$otroCoche</span>-&gt;color = <span class="hljs-string">'azul'</span>;
<span class="hljs-variable">$otroCoche</span>-&gt;potencia = <span class="hljs-number">100</span>;
<span class="hljs-variable">$otroCoche</span>-&gt;marca = <span class="hljs-string">'bmw'</span>;
</code></pre>
<p>Creamos ahora dos "<em>getters</em>" para la potencia y la marca:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{

    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span> = <span class="hljs-string">'rojo'</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$potencia</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$marca</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;color;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPotencia</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;potencia;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMarca</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;marca;
    }
}</code></pre>
<p>Y creamos una función (fuera de la clase) que devuelve las caracteristicas totales de un objeto coche:</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printCaracteristicas</span><span class="hljs-params">(<span class="hljs-variable">$cocheConcreto</span>)</span>
    </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Color: '</span>. <span class="hljs-variable">$cocheConcreto</span>-&gt;getColor();
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Potencia: '</span>. <span class="hljs-variable">$cocheConcreto</span>-&gt;getPotencia();
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Marca: '</span>. <span class="hljs-variable">$cocheConcreto</span>-&gt;getMarca();
    }

<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> Coche();
<span class="hljs-variable">$miCoche</span>-&gt;color = <span class="hljs-string">'verde'</span>;
<span class="hljs-variable">$miCoche</span>-&gt;potencia = <span class="hljs-number">120</span>;
<span class="hljs-variable">$miCoche</span>-&gt;marca = <span class="hljs-string">'audi'</span>;

<span class="hljs-variable">$otroCoche</span> = <span class="hljs-keyword">new</span> Coche();
<span class="hljs-variable">$otroCoche</span>-&gt;color = <span class="hljs-string">'azul'</span>;
<span class="hljs-variable">$otroCoche</span>-&gt;potencia = <span class="hljs-number">100</span>;
<span class="hljs-variable">$otroCoche</span>-&gt;marca = <span class="hljs-string">'bmw'</span>;

printCaracteristicas(<span class="hljs-variable">$miCoche</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
printCaracteristicas(<span class="hljs-variable">$otroCoche</span>);
</code></pre>
<p>La función <em>printCaracteristicas()</em> requiere un argumento, <em>$cocheConcreto</em>, que es una instancia de la clase Coche que mostrará las características del propio objeto.</p>
<h3>2. Interacciones entre objetos</h3>
<p>Supongamos ahora que queremos comparar y mostrar <strong>qué coche es más rápido</strong> dependiendo de su potencia. Añadimos un nuevo <strong>método</strong> a la clase <strong>Coche</strong>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-comment">//...</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">elCocheElegidoEsMasRapido</span><span class="hljs-params">(<span class="hljs-variable">$cocheElegido</span>)</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$cocheElegido</span>-&gt;potencia &gt; <span class="hljs-variable">$this</span>-&gt;potencia;
    }
}
<span class="hljs-comment">//...</span></code></pre>
<p>Tenemos dos <strong>objetos</strong> <em>$miCoche</em> y <em>$otroCoche</em>. La condición que mostrará que coche es más rápido:</p>
<pre><code class="hljs php"><span class="hljs-comment">//...</span>
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$miCoche</span>-&gt;elCocheElegidoEsMasRapido(<span class="hljs-variable">$otroCoche</span>)) {
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'El '</span> . <span class="hljs-variable">$otroCoche</span>-&gt;marca . <span class="hljs-string">' es más rápido'</span>;
} <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'El '</span> . <span class="hljs-variable">$miCoche</span>-&gt;marca . <span class="hljs-string">' es más rápido'</span>;
}

<span class="hljs-variable">$miCoche</span>-&gt;elCocheElegidoEsMasRapido(<span class="hljs-variable">$otroCoche</span>);
<span class="hljs-comment">// En este caso el Audi ($miCoche) es más rápido que el BMW ($otroCoche)</span></code></pre>
<p>Podemos <strong>comparar la igualdad entre dos objetos</strong>, con los operadores de <strong>comparación</strong> (==) y de <strong>identidad</strong> (===):</p>
<ul>
<li>Dos objetos serán <strong>iguales</strong> si tienen los <strong>mismos atributos y valores</strong>,
 siendo instancias de la misma clase. En ejemplo anterior, los atributos
 de los dos objetos deberían tener los mismos valores, por ejemplo: 
verde, 100, audi.</li>
<li>Dos objetos serán <strong>idénticos</strong> si además hacen referencia a la <strong>misma instancia de la misma clase</strong>. </li>
</ul>
<h3>3. Public, protected y private</h3>
<p>Anteriormente hemos definido todas las propiedades y métodos como <em><strong>public</strong></em>.
 Esto significa que pueden ser accedidos y alterados desde cualquier 
parte fuera de la clase. En el ejemplo anterior hemos podido definir <em>$miCoche-&gt;potencia</em> sin ningún problema, y podríamos aplicarle cualquier valor (un número, un string...).</p>
<p>Cuando se define una propiedad como <em><strong>private</strong></em>, se indica que ésta no puede verse o modificarse a no ser que sea desde la propia clase. Si utilizamos <em>$miCoche-&gt;potencia</em> para verla o definirla, nos dará error. Si queremos definirla, se utiliza un <em><strong>setter</strong></em>, un <strong>método public</strong> para definir una <strong>propiedad private</strong>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{

    <span class="hljs-comment">//...</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPotencia</span><span class="hljs-params">(<span class="hljs-variable">$potencia</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;potencia = <span class="hljs-variable">$potencia</span>;
    }
    <span class="hljs-comment">//...</span>
}</code></pre>
<p>Así podemos definir desde fuera de la clase el valor de la propiedad potencia:</p>
<pre><code class="hljs php"><span class="hljs-comment">//...</span>
<span class="hljs-variable">$miCoche</span>-&gt;setPotencia(<span class="hljs-number">120</span>);</code></pre>
<p>También deberemos de tener un <em><strong>getter</strong></em> para poder acceder al valor que tiene establecido la propiedad:</p>
<pre><code class="hljs php">    <span class="hljs-comment">//...</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPotencia</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;potencia;
    }
    <span class="hljs-comment">//...</span></code></pre>
<p>Con esto conseguimos, entre otras cosas, que puedan definirse <strong>valores limitados</strong>. En este caso, la propiedad <em>$potencia</em> queremos que pueda ser sólo un <strong>número</strong>. Para ello, modificamos el <em><strong>setter</strong></em> anterior:</p>
<pre><code class="hljs php">    <span class="hljs-comment">//...</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPotencia</span><span class="hljs-params">(<span class="hljs-variable">$potencia</span>)</span>
    </span>{
        <span class="hljs-keyword">if</span>(!is_numeric(<span class="hljs-variable">$potencia</span>)){
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-keyword">Exception</span>(<span class="hljs-string">'Potencia no válida: '</span>. <span class="hljs-variable">$potencia</span>);
        }
        <span class="hljs-comment">// Si $potencia no es un número, devolverá un error</span>
        <span class="hljs-variable">$this</span>-&gt;potencia = <span class="hljs-variable">$potencia</span>;
    }
    <span class="hljs-comment">//...</span></code></pre>
<p>Para entender las propiedades y métodos bajo la <strong>palabra reservada protected</strong>, vamos a explicar primero las relaciones entre clases mediante la <strong>herencia</strong>.</p>
<p>Una clase puede <strong>heredar métodos y propiedades</strong> de 
otra clase, y éstos se pueden sobreescribir empleando el mismo nombre 
que en la clase madre. Las clases sólo pueden heredar de una única clase
 (no es posible <strong>herencia múltiple</strong>), pero sí que pueden heredarse unas a otras (sí es posible <strong>herencia multinivel</strong>). La herencia se realiza mediante la palabra <em><strong>extends</strong></em>.</p>
<p>Supongamos ahora la clase <strong>Coche</strong> con <strong>3 tipos de propiedades</strong> y <strong>CocheDeLujo</strong> como heredera:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$color</span> = <span class="hljs-string">'red'</span>;
    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$potencia</span> = <span class="hljs-number">120</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$marca</span> = <span class="hljs-string">'audi'</span>;
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CocheDeLujo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coche</span> </span>{

    <span class="hljs-comment">// La función displayColor devolverá un error porque es private</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;color;
    }
    <span class="hljs-comment">// La función displayPotencia devolverá 120, ya que hereda el valor</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayPotencia</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;potencia;
    }
    <span class="hljs-comment">// La función displayMarca devolverá audi, ya que también hereda el valor</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayMarca</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;marca;
    }
}</code></pre>
<p>La clase <strong>CocheDeLujo</strong> podrá emplear y modificar las propiedades y métodos <strong>protected</strong> y <strong>public</strong> de la madre, pero no las <strong>private</strong>. Además, podrá añadir cualquier propiedad o <strong>métodos complementarios</strong>. Creamos varios métodos en la clase Coche, incluído <em>printCaracteristicas()</em>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$color</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setColor</span><span class="hljs-params">(<span class="hljs-variable">$color</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;color = <span class="hljs-variable">$color</span>;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;color;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printCaracteristicas</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Color: '</span>. <span class="hljs-variable">$this</span>-&gt;getColor;
    }
}</code></pre>
<p>Añadimos otros métodos en CocheDeLujo, y modificamos la herencia de <em>printCaracteristicas()</em>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CocheDeLujo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$extras</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setExtras</span><span class="hljs-params">(<span class="hljs-variable">$extras</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;extras = <span class="hljs-variable">$extras</span>;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getExtras</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;extras;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printCaracteristicas</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Color: '</span>. <span class="hljs-variable">$this</span>-&gt;color;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;hr/&gt;'</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Extras: '</span> . <span class="hljs-variable">$this</span>-&gt;extras;
    }
}

<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> CocheDeLujo();
<span class="hljs-variable">$miCoche</span>-&gt;setColor(<span class="hljs-string">'negro'</span>);
<span class="hljs-variable">$miCoche</span>-&gt;setExtras(<span class="hljs-string">'TV'</span>);

<span class="hljs-variable">$miCoche</span>-&gt;printCaracteristicas(); <span class="hljs-comment">// Devuelve Color : negro Extras: TV</span></code></pre>
<p>El objeto <em>$miCoche</em>, que es una instancia de la clase <strong>CocheDeLujo</strong>, puede determinar la nueva propiedad <em>$extras</em> además de las anteriores. El método que se ha heredado se ha modificado para añadir la nueva característica. </p>
<p><strong>Accesos que permiten las palabras reservadas public, protected y private en métodos y propiedades:</strong></p>
<p>Private:</p>
<ul>
<li>Desde la misma clase que declara</li>
</ul>
<p>Protected:</p>
<ul>
<li>Desde la misma clase que declara</li>
<li>Desde las clases que heredan esta clase</li>
</ul>
<p>Public:</p>
<ul>
<li>Desde la misma clase que declara</li>
<li>Desde las clases que heredan esta clase</li>
<li>Desde cualquier elemento fuera de la clase</li>
</ul>
<p>Es posible <strong>impedir que un método pueda sobreescribirse</strong> mediante la palabra <strong>final</strong>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Rojo"</span>;
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CocheDeLujo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Azul"</span>;
    }
} <span class="hljs-comment">// Dará un error fatal, getColor() no puede sobreescribirse</span></code></pre>
<p>También se puede <strong>impedir que la clase pueda heredarse</strong> mediante la misma palabra:</p>
<pre><code class="hljs php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Rojo"</span>;
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CocheDeLujo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-comment">// Error fatal, clase no heredable</span>
}</code></pre>
<h3>4. Paamayim Nekudotayim</h3>
<p>Se le llama <strong>Paamayim Nekudotayim</strong>, operador de resolución de ámbito o doble dos puntos "::" (<em><strong>double colon</strong></em>) al operador que permite acceder a <strong>constantes</strong> y a <strong>métodos estáticos</strong> además de poder <strong>sobreescribir propiedades o métodos de una clase</strong>. En los dos siguientes apartados se explican las <strong>constantes</strong> y los <strong>métodos estáticos</strong>.</p>
<h3>5. Constantes</h3>
<p>Las <strong>constantes</strong> son <strong>valores invariables</strong>. Se definen mediante la palabra <em><strong>const</strong></em> y se obtienen utilizando el operador <strong>double colon</strong>: _$objeto::CONSTANTE _o <em>NombreClase::CONSTANTE</em>. No van precedidas del símbolo $ y se escriben en mayúscula:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">const</span> RUEDAS = <span class="hljs-number">4</span>;
}
<span class="hljs-comment">// Obtener el valor mediante el nombre de la clase:</span>
<span class="hljs-keyword">echo</span> Coche::RUEDAS . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// Obtener el valor mediante el objeto:</span>
<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> Coche();
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$miCoche</span>::RUEDAS . <span class="hljs-string">"\n"</span>;</code></pre>
<h3>6. Propiedades y métodos estáticos</h3>
<p>Las <strong>propiedades y métodos estáticos</strong> permiten que sean accesibles sin la necesidad de instanciar la clase. Es importante saber que no se puede acceder a una <strong>propiedad static</strong> con un <strong>objeto instanciado</strong>, aunque sí a un <strong>método static</strong>.</p>
<p>No es posible usar la <strong>pseudo-variable $this</strong>, ya que los métodos estáticos pueden ejecutarse sin tener una instancia del objeto, y <em>$this</em> hace referencia al objeto creado.</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">$color</span> = <span class="hljs-string">'rojo'</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mostrarColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>::<span class="hljs-variable">$color</span>;
    }
}

<span class="hljs-keyword">print</span> Coche::<span class="hljs-variable">$color</span> . <span class="hljs-string">"\n"</span>; <span class="hljs-comment">// Muestra "rojo"</span>

<span class="hljs-comment">// Creando el objeto miCoche:</span>
<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> Coche();
<span class="hljs-keyword">print</span> <span class="hljs-variable">$miCoche</span>-&gt;mostrarColor() . <span class="hljs-string">"\n"</span>; <span class="hljs-comment">// Muestra "rojo"</span>
<span class="hljs-keyword">print</span> <span class="hljs-variable">$miCoche</span>-&gt;color . <span class="hljs-string">"\n"</span>; <span class="hljs-comment">// Error, propiedad color no definida</span>
<span class="hljs-keyword">print</span> <span class="hljs-variable">$miCoche</span>::<span class="hljs-variable">$color</span> . <span class="hljs-string">"\n"</span>; <span class="hljs-comment">// Muestra "rojo"</span></code></pre>
<p>En este ejemplo hemos visto que <strong>no</strong> se puede obtener la <strong>propiedad</strong> _$color _desde la instancia del objeto. En el siguiente ejemplo se puede obtener un <strong>método</strong> instanciando la clase o no:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mostrarColor</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Rojo'</span>;
    }
}
Coche::mostrarColor(); <span class="hljs-comment">// Muestra Rojo</span>
<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> Coche;
<span class="hljs-variable">$miCoche</span>-&gt;mostrarColor(); <span class="hljs-comment">// Muestra Rojo</span></code></pre>
<h3>7. Traits</h3>
<p>Los <strong>traits</strong> son como <strong>clases</strong> que agrupan funcionalidades diseñadas para ser reutilizadas en otras clases y así evitar las limitaciones de la <strong>herencia simple</strong>. A diferencia de las clases, <strong>no se pueden instanciar</strong>, tan sólo permiten utilizar sus funciones específicas en otras clases. Los <strong>traits</strong> permiten relaciones horizontales entre clases evitando así la verticalidad.</p>
<p>En el siguiente ejemplo se utiliza un <strong>trait</strong> para mostrar el modelo de coche. En la clase <strong>Ventas</strong> se incluye <em>use Modelo</em>, este <strong>trait</strong> tiene una función <em>getModelo()</em> que presupone que en la clase donde se vaya a utilizar existe un método <em>getMarca()</em> de la clase <strong>Coche</strong>. Los métodos de la clase <strong>Ventas</strong> sobreescriben los métodos del <strong>trait</strong>, y éstos a su vez sobreescriben la clase <strong>Coche</strong>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMarca</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Renault '</span>;
    }
}
<span class="hljs-keyword">trait</span> Modelo {
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getModelo</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">parent</span>::getMarca();
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Clio'</span>;
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ventas</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">use</span> <span class="hljs-title">Modelo</span>;
}

<span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> Ventas();
<span class="hljs-variable">$o</span>-&gt;getMarca(); <span class="hljs-comment">// Podemos obtener este método de la clase Coche</span>
<span class="hljs-variable">$o</span>-&gt;getModelo(); <span class="hljs-comment">// Podemos obtener este método del trait Modelo</span></code></pre>
<p>Se pueden emplear <strong>múltiples traits</strong> añadiéndolos a la clase:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ventas</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">use</span> <span class="hljs-title">Model</span>, <span class="hljs-title">Serie</span>, <span class="hljs-title">Versi</span>ó<span class="hljs-title">n</span>;
    <span class="hljs-comment">//...</span>
}</code></pre>
<p>O incluso <strong>emplear múltiples traits en otro trait</strong> para luego usarlo en la clase:</p>
<pre><code class="hljs php"><span class="hljs-keyword">trait</span> Coche {
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMarca</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Renault '</span>;
    }
}
<span class="hljs-keyword">trait</span> Modelo {
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getModelo</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Clio'</span>;
    }
}
<span class="hljs-keyword">trait</span> CocheModelo {
    <span class="hljs-keyword">use</span> <span class="hljs-title">Coche</span>, <span class="hljs-title">Modelo</span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venta</span> </span>{
    <span class="hljs-keyword">use</span> <span class="hljs-title">CocheModelo</span>;
}

<span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> Venta();
<span class="hljs-variable">$o</span>-&gt;getMarca();
<span class="hljs-variable">$o</span>-&gt;getModelo();</code></pre>
<p>Los <strong>traits también pueden incluir propiedades y métodos estáticos.</strong></p>
<h3>8. Type hinting</h3>
<p>El <strong>Type hinting</strong>, o la <strong>implicación de tipos</strong>, permite determinar el tipo de <strong>parámetro</strong> que un <strong>método</strong> va a devolver: <strong>objeto</strong>, <strong>array</strong>, <strong>interfaz</strong> o <strong>callable</strong>.
 No añade ningún tipo de funcionalidad, pero es muy útil por ejemplo 
para saber si cometes algún error al añadir argumentos con valores 
incorrectos.</p>
<p>En el siguiente ejemplo al argumento de la función <em>listadoCochesEnVenta(Venta $venta)</em> se le exige que sea una instancia de la clase <strong>Venta</strong>. Si se pasara cualquier otro argumento, daría error:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venta</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coche</span> = <span class="hljs-string">'Audi'</span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listadoCochesEnVenta</span><span class="hljs-params">(Venta <span class="hljs-variable">$venta</span>)</span>
    </span>{
            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$venta</span>-&gt;coche;
    }
}
<span class="hljs-variable">$venta</span> = <span class="hljs-keyword">new</span> Venta;
<span class="hljs-variable">$coche</span> = <span class="hljs-keyword">new</span> Coche;
<span class="hljs-variable">$coche</span>-&gt;listadoCochesEnVenta(<span class="hljs-variable">$venta</span>); <span class="hljs-comment">// Devuelve Audi</span>
</code></pre>
<p>Si se pusiera, por ejemplo <em>$coche-&gt;listadoCochesEnVenta('Audi')</em> daría error, ya que no es una clase instanciada.</p>
<p>En el siguiente ejemplo, vamos a <strong>exigir un array</strong>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listadoCochesEnVenta</span><span class="hljs-params">(Array <span class="hljs-variable">$listado</span>)</span>
    </span>{
        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$listado</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$coche</span>){
            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$coche</span> . <span class="hljs-string">"\n"</span>;
        }
    }
}
<span class="hljs-variable">$listaCoches</span> = [<span class="hljs-string">'Audi'</span>, <span class="hljs-string">'BMW'</span>];

<span class="hljs-variable">$coche</span> = <span class="hljs-keyword">new</span> Coche;
<span class="hljs-variable">$coche</span>-&gt;listadoCochesEnVenta(<span class="hljs-variable">$listaCoches</span>); <span class="hljs-comment">// Devuelve el listado Audi BMW</span></code></pre>
<p>Si el argumento de <em>listadoCochesEnVenta()</em> no fuera un array, también daría error</p>
<h3>9. Métodos mágicos</h3>
<p>Los <strong>métodos mágicos</strong> permiten reaccionar a <strong>eventos</strong> que le puedan ocurrir a un objeto instanciado. Se inician con una doble barra baja, y son: <strong>__construct()</strong>, <strong>__destruct()</strong>, <strong>call(), </strong>callStatic(), <strong>__get()</strong>, <strong>__set()</strong>, <strong>__isset()</strong>, <strong>__unset()</strong>, <strong>sleep(), </strong>wakeup(), <strong>__toString()</strong>, <strong>invoke(), </strong>set_state(), <strong>clone() y </strong>debugInfo(). Tan se introducen algunos de ellos:</p>
<p>El más utilizado es el <strong>constructor __construct()</strong>, que se ejecuta cuando el objeto se crea, pudiendo inyectar <strong>parámetros</strong> y <strong>dependecias</strong> requeridos para crear el objeto.</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-variable">$color</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;color = <span class="hljs-variable">$color</span>;
    }
}

<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> Coche(<span class="hljs-string">'Rojo'</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$miCoche</span>-&gt;color; <span class="hljs-comment">// Devuelve Rojo</span></code></pre>
<p>Los constructores también se heredan. Si una clase hija define un 
constructor propio, para heredar el de la madre es necesario indicarlo 
con _<strong>parent::__construct()</strong>_:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-variable">$color</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;color = <span class="hljs-variable">$color</span>;
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CocheDeLujo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coche</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$extras</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-variable">$color</span>, <span class="hljs-variable">$extras</span>)</span>
    </span>{
        <span class="hljs-keyword">parent</span>::__construct(<span class="hljs-variable">$color</span>);
        <span class="hljs-variable">$this</span>-&gt;extras = <span class="hljs-variable">$extras</span>;
    }
}

<span class="hljs-variable">$miCoche</span> = <span class="hljs-keyword">new</span> CocheDeLujo(<span class="hljs-string">'Rojo'</span>, <span class="hljs-string">'TV'</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$miCoche</span>-&gt;color; <span class="hljs-comment">// Devuelve Rojo</span>
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$miCoche</span>-&gt;extras; <span class="hljs-comment">// Devuelve TV</span></code></pre>
<p>El método <strong>__destruct()</strong> hace lo contrario, se ejecuta cuando un objeto se destruye, aunque apenas se utiliza. </p>
<p>Los métodos mágicos <strong>__get()</strong> y <strong>__set()</strong> actúan como <strong>getters</strong> y <strong>setters</strong> para propiedades que no tienen <strong>visibilidad public</strong>.</p>
<p>El método <strong>__isset() </strong>actúa como la <strong>función</strong> isset()<strong> normal, como cuando se trabaja con arrays o variables. Este método mágico permite comprobar la existencia de una </strong>propiedad no pública<strong>. El método </strong>__unset()<strong> también actúa como la </strong>función unset()** normal pero para propiedades no públicas.</p>
<p>El método mágico <strong>__toString()</strong> permite <strong>devolver el objeto en forma de string</strong>:</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$title</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTitle</span><span class="hljs-params">(<span class="hljs-variable">$title</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;title = <span class="hljs-variable">$title</span>;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;title;
    }
}

<span class="hljs-variable">$post</span> = <span class="hljs-keyword">new</span> Post;
<span class="hljs-variable">$post</span>-&gt;setTitle(<span class="hljs-string">'Este es mi primer artículo'</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$post</span>; <span class="hljs-comment">// Devuelve Este es mi primer artículo</span></code></pre>
    </div>

        </div>
    </div>

            <div class="ui vertical footer segment">
    <div class="ui grid container">
        <div class="row">
            <div class="ui one column centered grid">
                <div class="ui secondary segment">
                    <div class="ui mini images">
                        <a href="http://twitter.com/diegotham" target="_blank"><img class="ui image" alt="Twitter Diego Lázaro" src="poo_en_php_files/twitter.jpg"></a>
                        <a href="http://github.com/diegotham" target="_blank"><img class="ui image" alt="Github Diego Lázaro" src="poo_en_php_files/github.jpg"></a>
                    </div>
                <p>Copyright © Diego Lázaro 2018</p>
                    <p>Sitio construido con
                        <a href="http://symfony.com/" rel="nofollow" target="_blank">Symfony</a> &amp;
                        <a href="http://semantic-ui.com/" rel="nofollow" target="_blank">Semantic-UI</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>    
        </div>

                    <script src="poo_en_php_files/jquery.min.js"></script>
            <script src="poo_en_php_files/semantic.min.js"></script>
            <script src="poo_en_php_files/sem.js"></script>
        
    


</body></html>