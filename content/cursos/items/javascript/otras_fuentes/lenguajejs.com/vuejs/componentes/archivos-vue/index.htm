<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#42b883">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>¿Qué son los archivos .vue? - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Los archivos .vue son los llamados componentes SFC (Single File Component) que se utilizan en Vue para crear partes reutilizables de una página.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="¿Qué son los archivos .vue? - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/vuejs/componentes/archivos-vue/componentes-vue.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Los archivos .vue son los llamados componentes SFC (Single File Component) que se utilizan en Vue para crear partes reutilizables de una página.">
  <meta property="og:url" content="https://lenguajejs.com/vuejs/componentes/archivos-vue/">
  <meta property="twitter:url" content="https://lenguajejs.com/vuejs/componentes/archivos-vue/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="¿Qué son los archivos .vue? - Javascript en español">
  <meta property="twitter:description" content="Los archivos .vue son los llamados componentes SFC (Single File Component) que se utilizan en Vue para crear partes reutilizables de una página.">
  <meta property="twitter:image" content="https://lenguajejs.com/vuejs/componentes/archivos-vue/componentes-vue.png">

  </head>

<body class="js menu-open " style="--logo-color: #287853"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (vuejs)" href="../../index.htm" style="--image: url('../../../assets/vuejs.jpg')"></a>

    <header>
      <a href="../../introduccion/que-es-un-framework/index.htm" title="Frameworks Javascript">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../directivas-vue/que-son-directivas/index.htm" title="¿Qué son las directivas de Vue?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Componentes SFC
      </span>
            <a class="link" href="../que-es-un-componente/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es un componente?
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué son los archivos .vue?
            </a>
            <a class="link" href="../options-api/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Options API (Vue 2/3)
            </a>
            <a class="link" href="../ciclo-vida/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Ciclo de vida (Lifecycle hooks)
            </a>
            <a class="link" href="../instancias-vue/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Propiedades de Instancias (Vue 2+)
            </a>
            <a class="link" href="../composition-api/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Composition API (Vue 3)
            </a>
            <a class="link" href="../reactividad-api/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              API de Reactividad (Vue 3)
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/vuejs.jpg')">
    <h1><a href="index.htm">¿Qué son los archivos .vue?</a></h1><h2 class="typewriter">Componentes SFC (Single File Component) de Vue 3</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../que-es-un-componente/index.htm">¿Qué es un componente?</a>
    <a class="current" href="index.htm">¿Qué son los archivos .vue?</a>
    <a href="../options-api/index.htm">Options API (Vue 2/3)</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>En un proyecto <strong>Vue</strong>, lo habitual suele ser utilizar los denominados <strong>Componentes SFC</strong> (<em>Single File Component</em>), o lo que es lo mismo, <strong>componentes en un único fichero</strong>. Se trata de una variación de un fichero <code>.html</code> (<em>realmente no es HTML, pero se parece mucho</em>) especialmente diseñada para cubrir las demandas de los componentes de un framework de frontend.</p>
<p><img src="componentes-vue.png" alt="Componentes SFC Vue" width="1024" height="425" loading="lazy"></p>
<p>Estos ficheros tienen la extensión <code>.vue</code> y generalmente se encuentran en la carpeta <code>src/components</code> del proyecto, salvo una excepción, el archivo <code>App.vue</code>, que es el componente principal de la aplicación y se encuentra en la carpeta <code>src</code>, fuera de <code>components</code>.</p>
<h3 id="por-qué-ficheros-vue" tabindex="-1"><a class="header-anchor" href="#por-qué-ficheros-vue">¿Por qué ficheros <code>.vue</code>?</a></h3>
<p>Antes de la aparición de esta funcionalidad de <strong>Vue</strong>, muchos frameworks Javascript basados en componentes utilizaban (<em>incluso aún hoy en día se utilizan</em>) una separación <strong>por tecnologías</strong>, donde para un determinado componente <code>.js</code>, le acompaña también un fichero de estilos <code>.css</code> (<em>o de algún preprocesador relacionado como <code>.scss</code></em>).</p>
<p>Con el tiempo, el proyecto crece, y el número de componentes también, por lo que tener separado un componente en diferentes archivos multiplica el número total de archivos y (<em>aunque esto puede ser muy subjetivo</em>) hace más complejo el manejar y cambiar entre archivos a la hora de codificar.</p>
<p>Además, obligarte a tener componentes lo suficientemente pequeños como para que sean manejables puede ser una buena práctica para obligarte a no complicar demasiado el componente, y si lo hace, dividirlo en subcomponentes más pequeños.</p>
<blockquote>
<p>Por esta razón, en <strong>Vue</strong> se suele utilizar un sólo fichero <code>.vue</code> para los componentes, el cuál incluye todas las tecnologías relacionadas en él. No obstante, si lo prefieres, puedes separarlos en archivos diferentes, como veremos más adelante.</p>
</blockquote>
<h3 id="estructura-de-archivos-vue" tabindex="-1"><a class="header-anchor" href="#estructura-de-archivos-vue">Estructura de archivos <code>.vue</code></a></h3>
<p>Como habíamos comentado anteriormente, un archivo <code>.vue</code> parece un archivo <code>.html</code>, pero realmente sólo lo parece, ya que su finalidad es hacer la <strong>curva de aprendizaje</strong> de <strong>Vue</strong> mucho más suave.</p>
<p>Dicho componente o archivo <code>.vue</code> tendrá una estructura similar a la siguiente:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Código HTML --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// Código Javascript</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token comment">/* Código CSS */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>Como vemos, en un sólo fichero podemos escribir las 3 tecnologías principales del frontend: <strong>HTML</strong>, <strong>Javascript</strong> y <strong>CSS</strong>. Sin embargo, cada una de estas etiquetas tiene algunas particularidades propias de <strong>Vue</strong>, que permiten añadir más potencia a los <strong>componentes SFC</strong>. Analizaremos de cuales se trata en los siguientes apartados de este artículo.</p>
<h4 id="separación-de-tecnologías" tabindex="-1"><a class="header-anchor" href="#separación-de-tecnologías">Separación de tecnologías</a></h4>
<p>Como comentamos, las diferentes tecnologías se incluyen por defecto en el mismo archivo <code>.vue</code>, pero si prefieres tenerlo en archivos separados, puedes hacerlo de la siguiente forma:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Código HTML --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./BaseComponent.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./BaseComponent.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>Observa que en este caso tendríamos tres archivos diferentes por componente: <code>BaseComponent.vue</code> donde tendríamos la etiqueta <code>&lt;template&gt;</code> con el contenido HTML del mismo y las referencias a los otros dos archivos: <code>BaseComponent.js</code> para el Javascript y <code>BaseComponent.css</code> para los estilos CSS.</p>
<blockquote>
<p>Es decisión del desarrollador decidir si los archivos <code>.vue</code> tendrán todo en un solo fichero o se separarán el <code>.css</code> y el <code>.js</code> (<em>o ambos</em>) en diferentes archivos. En la práctica, lo habitual es mantener todo en el mismo archivo <code>.vue</code>.</p>
</blockquote>
<h3 id="los-templates-de-vue-html" tabindex="-1"><a class="header-anchor" href="#los-templates-de-vue-html">Los templates de Vue (HTML)</a></h3>
<p>La etiqueta <code>&lt;template&gt;</code> representa la plantilla que contiene el contenido HTML del componente. Realmente tiene varios añadidos, puesto que se pueden realizar bucles, condicionales y otras acciones directamente desde las etiquetas HTML con unas <strong>directivas de Vue</strong>, que veremos más adelante.</p>
<p>De momento podemos añadir contenido <strong>HTML</strong> simple, del que ya conocemos y aprendimos en nuestra página <a href="https://lenguajehtml.com/">LenguajeHTML</a>:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Mi App.vue principal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre>
<h4 id="soporte-para-vue-2" tabindex="-1"><a class="header-anchor" href="#soporte-para-vue-2">Soporte para Vue 2</a></h4>
<p>Ten en cuenta que en el ejemplo anterior sólo estamos utilizando un elemento <code>&lt;div&gt;</code>. Si estamos utilizando <strong>Vue 2</strong> y añadimos más elementos hermanos a este (<em>al mismo nivel, fuera de container pero dentro de template</em>), nos aparecerá un error similar al siguiente:</p>
<blockquote>
<blockquote>
<blockquote>
<p>Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.</p>
</blockquote>
</blockquote>
</blockquote>
<p>Esto es una limitación de <strong>Vue 2</strong>, ya que dentro de la etiqueta <code>&lt;template&gt;</code> sólo puede existir un elemento hijo. Dicho de otra forma, en el ejemplo anterior todo el contenido <strong>HTML</strong> debería estar dentro del <code>&lt;div&gt;</code> con clase <code>container</code>, para sólo tener un elemento raíz en <code>&lt;template&gt;</code>.</p>
<p>Existen tres formas de solucionar este problema:</p>
<ul>
<li>Introducir todo el contenido dentro de un elemento <code>&lt;div&gt;</code> contenedor.</li>
<li>Utilizar el plugin <a href="https://github.com/Thunberg087/vue-fragment">vue-fragments</a>, que permite solucionarlo.</li>
<li>Utilizar <strong>Vue 3</strong>, en el cuál no tenemos esta limitación y podemos añadir múltiples hijos.</li>
</ul>
<h4 id="usando-pug-con-vue" tabindex="-1"><a class="header-anchor" href="#usando-pug-con-vue">Usando Pug con Vue</a></h4>
<p>Además, si lo preferimos, podemos utilizar el sistema de plantillas Javascript <a href="https://pugjs.org/">Pug</a>, lo que nos permite escribir etiquetas de forma mucho menos verbose, y utilizar algunas características dinámicas.</p>
<p>Si lo queremos utilizar, necesitaremos instalar la propia librería:</p>
<pre class="language-bash "><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> pug</code></pre>
<p>Una vez hecho, añadimos el atributo <code>lang=&quot;pug&quot;</code> en la etiqueta <code>&lt;template&gt;</code>. El siguiente ejemplo sería el equivalente a la plantilla <code>&lt;template&gt;</code> que escribimos en el código <strong>HTML</strong> anterior:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
.container
  h1 Mi App.vue principal!
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre>
<p>Con esto estaremos preparados para escribir código <strong>Pug</strong> (<em>antiguamente llamado Jade</em>).</p>
<blockquote>
<p>Más adelante hablaremos en mayor profundidad sobre los <strong>templates de Vue</strong>, su etiquetado dinámico (<em>que permite bucles, condicionales y otras estructuras</em>) y sus directivas.</p>
</blockquote>
<h3 id="los-scripts-de-vue-javascript" tabindex="-1"><a class="header-anchor" href="#los-scripts-de-vue-javascript">Los scripts de Vue (Javascript)</a></h3>
<p>Una de las partes más interesantes de los archivos <code>.vue</code> es la parte de Javascript, donde creamos una etiqueta <code>&lt;script&gt;</code> que contendrá todo el Javascript de <strong>Vue</strong> relacionado con el componente.</p>
<p>La estructura mínima de esta parte es muy similar a lo que vemos a continuación:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"App"</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Básicamente, lo que hacemos es exportar <strong>por defecto</strong> un objeto que son las <strong>opciones del componente Vue</strong> (<em>Vue API Option</em>). Como mínimo, este objeto de opciones tendrá la propiedad <code>name</code> con el nombre que le hemos dado al componente. En este caso le he puesto <code>App</code> porque estoy creando el fichero <code>App.vue</code>. A medida que avancemos en nuestro componente, iremos añadiendo nuevas propiedades al objeto que irán ampliando su funcionalidad.</p>
<p>Por ejemplo, en el siguiente fragmento de código vemos como lo ampliamos para cargar otro componente externo llamado <code>BaseButton.vue</code> que se encuentra en la carpeta <code>components</code>:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> BaseButton <span class="token keyword">from</span> <span class="token string">"./components/BaseButton.vue"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    BaseButton
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Lo primero sería importar el componente utilizando <code>import</code> y haciendo referencia al archivo <code>.vue</code> del componente. Observa que como estoy en el archivo <code>App.vue</code> que se encuentra en la carpeta <code>src</code> debo hacer referencia a la ruta desde donde estoy.</p>
<blockquote>
<p>Es muy común encontrarse los imports utilizando una ruta que comienza por <code>@</code>, como por ejemplo, <code>&quot;@/components/BaseButton.vue&quot;</code>. La <code>@</code> es un <strong>alias</strong> que utiliza <strong>Vue</strong> para hacer referencia a la carpeta <code>src</code>. Esto permite «normalizar» las rutas para que sean más sencillas de escribir e interpretar.</p>
</blockquote>
<p>Luego, en el objeto que exportamos, añadimos una propiedad <code>components</code> que contendrá un objeto con todos los componentes que hayamos importado y queramos utilizar en nuestro archivo <code>.vue</code>.</p>
<p>Una vez hecho esto, sólo tendríamos que modificar nuestro <code>&lt;template&gt;</code> y añadir la etiqueta HTML del componente que hemos creado (<em>en este caso <code>&lt;BaseButton&gt;</code></em>):</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseButton</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre>
<p>Así se cargará todo el contenido de dicho componente de la misma forma que hemos hecho con el componente actual, lo que permite reutilizar código muy facilmente.</p>
<blockquote>
<p>Ten en cuenta que estamos usando la <strong>API de objetos</strong> de Vue (<em>la clásica, que se puede utilizar tanto en Vue 2 como en Vue 3</em>). Más adelante abordaremos la <strong>API de composición</strong> que se introduce en <strong>Vue 3</strong> e indicada para hacer componentes mucho más escalables y reutilizables.</p>
</blockquote>
<h4 id="usando-typescript-con-vue" tabindex="-1"><a class="header-anchor" href="#usando-typescript-con-vue">Usando TypeScript con Vue</a></h4>
<p>En muchos casos nos podría interesar utilizar <strong>TypeScript</strong> en lugar de <strong>Javascript</strong> en nuestros componentes <code>.vue</code>. En primer lugar, añadiremos el atributo <code>lang=&quot;ts&quot;</code> a nuestra etiqueta <code>&lt;script&gt;</code>, indicando que utilizaremos <strong>TypeScript</strong>.</p>
<p>En Vue 3, sólo tendremos que añadir lo siguiente:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> BaseButton <span class="token keyword">from</span> <span class="token string">"./components/BaseButton.vue"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    BaseButton
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>A través de <code>defineComponent</code>, envolvemos el objeto de opciones de Vue, haciendo la sintaxis mucho más sencilla y parecida a lo que hacemos con Vue y Javascript vanilla.</p>
<blockquote>
<p>Más adelante hablaremos en mayor profundidad sobre los <strong>componentes de Vue</strong> y sus diferentes APIs, entre las que se encuentran la API de objetos y la API de composición.</p>
</blockquote>
<h3 id="los-estilos-de-vue-css" tabindex="-1"><a class="header-anchor" href="#los-estilos-de-vue-css">Los estilos de Vue (CSS)</a></h3>
<p>Por último (<em>pero no por ello menos importante</em>) tenemos la etiqueta <code>&lt;style&gt;</code> de los archivos <code>.vue</code>. En ella podremos indicar los estilos CSS <strong>implicados con el componente</strong> en cuestión, por lo que serán mucho más fáciles de encontrar y mantener con el tiempo.</p>
<p>En el caso de <code>App.vue</code> tendremos una suerte de <strong>estilos globales o generales</strong>, que no tienen cabida en otros componentes, pero habitualmente en la etiqueta <code>&lt;style&gt;</code> solo tendremos los estilos CSS relacionados con el componente en cuestión y sus partes.</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> steelblue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<h4 id="soporte-de-preprocesadores" tabindex="-1"><a class="header-anchor" href="#soporte-de-preprocesadores">Soporte de preprocesadores</a></h4>
<p>Es posible utilizar el atributo <code>lang</code> para indicar que lo que escribimos en la etiqueta no es <strong>CSS</strong> nativo sino transformado con algún tipo de preprocesador, como por ejemplo: <code>sass</code>, <code>scss</code>, <code>less</code> o <code>stylus</code>.</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  $<span class="token property">color</span><span class="token punctuation">:</span> steelblue<span class="token punctuation">;</span>

  <span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> $color<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>Recuerda que para que esto funcione correctamente, primero tendrás que instalar la dependencia con NPM, utilizando el siguiente comando: <code>npm install sass</code>.</p>
<blockquote>
<p>Si no se indica ningún atributo <code>lang</code>, solo podrás escribir en CSS nativo, o en <a href="https://lenguajecss.com/postcss/introduccion/que-es/">PostCSS</a> si incluyes un fichero de configuración <code>postcss.config.js</code> en el raíz del proyecto.</p>
</blockquote>
<h4 id="límite-de-alcance-css-con-scoped" tabindex="-1"><a class="header-anchor" href="#límite-de-alcance-css-con-scoped">Límite de alcance CSS con <code>scoped</code></a></h4>
<p>Algo muy interesante en <strong>Vue</strong> es que podemos añadir el atributo <code>scoped</code> a la etiqueta <code>&lt;style&gt;</code> y estaremos definiendo que los estilos CSS de la etiqueta sólo se aplicarán al componente, por lo que si tenemos estilos con las mismas clases (<em>por ejemplo</em>) en otros componentes, no les afectarán.</p>
<p>Por otro lado, también se puede añadir el atributo <code>module</code> en la etiqueta <code>&lt;style&gt;</code> (<em>incluso tener múltiples etiquetas por componente</em>) para crear un módulo CSS. Esto nos permitirá hacer referencia a estilos CSS desde Javascript de una forma directa y sencilla. Profundizaremos en ello más adelante.</p>
<blockquote>
<p>En próximos capítulos hablaremos en mayor profundidad sobre los estilos CSS en <strong>componentes de Vue</strong>, así como ver varios ejemplos de sus características particulares.</p>
</blockquote>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../que-es-un-componente/index.htm" title="¿Qué es un componente?">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>¿Qué es un componente?</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../options-api/index.htm" title="Options API (Vue 2/3)">
  <div>
    <span>Options API (Vue 2/3)</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../../javascript/index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
