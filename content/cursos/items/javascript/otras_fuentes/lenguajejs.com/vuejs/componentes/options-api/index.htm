<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#42b883">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Options API (Vue 2/3) - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="La conocida como «Option API» es la forma tradicional de trabajar con Vue, que es posible utilizarla tanto en la versión 2 de Vue como en la versión 3.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Options API (Vue 2/3) - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/vuejs/componentes/options-api/vue-options-api.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="La conocida como «Option API» es la forma tradicional de trabajar con Vue, que es posible utilizarla tanto en la versión 2 de Vue como en la versión 3.">
  <meta property="og:url" content="https://lenguajejs.com/vuejs/componentes/options-api/">
  <meta property="twitter:url" content="https://lenguajejs.com/vuejs/componentes/options-api/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Options API (Vue 2/3) - Javascript en español">
  <meta property="twitter:description" content="La conocida como «Option API» es la forma tradicional de trabajar con Vue, que es posible utilizarla tanto en la versión 2 de Vue como en la versión 3.">
  <meta property="twitter:image" content="https://lenguajejs.com/vuejs/componentes/options-api/vue-options-api.png">

  </head>

<body class="js menu-open " style="--logo-color: #287853"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (vuejs)" href="../../index.htm" style="--image: url('../../../assets/vuejs.jpg')"></a>

    <header>
      <a href="../../introduccion/que-es-un-framework/index.htm" title="Frameworks Javascript">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../directivas-vue/que-son-directivas/index.htm" title="¿Qué son las directivas de Vue?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Componentes SFC
      </span>
            <a class="link" href="../que-es-un-componente/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es un componente?
            </a>
            <a class="link" href="../archivos-vue/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué son los archivos .vue?
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Options API (Vue 2/3)
            </a>
            <a class="link" href="../ciclo-vida/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Ciclo de vida (Lifecycle hooks)
            </a>
            <a class="link" href="../instancias-vue/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Propiedades de Instancias (Vue 2+)
            </a>
            <a class="link" href="../composition-api/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Composition API (Vue 3)
            </a>
            <a class="link" href="../reactividad-api/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              API de Reactividad (Vue 3)
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/vuejs.jpg')">
    <h1><a href="index.htm">Options API (Vue 2/3)</a></h1><h2 class="typewriter">API de Opciones: Principal en Vue 2/Vue 3</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../archivos-vue/index.htm">¿Qué son los archivos .vue?</a>
    <a class="current" href="index.htm">Options API (Vue 2/3)</a>
    <a href="../ciclo-vida/index.htm">Ciclo de vida (Lifecycle hooks)</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>La conocida como «<strong>Options API</strong>» es la forma tradicional de trabajar con <strong>Vue</strong>, estando disponible tanto en la versión <strong>Vue 2</strong> como en <strong>Vue 3</strong>. Esta modalidad de API se basa en el uso de un objeto que contiene varias propiedades clave para el funcionamiento de los componentes Vue, como por ejemplo las propiedades <code>props</code>, <code>data</code>, <code>computed</code>, <code>methods</code>, etc...</p>
<p><img src="vue-options-api.png" alt="Vue Options API (Vue 2+)" width="1024" height="425" loading="lazy"></p>
<p>Cada una de estas <strong>opciones</strong> permite definir un aspecto clave de <strong>Vue</strong>, así que vamos a examinar las principales opciones en la siguiente tabla:</p>
<table>
<thead>
<tr>
<th>Opción</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code> <badge-type class="string"></badge-type></td>
<td>Establece un <strong>nombre</strong> al componente. De lo contrario aparece como &quot;Anónimo&quot; en DevTools.</td>
</tr>
<tr>
<td><code>props</code> <badge-type class="array"></badge-type> / <badge-type class="object"></badge-type></td>
<td>Lista de atributos (props) aceptados desde el componente padre.</td>
</tr>
<tr>
<td><code>data</code> <badge-type class="function"></badge-type></td>
<td>Función que devuelve un <badge-type class="object"></badge-type> con las variables del componente Vue.</td>
</tr>
<tr>
<td><code>computed</code> <badge-type class="object"></badge-type></td>
<td>Lista de funciones que se ejecutarán cuando se acceda a la propiedad en cuestión.</td>
</tr>
<tr>
<td><code>methods</code> <badge-type class="object"></badge-type></td>
<td>Lista de funciones (métodos) disponibles en el componente Vue.</td>
</tr>
<tr>
<td><code>watch</code> <badge-type class="object"></badge-type></td>
<td>Lista de funciones que se disparan cuando detecten cambios en variables con su nombre.</td>
</tr>
<tr>
<td><code>emits</code> <badge-type class="array"></badge-type> / <badge-type class="object"></badge-type></td>
<td>Lista de custom events que pueden ser emitidos desde el componente.</td>
</tr>
</tbody>
</table>
<p>Un <strong>componente Vue</strong> define su lista de opciones y las exporta mediante el <code>export default</code>, que es la que posteriormente en otros componentes cargaremos mediante <code>import</code>.</p>
<p>Lo que vemos a continuación sería el esqueleto básico de un componente SFC guardado en un fichero <code>.vue</code>. En él definimos un objeto de opciones y lo exportamos para dejarlo preparado para consumir en nuestra colección de componentes:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Código HTML --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"BaseComponent"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token comment">/* Estilos CSS */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>En dicho objeto solo hemos insertado las propiedades <code>name</code>, <code>props</code>, <code>data</code>, <code>computed</code> y <code>methods</code>, pero a medida que avancemos en la creación de nuestro componente podremos ir incluyendo las que necesitemos. Vamos a ir explicándolas una por una.</p>
<h3 id="nombre-del-componente-name" tabindex="-1"><a class="header-anchor" href="#nombre-del-componente-name">Nombre del componente (name)</a></h3>
<p>La propiedad <code>name</code> permite establecer un nombre al componente. Aunque no sea obligatorio, es una buena práctica establecer siempre un nombre al componente, ya que si estamos utilizando la extensión <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=es">Vue Dev Tools (Chrome)</a> o <a href="https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools/">Vue Dev Tools (Firefox)</a>, en los componentes se nos mostrará el nombre y no <code>Anonymous Component</code>.</p>
<h3 id="props-del-componente" tabindex="-1"><a class="header-anchor" href="#props-del-componente">Props del componente</a></h3>
<p>Recuerda que el objetivo principal de un componente es prepararlo para ser consumido como una <strong>etiqueta HTML</strong> y facilitar y simplificar la reutilización de dicho componente. Para ello, lo ideal es pasar parámetros a la etiqueta, que harán más flexible la personalización del componente. Esto se hace a través de los llamados <strong>props</strong>, que no son más que la información pasada a través de atributos de la etiqueta HTML (<em>nuestro componente</em>):</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseComponent</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">author</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Manz<span class="token punctuation">"</span></span> <span class="token attr-name">subject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VueJS<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BaseComponent</span><span class="token punctuation">></span></span></code></pre>
<p>Como vemos, desde el HTML del componente podemos pasar los <strong>props</strong>, pero para recibirlos en el componente debemos definirlos en la opción <code>props</code>. Hay 3 formas principales de hacerlo:</p>
<ul>
<li><strong>Modalidad básica</strong>: Con un <badge-type class="array"></badge-type> con el nombre de los props del componente. Es una modalidad poco específica y se recomienda sólo si aún no tenemos bien definido el componente y estamos en una fase de prototipado.</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"subject"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li><strong>Modalidad avanzada rápida</strong>: Con un <badge-type class="object"></badge-type> con los props (<em>clave</em>) y el tipo de dato que se espera de cada uno (<em>valor</em>). Lo recomendable es utilizar como mínimo esta, para así definir un poco más los props de entrada a nuestro componente.</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
    <span class="token literal-property property">author</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">subject</span><span class="token operator">:</span> String
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li><strong>Modalidad avanzada</strong>: Idem al anterior, pero ofreciendo mucha más información indicando otro <badge-type class="object"></badge-type> con los siguientes parámetros por cada prop:</li>
</ul>
<table>
<thead>
<tr>
<th>Parámetro</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>Indica el tipo del prop: <code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Array</code>, <code>Object</code>, etc...</td>
</tr>
<tr>
<td><code>default</code></td>
<td>Indica el <strong>valor por defecto</strong>, en el caso de que no se indique la prop en el componente.</td>
</tr>
<tr>
<td><code>required</code> <badge-type class="boolean"></badge-type></td>
<td>Indica si la prop es obligatoria o no.</td>
</tr>
<tr>
<td><code>validator</code> <badge-type class="function"></badge-type></td>
<td>Comprueba si el valor de la prop es válida o no.</td>
</tr>
</tbody>
</table>
<p>Nuestro ejemplo en esta modalidad quedaría algo parecido a lo siguiente:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token parameter">number</span> <span class="token operator">=></span> number <span class="token operator">></span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"Tema"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Observa que el parámetro <code>validator</code> permite definir una función que devolverá <code>true</code> cuando el valor de la prop es correcto y <code>false</code> cuando no pasa la validación y es incorrecto.</p>
<h3 id="datos-o-variables-data" tabindex="-1"><a class="header-anchor" href="#datos-o-variables-data">Datos o variables (data)</a></h3>
<p>La opción <strong>data</strong> es un lugar donde Vue guarda todas las variables locales al componente. Esta opción se define como una <badge-type class="function"></badge-type> que devuelve un <badge-type class="object"></badge-type>. Dicho objeto tiene en su interior una colección de propiedades que son las variables de Vue que podremos utilizar en nuestro componente.</p>
<p>En este ejemplo, tenemos las variables <code>nickname</code>, <code>role</code> y <code>life</code>, cada una con su valor correspondiente almacenado. Si quisieramos hacer referencia a alguna de ellas en la parte de templates, simplemente utilizaremos <code>{{ nickname }}</code> (<em>o el nombre de la variable deseada</em>):</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Nick: {{ nickname }} ({{ life }})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Role: {{ role }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">"Manz"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"Developer"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">99</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Más adelante veremos que si queremos hacer referencia a las variables desde la parte de los <code>&lt;script&gt;</code>, hay que hacerlo utilizando la palabra clave <code>this</code> (<em>referencia al objeto de la API</em>). Por ejemplo, <code>this.life</code> devolvería <code>99</code>, pero sólo desde la parte de Javascript, en los templates seguiríamos usando <code>{{ life }}</code>.</p>
<blockquote>
<p>No olvides que la sintaxis de <code>data</code> no debe usarse como una propiedad, sino como una <strong>función que devuelve un objeto</strong> con las variables en cuestión.</p>
</blockquote>
<h3 id="prop-computadas-computed" tabindex="-1"><a class="header-anchor" href="#prop-computadas-computed">Prop. computadas (computed)</a></h3>
<p>Las <strong>propiedades computadas</strong> son unas variables precalculadas que puedes reutilizar en Vue sin calcularlas cada vez que las utilices, por lo que pueden ser especialmente interesantes para cálculos u operaciones costosas. Dichas propiedades computadas solo se vuelven a recalcular si detectan que uno de los parámetros implicados cambian, de modo que al calcularse una vez, suele cachear los resultados.</p>
<p>Observa el siguiente ejemplo. Estamos creando una constante (<em>fuera del objeto de opciones de Vue</em>). Luego, en la opción <code>computed</code> creamos una propiedad computada que devuelve esa constante:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Nick: {{ nickname }} ({{ life }} / {{ TOTAL_LIFE }})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Role: {{ role }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> <span class="token constant">TOTAL_LIFE</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">"Manz"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"Developer"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">99</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token constant">TOTAL_LIFE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token constant">TOTAL_LIFE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Una particularidad de las propiedades computadas es que realmente se definen como <strong>funciones</strong>, mientras que se utilizan (<em>como se observa en la parte de templates</em>) como <strong>variables</strong>. En este caso, no estamos usando la <strong>propiedad computada</strong> para un cálculo complejo o costoso (<em>su utilidad más interesante</em>), sino solo para reflejar el valor de una constante con un ejemplo sencillo y ver como se define.</p>
<p>Sin embargo, en el siguiente ejemplo, si se puede ver un poco mejor la utilidad que podría tener. En este caso se utiliza la variable <code>exp</code> que contiene los años de experiencia, mientras que <code>role</code> pasa a ser una propiedad computada que devuelve un <badge-type class="string"></badge-type> dependiendo de la cantidad de años almacenada en <code>exp</code>:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Nick: {{ nickname }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Role: {{ role }} ({{ exp }} experience years)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">"Manz"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">exp</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">99</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">role</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exp <span class="token operator">></span> <span class="token number">12</span> <span class="token operator">?</span> <span class="token string">"Expert"</span>
        <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exp <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">?</span> <span class="token string">"Senior"</span>
        <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exp <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">?</span> <span class="token string">"Middle"</span>
        <span class="token operator">:</span> <span class="token string">"Junior"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Un uso interesante, en vistas de reutilización, suele ser utilizar los <code>props</code> como valores iniciales y almacenar en <code>data</code> los valores actuales del componente. De esta forma se proporciona una forma de indicar valores al componente (<em>a través de props</em>) y luego que sean modificables al usar el componente.</p>
<blockquote>
<p>Habrás observado que cuando definimos nombres (<em>en <code>data</code>, <code>props</code> y <code>computed</code></em>), dichos nombres no se pueden solapar. <strong>Vue</strong> te obliga a utilizar un buen nombrado de variables en sus propiedades donde, por ejemplo, una <code>prop</code> y una variable en <code>data</code> no se deben llamar igual.</p>
</blockquote>
<h3 id="los-métodos-methods" tabindex="-1"><a class="header-anchor" href="#los-métodos-methods">Los métodos (methods)</a></h3>
<p>El apartado <code>methods</code> de las opciones permite añadir funciones en el componente. Al igual que en <code>data</code> guardamos variables de Vue, podemos tener funciones de Vue en <code>methods</code>. Dichas funciones pueden ser utilizadas desde las templates o desde la parte de los scripts, ejecutándolas y obteniendo la información que devuelven.</p>
<p>En el siguiente ejemplo se observa como creamos un <code>&lt;button&gt;</code> que ejecuta la función <code>decLife()</code>, definida en la opción <code>methods</code>. Para preparar el click estamos usando <code>@click</code>, que no es más que el uso de la directiva <code>v-on</code>, la cuál veremos unos capítulos más adelante:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Nick: {{ nickname }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Life: {{ life }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decLife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Decrement Life<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">"Manz"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">exp</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">99</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">role</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exp <span class="token operator">></span> <span class="token number">12</span> <span class="token operator">?</span> <span class="token string">"Expert"</span>
        <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exp <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">?</span> <span class="token string">"Senior"</span>
        <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exp <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">?</span> <span class="token string">"Middle"</span>
        <span class="token operator">:</span> <span class="token string">"Junior"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">decLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>life<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Las funciones también podrían ser ejecutadas desde un template con un <code>{{ decLife() }}</code> o desde Javascript, de la forma normal que ejecutamos funciones, siempre teniendo en cuenta que desde Javascript hay que hacerlo de la siguiente forma: <code>this.decLife()</code>.</p>
<blockquote>
<p>Es importante destacar que las <strong>propiedades se actualizan automáticamente</strong> como se puede ver de forma muy clara en este ejemplo. La variable <code>life</code> de Vue está modificando su valor al pulsar en el botón que ejecuta el método <code>decLife()</code>, por lo que Vue detecta los cambios con su sistema de <strong>reactividad</strong> y actualiza todas las partes que dependen de esta variable.</p>
</blockquote>
<h3 id="los-observadores-watch" tabindex="-1"><a class="header-anchor" href="#los-observadores-watch">Los observadores (watch)</a></h3>
<p>Las <strong>funciones watch</strong> son un mecanismo de vigilancia un poco más avanzado de las <strong>propiedades computadas</strong> (<em>las cuales suelen ser más que suficiente para la mayoría de los casos</em>). A grandes rasgos, los <strong>watchers</strong> son funciones que colocamos en la propiedad <code>watch</code> y que contendrán funciones que deben coincidir con el nombre de la variable de Vue a vigilar. Si Vue detecta que dicha variable cambia, ejecutará automáticamente la función <strong>watch</strong> de su mismo nombre.</p>
<p>Estos watchers sólo deben usarse cuando las <strong>propiedades calculadas</strong> se nos quedan cortas, que suele ser en situaciones en las que necesitamos asincronía o se trata de operaciones muy costosas para cambiar datos.</p>
<p>Hay varias formas de definir un watch:</p>
<ul>
<li>Como una <badge-type class="function"></badge-type> con el mismo nombre de la variable a vigilar.</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">"Manz"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">99</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">life</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> old</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Valor actual: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>current<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Valor anterior: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>old<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>Como un <badge-type class="string"></badge-type> con el nombre del método a ejecutar.</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">"Manz"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">99</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">changeLife</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Se ha detectado cambio de life: "</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token string">"changeLife"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>Como un <badge-type class="object"></badge-type> con una función <code>handler()</code> con el parámetro <code>deep</code> o <code>immediate</code>, según interese.</li>
</ul>
<table>
<thead>
<tr>
<th>Parámetro</th>
<th>Por defecto</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>deep</code></td>
<td><strong>false</strong></td>
<td>La función <code>handler()</code> es ejecutada independientemente de la profundidad del cambio.</td>
</tr>
<tr>
<td><code>immediate</code></td>
<td><strong>false</strong></td>
<td>La función <code>handler()</code> es ejecutada inmediatamente después de crearla.</td>
</tr>
</tbody>
</table>
<pre class="language-js "><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">"Manz"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">99</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> old</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Valor actual: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>current<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Valor anterior: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>old<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>Como un <badge-type class="array"></badge-type> con varios de los casos anteriores (<em>se ejecutarán todos</em>).</li>
</ul>
<h3 id="los-emisores-emits" tabindex="-1"><a class="header-anchor" href="#los-emisores-emits">Los emisores (emits)</a></h3>
<p>Como novedad, en <strong>Vue 3</strong> se añade la propiedad <code>emits</code>, la cuál permite indicar una lista de <a href="../../../webcomponents/comunicacion/custom-events-webcomponents/index.htm">eventos personalizados</a> que pueden ser emitidos desde el componente mediante la sintaxis <code>this.$emit(&quot;name&quot;, value)</code>.</p>
<p>Estos eventos personalizados pueden definirse de dos formas diferentes:</p>
<ul>
<li><strong>Modalidad básica</strong>: Un <badge-type class="array"></badge-type> de <badge-type class="string"></badge-type> donde simplemente se indican los nombres de los eventos.</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"select"</span><span class="token punctuation">,</span> <span class="token string">"send"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li><strong>Modalidad avanzada</strong>: Un <badge-type class="object"></badge-type> que incluye el nombre de los eventos personalizados y una función de validación.</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">select</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                       <span class="token comment">/* Sin validación */</span>
    <span class="token function-variable function">send</span><span class="token operator">:</span> <span class="token parameter">data</span> <span class="token operator">=></span> data<span class="token punctuation">.</span>error <span class="token operator">===</span> <span class="token boolean">false</span>  <span class="token comment">/* Con validación de parámetros del $emit */</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Existen otras opciones secundarias en el <strong>Options API</strong> de Vue, sin embargo, <code>props</code>, <code>data</code>, <code>computed</code>, <code>methods</code>, <code>watch</code> y <code>emits</code> son los principales.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../archivos-vue/index.htm" title="¿Qué son los archivos .vue?">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>¿Qué son los archivos .vue?</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../ciclo-vida/index.htm" title="Ciclo de vida (Lifecycle hooks)">
  <div>
    <span>Ciclo de vida (Lifecycle hooks)</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../../javascript/index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
