<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>CSS en LitElement - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="En este artículo aprenderás las diferentes formas de gestionar estilos CSS en un componente Lit basado en LitElement, junto a ayudantes como classMap o styleMap.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="CSS en LitElement - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/webcomponents/lit/css-en-litelement/lit-element-css-classmap-stylemap.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="En este artículo aprenderás las diferentes formas de gestionar estilos CSS en un componente Lit basado en LitElement, junto a ayudantes como classMap o styleMap.">
  <meta property="og:url" content="https://lenguajejs.com/webcomponents/lit/css-en-litelement/">
  <meta property="twitter:url" content="https://lenguajejs.com/webcomponents/lit/css-en-litelement/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="CSS en LitElement - Javascript en español">
  <meta property="twitter:description" content="En este artículo aprenderás las diferentes formas de gestionar estilos CSS en un componente Lit basado en LitElement, junto a ayudantes como classMap o styleMap.">
  <meta property="twitter:image" content="https://lenguajejs.com/webcomponents/lit/css-en-litelement/lit-element-css-classmap-stylemap.png">

  </head>

<body class="js menu-open " style="--logo-color: #d4ecff"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (webcomponents)" href="../../index.htm" style="--image: url('../../../assets/webcomponents.jpg')"></a>

    <header>
      <a href="../../comunicacion/custom-events-webcomponents/index.htm" title="Custom Events en componentes">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../atomico/introduccion-a-atomico/index.htm" title="Introducción: ¿Qué es Atomico?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Lit &amp; LitElement
      </span>
            <a class="link" href="../lit-html/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Plantillas lit-html
            </a>
            <a class="link" href="../componentes/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Componentes con LitElement
            </a>
            <a class="link" href="../propiedades-y-atributos/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Propiedades y atributos
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              CSS en LitElement
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/webcomponents.jpg')">
    <h1><a href="index.htm">CSS en LitElement</a></h1></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../propiedades-y-atributos/index.htm">Propiedades y atributos</a>
    <a class="current" href="index.htm">CSS en LitElement</a>
    <a href="../../atomico/introduccion-a-atomico/index.htm">Introducción: ¿Qué es Atomico?</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Ya hablamos de <a href="../../shadow-dom/css-webcomponents/index.htm">CSS en WebComponents</a>, donde tratamos formas de manejar estilos en componentes nativos, utilizando estrategias conocidas como estilos en línea, hojas de estilo externas o variables css, junto a nuevos estándares como <strong>CSS Scoping</strong> o <strong>CSS Parts</strong>.</p>
<p><img src="lit-element-css-classmap-stylemap.png" alt="LitElement: CSS estático, CSS dinámico, classMap y styleMap" width="1024" height="425" loading="lazy"></p>
<p>Muchas de estas formas, al ser nativas, se pueden aplicar en <strong>Lit</strong>, pero en este apartado nos interesará más conocer la estrategia habitual que se suele seguir en componentes basados en <strong>LitElement</strong> para gestionar y mantener estilos CSS, y es eso en lo que vamos a centrarnos.</p>
<h3 id="estilos-css-estáticos" tabindex="-1"><a class="header-anchor" href="#estilos-css-estáticos">Estilos CSS estáticos</a></h3>
<p>Por norma general, en <strong>Lit</strong> nos vamos a encontrar una forma de definir estilos CSS de forma <strong>estática</strong>, es decir, se van a aplicar a todas las instancias del mismo componente. Más adelante veremos un caso diferente, en el que podríamos querer tener diferentes estilos para una instancia concreta del componente.</p>
<p>En nuestro primer ejemplo, cada elemento <code>&lt;app-element&gt;</code> tendrá estos estilos CSS estáticos, ya que el navegador se encargará de recogerlos <strong>una sola vez</strong> y aplicarlo a todos los componentes del mismo tipo, siendo así bastante eficiente. Esta es la forma más habitual de definirlos, y se implementan mediante un getter estático <code>styles()</code>, haciendo uso de la función ayudante <code>css</code>:</p>
<pre class="language-html demo"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> LitElement<span class="token punctuation">,</span> html<span class="token punctuation">,</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/lit?module'</span><span class="token punctuation">;</span>

  customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> LitElement <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
        div {
          background: hotpink;
          color: white;
        }
      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>Un elemento con estilo.&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Al igual que el método <code>render()</code> espera que devuelvas una plantilla HTML generada con la función <code>html</code> de <a href="../lit-html/index.htm">lit-html</a>, el getter <code>styles()</code> espera que devuelvas una plantilla de CSS generada con <code>css</code>.</p>
<p>Sin embargo, si por alguna razón necesitaramos organizarnos creando varias plantillas de CSS, para finalmente mezclarlas en una, podríamos devolver un <badge-type class="array"></badge-type> que contenga varias plantillas de CSS. <strong>Lit</strong> las fusionará correctamente, aplicando lo que se suele denominar <strong>composición</strong>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>
    css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">div { background: hotpink }</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">div { color: white }</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>También podríamos heredar los estilos estáticos de un componente padre con <code>super.styles()</code>, si extendieramos de otro componente padre que tiene un getter de <code>styles()</code> estáticos, mezclándolos con los estilos del componente hijo.</p>
<p>Incluso, podríamos crear constantes fuera de la clase del componente con plantillas CSS, o importarlas utilizando <a href="../../../javascript/modulos/que-es-esm/index.htm">ESM</a> desde otro fichero:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Exportando plantilla de CSS (en otro fichero diferente)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> buttonStyles <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">button { /* ... */ }</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token comment">// Importando plantillas CSS para utilizarlas</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> buttonStyles<span class="token punctuation">,</span> purpleTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./AppElement.js"</span><span class="token punctuation">;</span></code></pre>
<p>Posteriormente, podríamos importarlas y utilizarlas dentro de nuestro componente, o mezclarlas con estilos ya existentes a través del mencionado <badge-type class="array"></badge-type>, que nos permite utilizar composición sobre estilos CSS.</p>
<h3 id="estilos-css-dinámicos" tabindex="-1"><a class="header-anchor" href="#estilos-css-dinámicos">Estilos CSS dinámicos</a></h3>
<p>Hasta ahora hemos visto «estilos CSS estáticos», la forma preferida de añadir CSS en componentes <strong>Lit</strong> basados en <strong>LitElement</strong>, ya que se aplican a todas las instancias de ese mismo componente, y los estilos <strong>son evaluados una única vez</strong>, siendo reutilizados en todos los componentes del mismo tipo. Esto hace que sea muy eficiente su procesamiento.</p>
<p>Sin embargo, nos podría interesar añadir estilos específicos que dependan de la lógica Javascript de una instancia particular, porque por ejemplo, dependen de variables de clase. Estaríamos hablando de lo que se denomina <strong>estilos CSS dinámicos</strong>.</p>
<p>Para hacer estos cambios dinámicos, que varían en cada <strong>instancia</strong>, se recomienda:</p>
<ul>
<li>Utilizar <a href="https://lenguajecss.com/css/introduccion/css-custom-properties/">CSS Custom Properties</a> (<em>preferida</em>), ya que incluso puede atravesar <strong>Shadow DOM</strong>.</li>
<li>Utilizar una etiqueta <code>&lt;style&gt;</code> en la plantilla HTML, con los cambios CSS específicos.</li>
<li>Utilizar un fichero CSS externo, mediante la etiqueta <code>&lt;link&gt;</code>.</li>
</ul>
<p>Veamos un ejemplo de lo que, probablemente, sería lo <strong>más intuitivo</strong> cuando queremos colocar lógica dinámica en un componente. Ten en cuenta que en este ejemplo tenemos dos instancias de componente, una normal y otra con una clase <code>rainbow</code>:</p>
<pre class="language-html demo"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rainbow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> LitElement<span class="token punctuation">,</span> html<span class="token punctuation">,</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/lit?module'</span><span class="token punctuation">;</span>

  customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> LitElement <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
        div {
          color: white;
        }
      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>bgcolor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"rainbow"</span><span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token string">"linear-gradient(to right, red, yellow, green, blue, purple)"</span>
        <span class="token operator">:</span> <span class="token string">"grey"</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
        &lt;style>
          div {
            background: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>bgcolor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;
          }
        &lt;/style>
        &lt;div>Un elemento con estilo.&lt;/div>
      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>En el <code>render()</code>, antes de devolver la plantilla, realizamos una <strong>condición</strong> con un <strong>operador ternario</strong> que comprueba si el componente tiene la clase <code>rainbow</code>, y de ser así, modifica la variable de clase que contiene el color de fondo. Esta variable se aplica en un elemento <code>&lt;style&gt;</code> en el marcado HTML, ya que al ser dinámico no se puede aplicar en el CSS estático por componente.</p>
<p>Sin embargo, esta forma de trabajar puede acarrear <strong>problemas de performance</strong> o incluso de <strong>seguridad</strong> (<em>como veremos más adelante</em>), por lo que ideal sería siempre intentar realizarlo de una forma estática si es posible.</p>
<p>En el siguiente ejemplo hacemos lo mismo que en el anterior, pero de una forma <strong>estática</strong>:</p>
<pre class="language-html demo"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rainbow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> LitElement<span class="token punctuation">,</span> html<span class="token punctuation">,</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/lit-element?module'</span><span class="token punctuation">;</span>

  customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> LitElement <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
        :host(.rainbow) {
          --app-bgcolor: linear-gradient(to right, red, yellow, green, blue, purple);
        }
        div {
          background: var(--app-bgcolor, grey);
          color: white;
        }
      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>Un elemento con estilo.&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>En este caso, estamos usando <a href="../../shadow-dom/css-webcomponents/index.htm#css-scoping-componentes">CSS Scoping</a> para aplicar estilos al componente dependiendo de la clase que tenga. Utilizamos <a href="https://lenguajecss.com/css/introduccion/css-custom-properties/">variables CSS</a> para propagar los estilos en el componente (<em>podríamos hacerlo incluso desde fuera del componente</em>).</p>
<blockquote>
<p>Recuerda que incluso podrías utilizar <a href="https://lenguajecss.com/css/introduccion/css-custom-properties/#variables-css-desde-javascript">Javascript para modificar variables CSS</a> si lo necesitas, utilizando, por ejemplo, el método <code>.style.setProperty()</code>.</p>
</blockquote>
<h3 id="problemas-en-estilos-dinámicos" tabindex="-1"><a class="header-anchor" href="#problemas-en-estilos-dinámicos">Problemas en estilos dinámicos</a></h3>
<p>El problema principal que tenemos al declarar <strong>estilos dinámicos</strong> en nuestros componentes, es que perdemos la eficiencia de los estilos estáticos, que se evaluan al crear el componente y no se tienen que volver a evaluar al crear nuevas instancias de componentes.</p>
<p>Sin embargo, muchas veces no es posible utilizar <strong>estilos estáticos</strong>, por lo que se suele optar por inyectar directamente propiedades Javascript en el código, lo que se considera en <strong>Lit</strong> un <strong>antipatrón</strong> (<em>mala práctica que se debe evitar</em>):</p>
<pre class="language-js "><code class="language-js"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;style>
      .element { background: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>bgcolor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; }
    &lt;/style>
    &lt;div class="element">Element&lt;/div>
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Lo recomendable es seguir una serie de pautas:</p>
<p>En primer lugar, crea las <strong>plantillas HTML prerenderizadas</strong> con la función de ayuda <code>html</code>. Intenta que dichas plantillas contengan la etiqueta <code>&lt;style&gt;</code> con los estilos a aplicar en cada caso:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> rainbowStyles <span class="token operator">=</span> html<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
&lt;style>
  .element {
    background: linear-gradient(to right, red, yellow, green, blue, purple);
  }
&lt;/style>
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> defaultStyles <span class="token operator">=</span> html<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
&lt;style>
  .element { background: grey; }
&lt;/style>
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Luego, puedes utilizar una variable de clase para indicar los <strong>estilos específicos</strong> que va a utilizar la instancia del componente, añadiéndola por separado de los estilos que utilizarás en el componente:</p>
<pre class="language-js "><code class="language-js">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>specificss <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"rainbow"</span><span class="token punctuation">)</span>
      <span class="token operator">?</span> rainbowStyles
      <span class="token operator">:</span> defaultStyles<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;style>
        .element {
          color: white;
        }
      &lt;/style>
      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>specificss<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
      &lt;div class="element">Element&lt;/div>
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>Esto permitirá a <strong>Lit</strong> (<em>si su propiedad es reactiva y cambia</em>), no vuelva a renderizar todo el etiquetado HTML, realizando mucho trabajo extra, sino que sólo actualice lo que ha cambiado y es necesario. No obstante, recuerda que siempre es preferible encontrar un enfoque estático para los estilos y/o utilizar <strong>css custom properties</strong>.</p>
<h3 id="ayudante-classmap" tabindex="-1"><a class="header-anchor" href="#ayudante-classmap">Ayudante <code>classMap</code></a></h3>
<p>Una forma que quizás nos puede resultar más interesante a los que estamos acostumbrados a trabajar con <strong>clases CSS</strong>, es la que nos proporciona el ayudante <code>classMap</code> de <strong>lit-html</strong>, la librería hermana menor de <strong>LitElement</strong>, incluída en <strong>Lit</strong>.</p>
<p>Este ayudante, nos permite gestionar los estilos de un elemento por medio de las <strong>clases</strong> que tiene en el HTML, permitiéndonos gestionarlo también por medio de un objeto Javascript y sus valores. Para utilizarlo, hagamos lo siguiente:</p>
<ul>
<li>Importamos el ayudante <code>classMap</code> de la librería <code>lit-html</code>.</li>
<li>Definimos en <code>styles()</code> las clases CSS con sus estilos correspondientes.</li>
<li>Creamos un objeto en el <code>constructor()</code>, donde cada clave es el nombre de la clase.</li>
<li>Si una de esas claves está a <code>true</code>, la clase se incluirá. Si está a <code>false</code> no lo hará.</li>
</ul>
<pre class="language-html demo"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rainbow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> LitElement<span class="token punctuation">,</span> html<span class="token punctuation">,</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/lit?module"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> classMap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/lit/directives/class-map?module"</span>

  customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> LitElement <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rainbow</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"rainbow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">hollow</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">hover</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
        .rainbow {
          background: linear-gradient(to right, red, yellow, green, blue, purple);
        }
        .hollow {
          background: transparent;
          color: purple;
        }
        .hover {
          background: orangered;
          color: white;
        }
        div {
          background: grey;
          color: white;
          padding: 5px;
        }
      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">classMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>classes<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">>
        Un elemento con estilo.
      &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Por último, no te olvides de incluir la referencia al ayudante <code>classMap()</code> en la clase del elemento que necesitas. Por parámetro le indicaremos el objeto que contiene las claves con las clases a añadir. Todo esto hará muy sencillo gestionar <code>this.classes</code> para añadir o eliminar las clases CSS que queramos aplicar.</p>
<blockquote>
<blockquote>
<blockquote>
<p>Ten en cuenta que <code>classMap</code> no hace los cambios de forma reactiva. Si queremos renderizar los cambios, debemos hacer un render manual con <code>this.render()</code>.</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="ayudante-stylemap" tabindex="-1"><a class="header-anchor" href="#ayudante-stylemap">Ayudante <code>styleMap</code></a></h3>
<p>De la misma forma que tenemos el ayudante <code>classMap</code> para gestionar clases CSS de un elemento con un objeto Javascript, tenemos el ayudante <code>styleMap</code>, que no es más que el equivalente para gestionar los <strong>estilos en línea</strong> de un elemento.</p>
<p>En este caso, hacemos lo siguiente:</p>
<ul>
<li>Importamos el ayudante <code>styleMap</code> de la librería <code>lit-html</code>.</li>
<li>Creamos en el <code>constructor()</code> un objeto <code>this.styles</code>, donde cada clave es una propiedad CSS.</li>
<li>Los valores de cada clave, serán los valores aplicados al elemento.</li>
</ul>
<pre class="language-html demo"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rainbow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> LitElement<span class="token punctuation">,</span> html<span class="token punctuation">,</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/lit?module"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> styleMap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/lit/directives/style-map?module"</span>

  customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> LitElement <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>styles <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"rainbow"</span><span class="token punctuation">)</span>
          <span class="token operator">?</span> <span class="token string">"linear-gradient(to right, red, yellow, green, blue, purple)"</span>
          <span class="token operator">:</span> <span class="token string">"grey"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">"5px"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token string">"4px solid black"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">fontFamily</span><span class="token operator">:</span> <span class="token string">"Scope One"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
        div {
          background: grey;
          color: white;
          padding: 5px;
        }
      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div style=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">styleMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>styles<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">>
        Un elemento con estilo.
      &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Por último, y al igual que en el caso anterior, hay que aplicar al atributo <code>style</code> el ayudante <code>styleMap()</code>, pasándole por parámetro el nombre del objeto con los estilos, en este caso, <code>this.styles</code>.</p>
<blockquote>
<p>Ten en cuenta que, la nomenclatura en CSS suele ser <strong>kebab-case</strong> (<em><code>margin-top</code>, <code>font-family</code>, <code>flex-direction</code>...</em>), pero en Javascript esta nomenclatura no está permitida, por lo que sus equivalentes son en <strong>pascalCase</strong> (<em><code>marginTop</code>, <code>fontFamily</code>, <code>flexDirection</code>...</em>).</p>
</blockquote>
<h3 id="ayudante-unsafecss" tabindex="-1"><a class="header-anchor" href="#ayudante-unsafecss">Ayudante unsafeCSS</a></h3>
<p>En algunos casos, puede que hayas intentado interpolar una variable o constante en una plantilla de CSS directamente, algo parecido a lo siguiente, siendo <code>color</code> una constante fuera de la clase:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    div {
      background: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;
      color: white;
      padding: 5px;
    }
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Al hacerlo es posible que obtengas el siguiente error:</p>
<blockquote>
<blockquote>
<blockquote>
<p>Uncaught Error: Value passed to 'css' function must be a 'css' function result: undefined. Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.</p>
</blockquote>
</blockquote>
</blockquote>
<p>En <strong>Lit</strong> se intenta promover esta forma de trabajar, puesto que si las variables o constantes tienen información que proviene del usuario, podrían tener código malicioso o ser vectores de problemas de <strong>privacidad</strong> o <strong>seguridad</strong>. Por ejemplo, un usuario malintencionado podría insertar un código CSS que cargue una imagen de un servidor de terceros.</p>
<p>Teniendo esto en cuenta, es posible utilizar la función <code>unsafeCSS</code>, importándola de <code>Lit</code> y aplicándola a las variables o constantes en cuestión:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> unsafeCSS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/lit?module"</span><span class="token punctuation">;</span>

<span class="token comment">/* ... */</span>

<span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    div {
      background: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">unsafeCSS</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;
      color: white;
      padding: 5px;
    }
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Eso sí, recuerda siempre que esto podría ser un posible foco de problemas de seguridad, y habría que asegurar siempre que el código CSS a insertar en la función <code>unsafeCSS</code> es seguro y no proviene del usuario.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../propiedades-y-atributos/index.htm" title="Propiedades y atributos">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Propiedades y atributos</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../../atomico/introduccion-a-atomico/index.htm" title="Introducción: ¿Qué es Atomico?">
  <div>
    <span>Introducción: ¿Qué es Atomico?</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../../javascript/index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
