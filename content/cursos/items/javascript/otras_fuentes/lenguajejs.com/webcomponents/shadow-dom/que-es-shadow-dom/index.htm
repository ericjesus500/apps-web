<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>¿Qué es el Shadow DOM? - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="¿Quieres entender el concepto de Shadow DOM de una forma sencilla y práctica? Su objetivo principal es encapsular CSS o Javascript. ¡Entra y te lo explico!">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="¿Qué es el Shadow DOM? - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/webcomponents/shadow-dom/que-es-shadow-dom/shadow-dom-gandalf-balrog.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="¿Quieres entender el concepto de Shadow DOM de una forma sencilla y práctica? Su objetivo principal es encapsular CSS o Javascript. ¡Entra y te lo explico!">
  <meta property="og:url" content="https://lenguajejs.com/webcomponents/shadow-dom/que-es-shadow-dom/">
  <meta property="twitter:url" content="https://lenguajejs.com/webcomponents/shadow-dom/que-es-shadow-dom/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="¿Qué es el Shadow DOM? - Javascript en español">
  <meta property="twitter:description" content="¿Quieres entender el concepto de Shadow DOM de una forma sencilla y práctica? Su objetivo principal es encapsular CSS o Javascript. ¡Entra y te lo explico!">
  <meta property="twitter:image" content="https://lenguajejs.com/webcomponents/shadow-dom/que-es-shadow-dom/shadow-dom-gandalf-balrog.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #d4ecff"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (webcomponents)" href="../../index.htm" style="--image: url('../../../assets/webcomponents.jpg')"></a>

    <header>
      <a href="../../funcionalidad/clase-webcomponent/index.htm" title="Clase de un WebComponent">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../comunicacion/custom-events-webcomponents/index.htm" title="Custom Events en componentes">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Shadow DOM (Encapsulación)
      </span>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es el Shadow DOM?
            </a>
            <a class="link" href="../light-dom-shadow-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es el Light DOM?
            </a>
            <a class="link" href="../slots/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Slots en WebComponents
            </a>
            <a class="link" href="../shadow-dom-declarativo/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Shadow DOM declarativo
            </a>
            <a class="link" href="../css-webcomponents/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              CSS en WebComponents
            </a>
            <a class="link" href="../css-scoping/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              CSS Scoping en Shadow DOM
            </a>
            <a class="link" href="../css-parts/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Variables CSS y CSS Parts
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/webcomponents.jpg')">
    <h1><a href="index.htm">¿Qué es el Shadow DOM?</a></h1><h2 class="typewriter">Encapsulación nativa de CSS y Javascript</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../../funcionalidad/registro-de-custom-elements/index.htm">Registro de Custom Elements</a>
    <a class="current" href="index.htm">¿Qué es el Shadow DOM?</a>
    <a href="../light-dom-shadow-dom/index.htm">¿Qué es el Light DOM?</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Sin duda, uno de los conceptos más interesantes de <strong>WebComponents</strong> (<em>y también de los más complejos</em>) es el <strong>Shadow DOM</strong> (<em>DOM en la sombra</em>). Para comprenderlo bien, primero debemos tener claro que el <a href="../../../javascript/dom/que-es/index.htm">DOM</a> es la estructura de elementos que tiene una página, estructurada en forma de árbol, donde se puede ver facilmente los descendientes (<em>hijos</em>) o contenedores (<em>padres</em>) de un elemento.</p>
<p>El navegador, al cargar una página, genera esta estructura en forma de árbol, a la que generalmente llamamos <strong>DOM</strong>. Cada vez que ocurre un cambio en los elementos de una página, el navegador actualiza esta estructura para reflejarlos.</p>
<p>► <a href="../../../javascript/dom/que-es/index.htm">Aprender más sobre el DOM</a></p>
<h3 id="qué-es-el-shadow-dom" tabindex="-1"><a class="header-anchor" href="#qué-es-el-shadow-dom">¿Qué es el Shadow DOM?</a></h3>
<p>El concepto de <strong>Shadow DOM</strong> nace de la necesidad de tener una forma de encapsular elementos y mantenerlos aislados del resto de la página, creando algo así como un <strong>concepto local</strong>, en contraposición al <strong>concepto global</strong> con el que se solía trabajar en los navegadores.</p>
<p>Quizás, la forma más fácil de entender el concepto de <strong>Shadow DOM</strong>, es haciendo una analogía precisamente a lo que su propio nombre indica: una sombra de un elemento.</p>
<p><img src="shadow-dom.png" alt="Shadow DOM" width="1024" height="375" loading="lazy"></p>
<p>Imaginemos que tenemos un árbol DOM del documento de la página en la que nos encontramos. Uno de esos nodos del árbol (<em>destacado en azul</em>) tiene un <strong>Shadow DOM</strong> (<em>una sombra</em>) en la cuál puede residir otro árbol DOM, que realmente no forma parte del DOM principal de la página.</p>
<p>Como veremos más adelante, entre otras cosas, esta característica nos permitiría algo muy interesante con CSS: <strong>aislar los estilos</strong> de modo que no afecten a los elementos que están fuera del Shadow DOM, ni tampoco el CSS de fuera afecte a los elementos del Shadow DOM.</p>
<blockquote>
<p><strong>Nota</strong>: Aunque se suele asociar a WebComponents, realmente el <strong>Shadow DOM</strong> es una característica independiente que se puede aplicar a un elemento HTML normal, sin necesidad de que sea un componente.</p>
</blockquote>
<h3 id="qué-es-el-virtual-dom" tabindex="-1"><a class="header-anchor" href="#qué-es-el-virtual-dom">¿Qué es el Virtual DOM?</a></h3>
<p>Aunque tiene cierta relación, el concepto de <strong>virtual DOM</strong> (<em>o VDOM</em>) no es una alternativa directa de <strong>Shadow DOM</strong>, pero muchas veces se suelen asociar, ya que debido a sus nombres se suele intuir que son cosas similares o alternativas.</p>
<p>Durante la aparición de los diferentes <strong>frameworks</strong> del ecosistema Javascript, estos idearon un concepto denominado <strong>Virtual DOM</strong>: una copia en memoria del DOM de la página, donde se gestionarían directamente los cambios del mismo, para traducirlos posteriormente al <strong>DOM</strong> real del documento, con el objetivo de acelerar y optimizar los cambios del DOM en la página.</p>
<p>Por ejemplo, la popular librería <strong>React</strong> introducía el concepto de <strong>Virtual DOM</strong> para detectar los cambios (<em>diferencias entre árboles</em>), actualizar los nodos afectados (<em>cambios y descendientes a quienes pueden afectar</em>) y posteriormente, actualizarlos en el <strong>DOM</strong> real, consiguiendo dos cosas principales: <strong>velocidad</strong> y abstraer de estos cambios para hacerlos de forma automática y menos tediosa:</p>
<p><img src="virtual-dom.png" alt="Virtual DOM" width="1024" height="425" loading="lazy"></p>
<p>El surgimiento del concepto de <strong>Virtual DOM</strong> y su definición, ayudó a promover el falso concepto «<strong>el DOM es lento</strong>», cuando en realidad, lo que puede hacerlo lento es la gestión que hagas (<em>y cómo la hagas</em>) del mismo.</p>
<blockquote>
<p>Hay que tener en cuenta también que <strong>Shadow DOM</strong> es una tecnología existente en los navegadores, mientras que <strong>Virtual DOM</strong> es un proceso que se implementa y ocurre «fuera» del navegador, en las librerías de Javascript.</p>
</blockquote>
<h3 id="cómo-crear-un-shadow-dom" tabindex="-1"><a class="header-anchor" href="#cómo-crear-un-shadow-dom">¿Cómo crear un Shadow DOM?</a></h3>
<p>Por defecto, los elementos HTML no tienen <strong>Shadow DOM</strong>. Pero si queremos crear uno y adjuntarlo a un elemento HTML, no tenemos más que utilizar el método <code>.attachShadow()</code> sobre el elemento donde queramos crear el <strong>Shadow DOM</strong>.</p>
<table>
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="shadowroot"></badge-type> <code>element.attachShadow(</code><badge-type class="object"></badge-type><code>options)</code></td>
<td>Crea y adjunta un <strong>Shadow DOM</strong> en un elemento.</td>
</tr>
</tbody>
</table>
<p>En breve explicaremos el parámetro obligatorio <code>options</code> y algunas características más, sin embargo para empezar, con este método podríamos crear un <strong>Shadow DOM</strong> utilizando el siguiente fragmento de código:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shadow <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"open"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>En la primera línea creamos un elemento <code>&lt;div&gt;</code> desde Javascript. También podríamos seleccionar un elemento existente mediante <code>.querySelector()</code>. En este elemento es donde vamos a crear un DOM particular llamado <strong>Shadow DOM</strong>.</p>
<p>Así pues, en la segunda línea, creamos un <strong>Shadow DOM</strong> en dicho <code>&lt;div&gt;</code>, estableciéndolo en <strong>modo abierto</strong> (<em>habitualmente, el más utilizado</em>). En la constante <code>shadow</code> se guarda una al <badge-type class="shadowroot"></badge-type> generado, que no es más que el nodo raíz (<em>primer elemento</em>) de ese nuevo DOM particular.</p>
<blockquote>
<p><strong>Nota</strong>: No puedes adjuntar un <badge-type class="shadowroot"></badge-type> en cualquier tipo de elemento HTML. Sólo está permitido en <strong>componentes</strong> (<em>custom elements</em>), cabeceras (<em>h1, h2, h3, h4, h5 y h6</em>), etiquetas semánticas (<em>article, aside, footer, header, main, nav o section</em>), contenedores (<em>div, span, blockquote, p</em>) o en la propia etiqueta <code>&lt;body&gt;</code>.</p>
</blockquote>
<h4 id="opciones-del-shadow-dom" tabindex="-1"><a class="header-anchor" href="#opciones-del-shadow-dom">Opciones del Shadow DOM</a></h4>
<p>El parámetro <code>options</code> del método <code>.attachShadow()</code> define las características de creación que tendrá el <strong>Shadow DOM</strong> generado. Veamos que opciones tiene para indicar:</p>
<table>
<thead>
<tr>
<th>Opción</th>
<th>Valores posibles</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="string"></badge-type> <code>mode</code></td>
<td><code>&quot;open&quot;</code> | <code>&quot;closed&quot;</code></td>
<td>Indica el modo de encapsulación del Shadow DOM. <strong>Obligatorio</strong>.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>delegatesFocus</code></td>
<td><code>true</code> | <strong>false</strong></td>
<td>Indica si el Shadow DOM debería obtener el foco.</td>
</tr>
</tbody>
</table>
<p>La opción <code>mode</code> define el <strong>modo de encapsulación</strong> que queremos que tenga el <strong>Shadow DOM</strong>.</p>
<h5>Modo abierto</h5>
<p>En el caso de que indiquemos <strong>modo abierto</strong> (<em>open</em>), el elemento en el que creamos el Shadow DOM tendrá una propiedad <code>.shadowRoot</code> por la cuál se puede acceder al <badge-type class="shadowroot"></badge-type> del elemento, y a partir de ahí, al árbol DOM que contiene:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Encapsulamiento abierto</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shadow <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"open"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

div<span class="token punctuation">.</span>shadowRoot <span class="token operator">===</span> shadow<span class="token punctuation">;</span> <span class="token comment">// true (es el mismo elemento)</span></code></pre>
<h5>Modo cerrado</h5>
<p>En el caso de que indiquemos <strong>modo cerrado</strong> (<em>closed</em>), la propiedad <code>.shadowRoot</code> del elemento nos devolverá <badge-type class="null"></badge-type>, siendo imposible acceder al árbol DOM que contiene. Es recomendable evitar este modo siempre que se pueda, ya que hay muy pocos casos en los que puede ser necesario:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Encapsulamiento cerrado</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shadow <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"closed"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

div<span class="token punctuation">.</span>shadowRoot <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true (no se guarda la referencia)</span></code></pre>
<p>En cualquiera de los dos modos anteriores, <code>.attachShadow()</code> siempre devolvera <badge-type class="shadowroot"></badge-type>, una referencia al Shadow DOM para acceder a su árbol interno. Esto puede ser particularmente útil en el modo cerrado, ya que no hay otra forma de obtenerlo. Si no guardamos esa referencia, no podremos acceder.</p>
<p>Por último, <code>delegatesFocus</code> es una opción establecida a <code>false</code> por defecto, que indica si queremos que el propio <strong>Shadow DOM</strong> obtenga el foco o no. Esto puede ser particularmente útil cuando queremos dar estilo a través de la pseudoclase <code>:focus</code>.</p>
<h3 id="encapsulación-con-shadow-dom" tabindex="-1"><a class="header-anchor" href="#encapsulación-con-shadow-dom">Encapsulación con Shadow DOM</a></h3>
<p>Ahora que hemos entendido como funciona y como crear un <strong>Shadow DOM</strong> quizás no tengamos claro aún para que puede servirnos. La utilidad principal de <strong>Shadow DOM</strong> es la posibilidad de <strong>encapsular elementos</strong>, de modo que se encuentren aislados y no repercutan con otros elementos externos.</p>
<h4 id="encapsular-css-estilos-locales" tabindex="-1"><a class="header-anchor" href="#encapsular-css-estilos-locales">Encapsular CSS (Estilos locales)</a></h4>
<p>Probablemente, una de las aplicaciones más interesantes del <strong>Shadow DOM</strong> es la de conseguir estilos CSS locales a un componente. Debido a la naturaleza <strong>global</strong> tradicional de CSS, siempre hemos creado CSS para aplicar en <a href="https://lenguajecss.com/css/introduccion/cascada-css/">cascada</a> y que afecte a todos los elementos. <strong>Y esto está bien</strong>. Es una característica deseable de diseño que bien organizada puede ahorrarnos mucho trabajo.</p>
<p>Sin embargo, en algunos casos, podemos querer aplicar <strong>CSS de forma local</strong> (<em>como solemos estar más acostumbrados en el mundo de la programación</em>) y que los estilos solo afecten, por ejemplo, al componente donde nos encontramos. Esto permitiría simplificar muchísimo el CSS y haría mucho más sencillo trabajar con estilos en aplicaciones grandes, heredadas o con un gran número de desarrolladores en ella.</p>
<p>Aquí es donde entra <strong>Shadow DOM</strong>. Por defecto, CSS seguirá teniendo el comportamiento global que ha tenido siempre, permitiendo el uso de la cascada para dar estilos. Sin embargo, gracias a este encapsulamiento podemos aislar un fragmento del DOM y que el CSS dentro del Shadow DOM no afecte al del documento, ni que este CSS global, pueda pasar y aplicarse al del <strong>Shadow DOM</strong>:</p>
<p><img src="shadow-dom-gandalf-balrog.jpg" alt="Shadow DOM: Gandalf developer vs Balrog CSS" width="1013" height="555" loading="lazy"></p>
<p>Esto, llevado a código y aprovechando lo que ya sabemos de <strong>WebComponents</strong>, se puede realizar de la siguiente forma. Crearemos un componente con un <strong>Shadow DOM</strong> que en su interior contendrá una etiqueta <code>&lt;style&gt;</code> con <strong>estilos CSS locales</strong> al componente. Tener en cuenta los estilos dados al elemento <code>&lt;span&gt;</code>. Al estar aislado con un <strong>Shadow DOM</strong>, solo los <code>&lt;span&gt;</code> del DOM de este componente se verán afectados:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">AppElement</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"open"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token comment">/* html */</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;style>
        span {
          background: steelblue;
          padding: 5px;
          color: white;
        }
      &lt;/style>
      &lt;div>
        &lt;p>¡Vuelve a la sombra, &lt;span>CSS&lt;/span>! ¡NO... PUEDES... PASAR!&lt;/p>
      &lt;/div>
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> AppElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span></code></pre>
<p>Observa que la creación del <strong>Shadow DOM</strong> se suele hacer cuanto antes, en el constructor. Por otro lado, si queremos añadir elementos HTML en el nuevo <strong>Shadow DOM</strong> creado, tendremos que hacerlo con <code>this.shadowRoot.innerHTML</code> en lugar de <code>this.innerHTML</code>. Hablaremos de este detalle en el siguiente artículo.</p>
<p>Hay que tener claro que al resto de <code>&lt;span&gt;</code> definidos en la página HTML no se le aplicarán los estilos indicados en este componente. De la misma forma, tampoco el DOM de este componente le verá afectado por estilos definidos fuera del mismo, aunque sus selectores encajen.</p>
<blockquote>
<p><strong>Nota</strong>: En los frameworks de Javascript, una de las formas más extendidas de aislar estilos es utilizar <a href="https://github.com/css-modules/css-modules">CSS Modules</a>, una estrategia no nativa que cambia las clases de los elementos HTML por <strong>hashes autogenerados</strong> (<em>usándolos a modo de namespaces</em>) para evitar la cascada CSS y las colisiones en clases con el mismo nombre.</p>
</blockquote>
<h4 id="encapsular-javascript-js-local" tabindex="-1"><a class="header-anchor" href="#encapsular-javascript-js-local">Encapsular Javascript (JS local)</a></h4>
<p>De la misma forma que hemos visto en el apartado anterior, Javascript «sufre» la misma suerte de <strong>encapsulamiento</strong> que CSS. Imaginemos la siguiente situación, junto al código anterior:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>¡Hola a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>todos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span></code></pre>
<p>Ahora, en nuestro Javascript escribimos lo siguiente:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> spans <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Al ejecutar este código Javascript, si tenemos definido un componente con <strong>Shadow DOM</strong> como vimos en el apartado anterior, la constante <code>spans</code> contendrá un array con un sólo elemento, el <code>&lt;span&gt;todos&lt;/span&gt;</code> que tenemos en el <code>&lt;p&gt;</code> de nuestra página principal. Todos los <code>&lt;span&gt;CSS&lt;/span&gt;</code> del interior de los componentes no se obtendrán porque están <strong>aislados</strong> en un DOM particular, en un <strong>Shadow DOM</strong>.</p>
<p>Por el contrario, si nuestro componente no estuviera aislado con un <strong>Shadow DOM</strong> sino que sólo utiliza los <strong>custom elements sin Shadow DOM</strong> como vimos en los primeros temas, obtendríamos un array con 4 elementos: el <code>&lt;span&gt;todos&lt;/span&gt;</code> y los 3 <code>&lt;span&gt;CSS&lt;/span&gt;</code> que se encuentran en cada componente.</p>
<p>Sabiendo todo esto, podemos utilizar el <strong>encapsulamiento de CSS o Javascript</strong> a nuestro favor, y crear componentes (<em>o elementos individuales encapsulados</em>) dependiendo de nuestros objetivos, ya sea utilizar CSS/JS global o utilizar CSS/JS local.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../../funcionalidad/registro-de-custom-elements/index.htm" title="Registro de Custom Elements">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Registro de Custom Elements</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../light-dom-shadow-dom/index.htm" title="¿Qué es el Light DOM?">
  <div>
    <span>¿Qué es el Light DOM?</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../../javascript/index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
