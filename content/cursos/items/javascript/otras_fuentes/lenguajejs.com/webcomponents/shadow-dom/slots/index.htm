<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Slots en WebComponents - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Las etiquetas slot son un mecanismo muy sencillo de enviar contenido desde el Light DOM de un componente a su Shadow DOM.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Slots en WebComponents - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/webcomponents/shadow-dom/slots/slots-html-webcomponent.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Las etiquetas slot son un mecanismo muy sencillo de enviar contenido desde el Light DOM de un componente a su Shadow DOM.">
  <meta property="og:url" content="https://lenguajejs.com/webcomponents/shadow-dom/slots/">
  <meta property="twitter:url" content="https://lenguajejs.com/webcomponents/shadow-dom/slots/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Slots en WebComponents - Javascript en español">
  <meta property="twitter:description" content="Las etiquetas slot son un mecanismo muy sencillo de enviar contenido desde el Light DOM de un componente a su Shadow DOM.">
  <meta property="twitter:image" content="https://lenguajejs.com/webcomponents/shadow-dom/slots/slots-html-webcomponent.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #d4ecff"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (webcomponents)" href="../../index.htm" style="--image: url('../../../assets/webcomponents.jpg')"></a>

    <header>
      <a href="../../funcionalidad/clase-webcomponent/index.htm" title="Clase de un WebComponent">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../comunicacion/custom-events-webcomponents/index.htm" title="Custom Events en componentes">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Shadow DOM (Encapsulación)
      </span>
            <a class="link" href="../que-es-shadow-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es el Shadow DOM?
            </a>
            <a class="link" href="../light-dom-shadow-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es el Light DOM?
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Slots en WebComponents
            </a>
            <a class="link" href="../shadow-dom-declarativo/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Shadow DOM declarativo
            </a>
            <a class="link" href="../css-webcomponents/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              CSS en WebComponents
            </a>
            <a class="link" href="../css-scoping/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              CSS Scoping en Shadow DOM
            </a>
            <a class="link" href="../css-parts/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Variables CSS y CSS Parts
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/webcomponents.jpg')">
    <h1><a href="index.htm">Slots en WebComponents</a></h1><h2 class="typewriter">Contenido HTML desde el Light DOM al Shadow DOM</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../light-dom-shadow-dom/index.htm">¿Qué es el Light DOM?</a>
    <a class="current" href="index.htm">Slots en WebComponents</a>
    <a href="../shadow-dom-declarativo/index.htm">Shadow DOM declarativo</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Si conocemos como funciona el <a href="../que-es-shadow-dom/index.htm">Shadow DOM</a> y las diferencias con el <a href="../light-dom-shadow-dom/index.htm">Light DOM</a>, es muy probable que nos interese saber cuál es la finalidad del <strong>Light DOM</strong> en un componente con <strong>Shadow DOM</strong>.</p>
<h3 id="qué-es-un-slot" tabindex="-1"><a class="header-anchor" href="#qué-es-un-slot">¿Qué es un slot?</a></h3>
<p>En HTML5 aparece un nuevo concepto denominado <strong>slot</strong> o <strong>ranura</strong>. Estos <strong>slots</strong> son «accesos directos» que nos permiten enviar contenido HTML desde el <strong>Light DOM</strong> para reutilizarlo en el <strong>Shadow DOM</strong> del componente. Si tenemos claro el concepto de Shadow DOM y Light DOM, esto se puede ver fácilmente como un <strong>hueco</strong> o <strong>ranura</strong> en el Shadow DOM que deja ver el contenido que está «debajo» en el Light DOM:</p>
<p><img src="slots-dom.png" alt="WebComponents: Slots HTML" width="1024" height="375" loading="lazy"></p>
<blockquote>
<p>Para comunicar el <strong>Light DOM</strong> con el <strong>Shadow DOM</strong> debemos aprender a utilizar las etiquetas <code>&lt;slot&gt;</code>, que explicaremos a continuación. Recuerda que es <strong>obligatorio</strong> tener un <strong>Shadow DOM</strong> en el componente para poder utilizar slots. De lo contrario, no funcionarán.</p>
</blockquote>
<h4 id="slot-por-defecto" tabindex="-1"><a class="header-anchor" href="#slot-por-defecto">Slot por defecto</a></h4>
<p>La etiqueta <code>&lt;slot&gt;</code> se puede utilizar en el <strong>Shadow DOM</strong> de un componente, para determinar donde aparecerá el contenido del <strong>custom element</strong>. Si indicamos un contenido en el interior de la etiqueta <code>&lt;slot&gt;</code> se utilizará como contenido por defecto, en el caso de que el componente no tenga definido ningún contenido.</p>
<p>Observa el siguiente ejemplo, donde escribimos dos componentes <code>&lt;app-element&gt;</code>:</p>
<ol>
<li>Al primero, no se le define ningún contenido</li>
<li>Al segundo, se le pasa el contenido <code>&lt;span&gt;Manz&lt;/span&gt;</code></li>
</ol>
<p>El fragmento de código completo sería el siguiente:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">AppElement</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"open"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token comment">/* html */</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;div class="container">
        ¡Hola, usuario &lt;slot>desconocido&lt;/slot>!
      &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> AppElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Manz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span></code></pre>
<p>Observemos ahora la etiqueta <code>&lt;slot&gt;</code> definida en el <strong>Shadow DOM</strong> de nuestro componente, concretamente, en el método especial <code>connectedCallback()</code>. El navegador tendrá un acceso directo e insertará el contenido del <strong>Light DOM</strong> que hemos colocado en el interior de <code>&lt;app-element&gt;</code> en el <strong>slot</strong> (<em>reemplazando su contenido, si existiera</em>).</p>
<p>Para cada componente, el navegador nos mostrará lo siguiente:</p>
<ol>
<li>En el primer componente, mostrará el texto <code>¡Hola, usuario desconocido!</code>.</li>
<li>En el segundo componente, mostrará el texto <code>¡Hola, usuario Manz!</code>.</li>
</ol>
<h4 id="slots-nombrados" tabindex="-1"><a class="header-anchor" href="#slots-nombrados">Slots nombrados</a></h4>
<p>Pero es posible que, si nuestro componente es un poco más complejo, el <strong>slot</strong> se nos quede corto, ya que necesitaríamos varios slots por componente. Para ello tenemos los denominados <strong>slots nombrados</strong> o <strong>slots con nombre</strong>.</p>
<p>Si bien siguen la misma mecánica explicada anteriormente, veamos el siguiente ejemplo. Hemos ampliado el ejemplo, y el <strong>custom element</strong> ahora incluye 3 grupos de información: <strong>nombre</strong>, <strong>rol</strong> y <strong>descripción</strong>. Cada uno en su propia etiqueta HTML, con un atributo <code>slot</code> que le indicará el tipo de información que posee:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">AppElement</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"open"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token comment">/* html */</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;div class="card">
        &lt;slot name="name">&lt;/slot>
        &lt;slot name="description">&lt;/slot>
        &lt;slot name="role">&lt;/slot>
      &lt;/div>
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> AppElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Manz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Developer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I hate Internet Explorer.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span></code></pre>
<p>Por otro lado, dentro del componente creamos la estructura del marcado HTML incluyendo varios elementos <code>&lt;slot&gt;</code> con un atributo <code>name</code> que coincidirá con el atributo <code>slot</code> del <strong>custom element</strong>. El navegador reemplazará el contenido de los slots por la información indicada, coincidiendo también con la etiqueta definida en el custom element, siendo así un <code>&lt;h2&gt;</code> el nombre o un <code>&lt;p&gt;</code> la descripción.</p>
<p>Esto nos permitirá crear múltiples slots en un mismo componente. Al igual que el ejemplo del apartado anterior, podemos utilizar contenido a modo de <strong>fallback</strong>, por si tenemos el slot vacío, tenga información por defecto.</p>
<blockquote>
<p>Ten en cuenta que los <strong>slots</strong> especificados en el <strong>Shadow DOM</strong>, al ser referencias al <strong>Light DOM</strong>, si modificamos cualquiera de los dos, se actualizarán en ambos lugares.</p>
</blockquote>
<h3 id="estilos-css-en-slots" tabindex="-1"><a class="header-anchor" href="#estilos-css-en-slots">Estilos CSS en slots</a></h3>
<p>Ahora hablemos de estilos. Si buscamos darle estilo a un elemento que se encuentra en un <code>&lt;slot&gt;</code> debemos pararnos a pensar donde está realmente el elemento para saber desde donde se le puede dar estilo. Recordemos que el componente, está aislado por un <strong>Shadow DOM</strong> y que los slots sólo son referencias a elementos que existen en el Light DOM.</p>
<h4 id="estilos-desde-el-lightdom" tabindex="-1"><a class="header-anchor" href="#estilos-desde-el-lightdom">Estilos desde el LightDOM</a></h4>
<p>Como los elementos HTML realmente existen en el DOM global, es posible seleccionar los elementos por cualquiera de sus características: clases, id, atributos o por el propio elemento. En el siguiente ejemplo se ve como se le da estilo según el tipo de elemento <code>&lt;h2&gt;</code> y por su atributo <code>slot=&quot;name&quot;</code>:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Manz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Developer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span></code></pre>
<pre class="language-css "><code class="language-css"><span class="token selector">app-element h2</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">app-element [slot="name"]</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Le hemos dado estilo al primer elemento del custom element, el elemento <code>&lt;h2&gt;</code>.</p>
<h4 id="estilos-desde-el-shadow-dom" tabindex="-1"><a class="header-anchor" href="#estilos-desde-el-shadow-dom">Estilos desde el Shadow DOM</a></h4>
<p>Es posible que no queramos dar estilo a los elementos desde fuera del componente, sino desde dentro, desde el <strong>Shadow DOM</strong>. Así será mucho más fácil de localizar y mantener el código. En ese caso, tenemos varias opciones a nuestra disposición, que veremos a continuación:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">AppElement</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"open"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token comment">/* html */</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;style>
        h2 {
          background: red;    /* No funciona */
        }
        [name="name"] {
          display: block;
          background: green;
        }
      &lt;/style>
      &lt;div class="card">
        &lt;slot name="name">&lt;/slot>
        &lt;slot name="role">&lt;/slot>
      &lt;/div>
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> AppElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>La primera de ellas sería darle estilo directamente a <code>&lt;h2&gt;</code>, sin embargo, ese elemento está realmente fuera del Shadow DOM, por lo que no podríamos aplicarle estilos. Sin embargo, si hacemos referencia al <code>&lt;slot&gt;</code> o sus atributos, si podremos hacerlo, porque dichas etiquetas si que están en el Shadow DOM. Eso sí, no olvides cambiarle el <code>display</code>.</p>
<blockquote>
<p>Recuerda que los estilos que se encuentren dentro del <strong>Shadow DOM</strong> siempre tendrán menos prioridad que los estilos del documento HTML global. Si se aplican estilos en ambos lugares, siempre tendrá preferencia el documento HTML global.</p>
</blockquote>
<h4 id="el-pseudoelemento-slotted" tabindex="-1"><a class="header-anchor" href="#el-pseudoelemento-slotted">El pseudoelemento <code>::slotted()</code></a></h4>
<p>Existe una forma más específica de dar estilo a los elementos slots de un componente con <strong>Shadow DOM</strong>: mediante el pseudoelemento CSS <code>::slotted()</code>.</p>
<p>Este pseudoelemento nos permite dar estilo a etiquetas insertadas en un slot, pero desde dentro del componente. En el interior de los paréntesis, deberemos indicar un selector CSS que encaje con la etiqueta insertada.</p>
<p>Por ejemplo, en el fragmento de código anterior vimos que <code>h2</code> desde el Shadow DOM no tendría efecto. En lugar de ello, utilizaremos <code>::slotted(h2)</code>:</p>
<pre class="language-js "><code class="language-js">  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;style>
        h2 {
          color: red;      /* No funciona */
        }
        ::slotted(h2) {    /* Funciona */
          color: green;
        }
      &lt;/style>
      &lt;div class="card">
        &lt;slot name="name">&lt;/slot>
        &lt;slot name="role">&lt;/slot>
      &lt;/div>
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>La diferencia de utilizar <code>::slotted()</code> es que, en este caso también se le da preferencia al estilo global, sin embargo en este caso con un <code>!important</code> si podríamos cambiar la especificidad si lo desearamos, ya que los estilos se están insertando en el DOM global a través del <code>::slotted()</code>.</p>
<p><caniuse-support title="Css selectors slotted" feature="mdn-css_selectors_slotted" edge="79/y" firefox="63/y" chrome="50/y" safari="10/y" opera="37/y" ios_saf="10/y" and_chr="50/y" and_ff="63/y">
</caniuse-support></p>
<h3 id="eventos-de-slots" tabindex="-1"><a class="header-anchor" href="#eventos-de-slots">Eventos de slots</a></h3>
<p>Por último, los <code>&lt;slots&gt;</code> tienen un evento que puede resultar útil para detectar cuando hay ciertos cambios en <strong>slots</strong>. Por ejemplo, el evento <code>slotchange</code> se dispara cuando:</p>
<ul>
<li>Un <code>&lt;slot&gt;</code> cambia su atributo <code>name</code>, y por lo tanto apunta a otro elemento.</li>
<li>Una etiqueta del Light DOM cambia su atributo <code>slot</code>, y por lo tanto, es referencia de otro slot.</li>
</ul>
<p>En resumen, cuando una <strong>asociación de slot-elemento</strong> cambia, apuntando a un nuevo elemento o dejando de apuntar al que ya lo hacía.</p>
<table>
<thead>
<tr>
<th>Evento</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>slotchange</code></td>
<td>Se dispara cuando detecta que una asociación slot-elemento ha cambiado.</td>
</tr>
</tbody>
</table>
<p>Para utilizarlo, lo haremos como cualquier evento, utilizando <code>.addEventListener()</code> sobre el <code>&lt;slot&gt;</code> en cuestión para escucharlo y detectar cuando se dispara, ejecutando una función asociada:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> slot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"slot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
slot<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"slotchange"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"¡El slot ha cambiado!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>De esta forma podremos detectar cambios y disparar cierta lógica necesaria en consecuencia.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../light-dom-shadow-dom/index.htm" title="¿Qué es el Light DOM?">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>¿Qué es el Light DOM?</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../shadow-dom-declarativo/index.htm" title="Shadow DOM declarativo">
  <div>
    <span>Shadow DOM declarativo</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../../javascript/index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
