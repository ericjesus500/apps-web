<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Etiquetas HTML personalizadas - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Los Custom Elements (elementos personalizados) son un estándar que permite la creación de nuestras propias etiquetas HTML, generalmente en WebComponents.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Etiquetas HTML personalizadas - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/webcomponents/componentes/custom-elements/custom-elements.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Los Custom Elements (elementos personalizados) son un estándar que permite la creación de nuestras propias etiquetas HTML, generalmente en WebComponents.">
  <meta property="og:url" content="https://lenguajejs.com/webcomponents/componentes/custom-elements/">
  <meta property="twitter:url" content="https://lenguajejs.com/webcomponents/componentes/custom-elements/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Etiquetas HTML personalizadas - Javascript en español">
  <meta property="twitter:description" content="Los Custom Elements (elementos personalizados) son un estándar que permite la creación de nuestras propias etiquetas HTML, generalmente en WebComponents.">
  <meta property="twitter:image" content="https://lenguajejs.com/webcomponents/componentes/custom-elements/custom-elements.png">

  </head>

<body class="js menu-open " style="--logo-color: #d4ecff"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (webcomponents)" href="../../index.htm" style="--image: url('../../../assets/webcomponents.jpg')"></a>

    <header>
      <a href="../../../npm/administracion/crear-nuevo-proyecto/index.htm" title="Crear nuevo proyecto con NPM">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../funcionalidad/clase-webcomponent/index.htm" title="Clase de un WebComponent">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Bases de los componentes
      </span>
            <a class="link" href="../que-son-webcomponents/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué son los WebComponents?
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Etiquetas HTML personalizadas
            </a>
            <a class="link" href="../estructura-componente/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Estructura de archivos
            </a>
            <a class="link" href="../atributos-webcomponent/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Atributos de un WebComponent
            </a>
            <a class="link" href="../plantillas-html-webcomponents/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Plantillas y HTML en componentes
            </a>
            <a class="link" href="../css-en-custom-elements/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              CSS en Custom Elements
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/webcomponents.jpg')">
    <h1><a href="index.htm">Etiquetas HTML personalizadas</a></h1><h2 class="typewriter">Crear Custom Elements: Etiquetas HTML personalizadas</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../que-son-webcomponents/index.htm">¿Qué son los WebComponents?</a>
    <a class="current" href="index.htm">Etiquetas HTML personalizadas</a>
    <a href="../estructura-componente/index.htm">Estructura de archivos</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Los <strong>Custom Elements</strong> (<em>Etiquetas HTML personalizadas</em>) son una de las características que forman los <strong>WebComponents</strong>, y mediante los cuales podemos crear nuestras <strong>propias etiquetas HTML</strong> de forma nativa, dotándolos de su propio marcado, funcionalidad y/o estilo.</p>
<p><img src="custom-elements.png" alt="WebComponents: Bases de Custom Elements" width="1024" height="400" loading="lazy"></p>
<h3 id="nombres-de-las-etiquetas-html" tabindex="-1"><a class="header-anchor" href="#nombres-de-las-etiquetas-html">Nombres de las etiquetas HTML</a></h3>
<p>El estándar de <strong>HTML5</strong> define que las <a href="https://lenguajehtml.com/html/introduccion/tabla-periodica-html5/">etiquetas HTML</a> oficiales deben estar formadas por una sola palabra, mientras que los <strong>custom elements</strong> (<em>nuestras propias etiquetas HTML</em>) deben estar formadas de al menos 2 palabras, separadas por un guión.</p>
<p>De esta forma, protegemos nuestras páginas o aplicaciones web para que, si en el futuro se añade una nueva etiqueta HTML estándar, no coincida con el mismo nombre que alguna nuestra.</p>
<table>
<thead>
<tr>
<th>Nombre de etiqueta</th>
<th>¿OK?</th>
<th>Razón</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;element&gt;</code></td>
<td>❌</td>
<td>Una etiqueta sin <code>-</code> no puede ser un <strong>custom element</strong>.</td>
</tr>
<tr>
<td><code>&lt;details&gt;</code></td>
<td>❌</td>
<td>Idem. Además, <code>&lt;details&gt;</code> ya es un elemento HTML existente.</td>
</tr>
<tr>
<td><code>&lt;app-component&gt;</code></td>
<td>✔️</td>
<td>Correcto, cumple las condiciones para tener un buen nombre.</td>
</tr>
<tr>
<td><code>&lt;AppComponent&gt;</code></td>
<td>❌</td>
<td>No incluye <code>-</code>. Es la convención en ciertos <strong>frameworks JS</strong>, pero <strong>no</strong> en WebComponents.</td>
</tr>
<tr>
<td><code>&lt;App-Component&gt;</code></td>
<td>❌</td>
<td>Casi. Es correcto, pero las etiquetas HTML deberían ser siempre <strong>minúsculas</strong>.</td>
</tr>
<tr>
<td><code>&lt;app-name-component&gt;</code></td>
<td>✔️</td>
<td>Correcto, tiene al menos un <code>-</code>. Puedes añadir más si lo deseas.</td>
</tr>
</tbody>
</table>
<p>Así pues, un <strong>custom element</strong> básico y sencillo, podría definirse de la siguiente forma:</p>
<pre class="language-html "><code class="language-html"><span class="token comment">&lt;!-- Sencillo ejemplo de una etiqueta HTML propia (custom element) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Ejemplo incorrecto de custom element (no tiene guión) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>element</span><span class="token punctuation">></span></span></code></pre>
<p>Aprovechando la necesidad de utilizar <strong>dos palabras</strong> en un componente <strong>separadas por un guión</strong>, una buena práctica suele ser utilizar la primera palabra como «<em>namespace</em>» del componente. Es decir, utilizar el nombre de la funcionalidad, librería o aplicación, y así evitar posibles colisiones con otros elementos de terceros con nombre similar.</p>
<h3 id="crear-un-custom-element" tabindex="-1"><a class="header-anchor" href="#crear-un-custom-element">Crear un custom element</a></h3>
<p>Antes de explicarlo, por aquí puedes ver como creo una etiqueta HTML personalizada:</p>
<p><youtube-video v="KE2xRDM4Amg" alt="Crear tus propias etiquetas HTML"></youtube-video></p>
<h4 id="custom-element-básico" tabindex="-1"><a class="header-anchor" href="#custom-element-básico">Custom element básico</a></h4>
<p>La forma más básica de crear una etiqueta personalizada HTML (<em>custom element</em>) es simplemente escribirla. El navegador la tratará como si fuera un elemento <code>&lt;span&gt;</code>.</p>
<pre class="language-html demo"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span>
  Contenido de nuestro elemento personalizado
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span></code></pre>
<pre class="language-css "><code class="language-css"><span class="token selector">app-element</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> indigo<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 5px 15px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Recuerda que también podemos darle estilo CSS al <strong>custom element</strong>, teniendo siempre en cuenta de que por defecto se trata de un <a href="https://lenguajecss.com/css/maquetacion-y-colocacion/propiedad-display/">elemento en línea</a>, por lo que tenemos añadir un <code>display</code> diferente y darle unas dimensiones para observar cambios si no le hemos añadido contenido:</p>
<pre class="language-css "><code class="language-css"><span class="token selector">app-element</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 125px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 125px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Pero respecto a todo el tema de los estilos CSS profundizaremos más adelante.</p>
<p>Centrémonos ahora en comprobar que, efectivamente, no nos estamos inventando nada. Vamos a localizar dos elementos HTML (<em>uno definido correctamente y otro definido incorrectamente</em>) y vamos a comprobar que tipo de elemento nos devuelve:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> appElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"appElement: "</span><span class="token punctuation">,</span> appElement<span class="token punctuation">,</span> appElement<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// HTMLElement</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"element: "</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> element<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// HTMLUnkownElement</span></code></pre>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-element</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>element</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>element</span><span class="token punctuation">></span></span></code></pre>
<p>Lo único que estamos haciendo en las lineas anteriores es, localizando ambos <strong>custom elements</strong> y accediendo al nombre del constructor para saber en que tipo de elemento HTML está basado:</p>
<ul>
<li>
<p>En el caso de <code>&lt;app-element&gt;</code> se trata efectivamente de un <strong>custom element</strong>, ya que está basado en <code>HTMLElement</code>, el tipo de dato base de cualquier etiqueta HTML.</p>
</li>
<li>
<p>En el caso de <code>&lt;element&gt;</code> nos dice que el tipo de dato es <code>HTMLUnknownElement</code>, ya que al no tener guión considera que es un elemento HTML oficial, pero el navegador desconoce de que elemento se trata (<em>es desconocido</em>).</p>
</li>
</ul>
<h4 id="custom-element-extendido" tabindex="-1"><a class="header-anchor" href="#custom-element-extendido">Custom element extendido</a></h4>
<p>Hasta ahora hemos creado un <strong>custom element sin funcionalidad</strong>. Básicamente, lo que hemos hecho hasta ahora ha sido crear un <code>&lt;span&gt;</code> con un nombre diferente, que no hace nada más que contener texto u otros elementos. Exactamente lo mismo que un <code>&lt;span&gt;</code>.</p>
<blockquote>
<p>Los WebComponents se programan a través de una <strong>Clase Javascript</strong>, por lo que si no las conoces, deberías antes echar un vistazo al artículo <a href="../../../javascript/oop/clases/index.htm">Clases en Javascript (POO)</a>.</p>
</blockquote>
<p>Vamos a dotar de funcionalidad nuestro <strong>Custom element</strong>. Para ello, haremos lo siguiente:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">AppElement</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Inicializado..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">,</span> AppElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Hemos hecho dos cosas:</p>
<ol>
<li>
<p>En primer lugar, hemos definido una clase llamada <code>AppElement</code>. Observese que es una buena práctica utilizar <strong>PascalCase</strong> para nombrar la clase, en relación al nombre que le queremos dar al <strong>custom element</strong>. Dicha clase extiende de <strong>HTMLElement</strong>, una clase que es la base de cualquier elemento HTML, por lo que al heredarla nuestro <strong>custom element</strong> va a tener todas las características que tenga un elemento HTML estándar.</p>
</li>
<li>
<p>En segundo lugar, hemos definido un <strong>constructor</strong>, que no es más que un método especial que se ejecuta cada vez que se crea una nueva instancia de clase, o en nuestro contexto, cada vez que alguien define o crea una etiqueta <code>&lt;app-element&gt;</code>. En nuestro ejemplo veremos que cada vez que creamos un elemento <code>&lt;app-element&gt;</code> nos aparece el texto del <code>console.log()</code> en la consola JS.</p>
</li>
</ol>
<blockquote>
<p><strong>Ojo</strong>: Si defines un constructor en tu clase, no se te debe olvidar indicar el <code>super()</code> en el mismo, ya que es obligatorio llamar al constructor del padre si estás extendiendo de <strong>HTMLElement</strong>.</p>
</blockquote>
<ol start="3">
<li>En tercer y último lugar, no olvidar la última línea, donde llamamos a <code>customElements.define()</code> para indicar al navegador que existe una <strong>asociación</strong> entre el nombre de la etiqueta (<em>primer parámetro</em>) y la clase que implementa su funcionalidad (<em>segundo parámetro</em>). Profundizaremos más en esto en el siguiente artículo.</li>
</ol>
<p>Con todo esto, y junto a <a href="../../../javascript/dom/que-es/index.htm">métodos del DOM</a>, podríamos comenzar a implementar funcionalidad dentro de la clase <code>AppElement</code> para dotar de características a nuestro <strong>custom element</strong>, como iremos viendo a lo largo de los siguientes capítulos.</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Nos devolverá que &lt;app-element> es de tipo AppElement</span>
<span class="token keyword">const</span> appElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"app-element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"app-element: "</span><span class="token punctuation">,</span> appElement<span class="token punctuation">,</span> appElement<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Ahora, si intentamos hacer esta prueba, veremos que Javascript nos dice que <code>&lt;app-element&gt;</code> es de tipo <code>AppElement</code>, la clase que hemos extendido.</p>
<h3 id="soporte-de-custom-elements" tabindex="-1"><a class="header-anchor" href="#soporte-de-custom-elements">Soporte de Custom Elements</a></h3>
<p>Actualmente, el soporte de <strong>custom elements</strong> en los navegadores es bastante bueno, ya que a excepción de algunas características menores en <strong>Safari</strong>, el soporte es pleno en navegadores actuales:</p>
<p><caniuse-support title="Custom Elements (V1)" feature="custom-elementsv1" edge="79/y" firefox="63/y" chrome="67/y" safari="10.1/a" opera="64/y" ios_saf="10.3/a" and_chr="120/y" and_ff="119/y">
</caniuse-support></p>
<p>En el caso de querer dar soporte al extinto <strong>Internet Explorer</strong>, existe un polyfill oficial, denominado <a href="https://github.com/webcomponents/polyfills/tree/master/packages/custom-elements">Custom Elements (v1) Polyfill</a> que puede llegar a implementar las características más comunes en navegadores muy antiguos u obsoletos.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../que-son-webcomponents/index.htm" title="¿Qué son los WebComponents?">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>¿Qué son los WebComponents?</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../estructura-componente/index.htm" title="Estructura de archivos">
  <div>
    <span>Estructura de archivos</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../../javascript/index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
