<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Crear elementos en el DOM - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="En Javascript debemos saber crear y modificar elementos HTML desde Javascript. Para ello, hay que aprender a manipular el DOM.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Crear elementos en el DOM - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="En Javascript debemos saber crear y modificar elementos HTML desde Javascript. Para ello, hay que aprender a manipular el DOM.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/dom/crear-elementos-dom/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/dom/crear-elementos-dom/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Crear elementos en el DOM - Javascript en español">
  <meta property="twitter:description" content="En Javascript debemos saber crear y modificar elementos HTML desde Javascript. Para ello, hay que aprender a manipular el DOM.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../oop/que-es/index.htm" title="Orientación a objetos">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../eventos/que-son-eventos/index.htm" title="¿Qué son los eventos?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        DOM
      </span>
            <a class="link" href="../que-es/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es el DOM?
            </a>
            <a class="link" href="../seleccionar-elementos-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Seleccionar elementos del DOM
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Crear elementos en el DOM
            </a>
            <a class="link" href="../atributos-del-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Gestionar atributos del DOM
            </a>
            <a class="link" href="../manipular-clases-css/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              La API classList de Javascript
            </a>
            <a class="link" href="../contenido-elemento-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Contenido en el DOM
            </a>
            <a class="link" href="../insertar-elementos-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Insertar elementos en el DOM
            </a>
            <a class="link" href="../navegar-elementos-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Navegar por elementos del DOM
            </a>
            <a class="link" href="../animate-elementos-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Animar elementos del DOM
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">Crear elementos en el DOM</a></h1><h2 class="typewriter">Creando elementos HTML de forma dinámica</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../seleccionar-elementos-dom/index.htm">Seleccionar elementos del DOM</a>
    <a class="current" href="index.htm">Crear elementos en el DOM</a>
    <a href="../atributos-del-dom/index.htm">Gestionar atributos del DOM</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Si te encuentras en fase de aprendizaje, lo normal suele ser crear código HTML desde un fichero HTML. Sin embargo, y sobre todo con el auge de las páginas <strong>SPA</strong> (<em>Single Page Application</em>) y los frameworks o librerías Javascript, esto ha cambiado bastante y es muy frecuente <strong>crear código HTML desde Javascript</strong> de forma dinámica.</p>
<p>Esto tiene sus ventajas y sus desventajas. Un fichero <code>.html</code> siempre será más sencillo, más «estático» y más directo, ya que lo primero que analiza un navegador web es un fichero de marcado HTML. Por otro lado, un fichero <code>.js</code> es más complejo y menos directo, pero mucho más potente, «dinámico» y flexible, con menos limitaciones a la hora de desarrollar.</p>
<p>En este artículo vamos a ver como podemos <strong>crear elementos HTML desde Javascript</strong> y aprovecharnos de la potencia de Javascript para hacer cosas que desde HTML, sin ayuda de Javascript, no podríamos realizar o costaría mucho más.</p>
<h3 id="crear-elementos-html" tabindex="-1"><a class="header-anchor" href="#crear-elementos-html">Crear elementos HTML</a></h3>
<p>Existe una serie de métodos para <strong>crear de forma eficiente</strong> diferentes elementos HTML o nodos. Dichos métodos nos ofrecen una forma muy sencilla de crear estructuras dinámicas, mediante bucles o estructuras definidas:</p>
<table>
<thead>
<tr>
<th>Métodos</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="element"></badge-type> <code>.createElement(tag, options)</code></td>
<td>Crea y devuelve el elemento HTML definido por el <badge-type class="string"></badge-type> <code>tag</code>.</td>
</tr>
<tr>
<td><badge-type class="node"></badge-type> <code>.createComment(text)</code></td>
<td>Crea y devuelve un nodo de comentarios HTML <code>&lt;!-- text --&gt;</code>.</td>
</tr>
<tr>
<td><badge-type class="node"></badge-type> <code>.createTextNode(text)</code></td>
<td>Crea y devuelve un nodo HTML con el texto <code>text</code>.</td>
</tr>
<tr>
<td><badge-type class="node"></badge-type> <code>.cloneNode(deep)</code></td>
<td>Clona el nodo HTML y devuelve una copia. <code>deep</code> es <strong>false</strong> por defecto.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.isConnected</code></td>
<td>Indica si el nodo HTML está insertado en el documento HTML.</td>
</tr>
</tbody>
</table>
<p>Para empezar, nos centraremos principalmente en la primera, que es la que utilizamos para <strong>crear elementos HTML</strong> en el DOM.</p>
<h4 id="creando-elementos-con-createelement" tabindex="-1"><a class="header-anchor" href="#creando-elementos-con-createelement">Creando elementos con <code>createElement()</code></a></h4>
<p>Mediante el método <code>.createElement()</code> podemos crear un <badge-type class="element"></badge-type> HTML <strong>en memoria</strong> (<em>¡no estará insertado aún en nuestro documento HTML!</em>). Con dicho elemento almacenado en una variable o constante, podremos modificar sus características o contenido, para <strong>posteriormente</strong> insertarlo en una posición determinada del DOM o documento HTML.</p>
<p><img src="createelement-dom.png" alt="Creando elementos en el DOM con createElement" width="1024" height="425" loading="lazy"></p>
<p>Vamos a centrarnos en el proceso de <strong>creación del elemento</strong>, y más adelante veremos diferentes formas de insertarlo en el DOM. El funcionamiento de <code>.createElement()</code> es muy sencillo: se trata de pasarle el nombre de la etiqueta <code>tag</code> a utilizar:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Creamos un &lt;div>&lt;/div></span>
<span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Creamos un &lt;span>&lt;/span></span>
<span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Creamos un &lt;img></span></code></pre>
<p>Aunque menos frecuente, de la misma forma, podríamos crear comentarios HTML con <code>.createComment()</code> o fragmentos de texto sin etiqueta HTML con <code>.createTextNode()</code>, pasándole a ambos un <badge-type class="string"></badge-type> con el texto en cuestión. En ambos, se devuelve un <badge-type class="node"></badge-type> que podremos utilizar luego para insertar en el documento HTML:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> comment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span><span class="token string">"Comentario"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &lt;!--Comentario--></span>
<span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"Hola"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// Nodo de texto: 'hola'</span></code></pre>
<p>El método <code>createElement()</code> tiene un parámetro opcional denominado <code>options</code>. Si se indica, se espera un objeto con una propiedad <code>is</code> para definir un <strong>elemento personalizado</strong> en una modalidad menos utilizada. Se verá más adelante en el apartado de <strong>Web Components</strong>.</p>
<blockquote>
<blockquote>
<blockquote>
<p>Ten presente que en los ejemplos que hemos visto estamos creando los elementos en una constante, pero de momento <strong>no los hemos añadido al documento HTML</strong>, por lo que no aparecerían visualmente. Más adelante veremos como añadirlos.</p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="el-método-clonenode" tabindex="-1"><a class="header-anchor" href="#el-método-clonenode">El método <code>.cloneNode()</code></a></h4>
<p>Hay que tener mucho cuidado al crear e intentar <strong>duplicar</strong> elementos HTML. Un error muy común es asignar un elemento que tenemos en otra variable, pensando que estamos creando una copia (<em>cuando no es así</em>). Esto es un clásico error común cuando se está aprendiendo a programar:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Elemento 1"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> div2 <span class="token operator">=</span> div<span class="token punctuation">;</span>   <span class="token comment">// NO se está haciendo una copia</span>
div2<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Elemento 2"</span><span class="token punctuation">;</span>

div<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>  <span class="token comment">// 'Elemento 2'</span></code></pre>
<p>Con esto, quizás pueda parecer que estamos duplicando un elemento para crearlo a imagen y semejanza del original. Sin embargo, lo que se hace es una <strong>referencia</strong> al elemento original, de modo que si se modifica el <code>div2</code>, también se modifica el elemento original. Esto se hace de esta forma por razones de rendimiento y eficiencia.</p>
<p>Para evitar que se cree una referencia, y duplicar el elemento, que es lo que realmente queremos, deberíamos usar el método <code>.cloneNode()</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Elemento 1"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> div2 <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Ahora SÍ estamos duplicando</span>
div2<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Elemento 2"</span><span class="token punctuation">;</span>

div<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>  <span class="token comment">// 'Elemento 1'</span></code></pre>
<p>El método <code>cloneNode(deep)</code> acepta un parámetro <badge-type class="boolean"></badge-type> <code>deep</code> opcional, a <code>false</code> por defecto, para indicar el tipo de clonación que se realizará:</p>
<ul>
<li>Si es <code>true</code>, clonará también elementos hijos. Se conoce como <strong>clonación profunda</strong> (<em>Deep Clone</em>).</li>
<li>Si es <code>false</code>, no clonará elementos hijos. Se conoce como <strong>clonación superficial</strong> (<em>Shallow Clone</em>).</li>
</ul>
<h4 id="la-propiedad-isconnected" tabindex="-1"><a class="header-anchor" href="#la-propiedad-isconnected">La propiedad <code>.isConnected</code></a></h4>
<p>La propiedad <code>isConnected</code> nos indica si el elemento en cuestión está conectado al DOM, es decir, si está insertado en el documento HTML:</p>
<ul>
<li>Si devuelve <code>true</code>, significa que el elemento está conectado al DOM.</li>
<li>Si devuelve <code>false</code>, significa que el elemento no está conectado al DOM.</li>
</ul>
<p>Hasta ahora, hemos creado elementos que no lo están (<em>permanecen sólo en memoria</em>). En el capítulo <a href="../insertar-elementos-dom/index.htm">Insertar elementos en el DOM</a> veremos como insertarlos en el documento HTML para que aparezca visualmente en la página.</p>
<h3 id="usando-fragmentos" tabindex="-1"><a class="header-anchor" href="#usando-fragmentos">Usando fragmentos</a></h3>
<p>En algunas ocasiones, nos puede resultar muy interesante utilizar <strong>fragmentos</strong>. Los fragmentos son una especie de documento paralelo, aislado de la página con la que estamos trabajando, que tiene varias características:</p>
<ul>
<li>No tiene elemento padre. Está aislado de la página o documento.</li>
<li>Es mucho más simple y ligero (<em>mejor rendimiento</em>).</li>
<li>Si necesitamos hacer cambios consecutivos, no afecta al <strong>reflow</strong> (<em>repintado de un documento</em>).</li>
</ul>
<p>De esta forma, es una estrategia muy útil para usarlo de <em>documento temporal</em> y no realizar cambios consecutivos, con su impacto de rendimiento. Para crearlos, necesitaremos utilizar la siguiente función:</p>
<table>
<thead>
<tr>
<th>Métodos</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="object"></badge-type> <code>document.createDocumentFragment()</code></td>
<td>Crea un fragmento aislado (<em>sin padre</em>).</td>
</tr>
</tbody>
</table>
<p>Así pues, el <badge-type class="object"></badge-type> que devuelve el método <code>document.createDocumentFragment()</code> es un <strong>fragmento</strong> que podremos utilizar para almacenar en su interior un pequeño DOM temporal, que luego añadiremos en nuestro DOM principal.</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Item número </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Como se puede ver, utilizamos el fragmento <code>fragment</code> generado como ubicación temporal donde hacer todos los cambios del DOM que necesitemos, sin que afecten al <strong>reflow</strong> del documento de forma independiente. Una vez terminemos nuestra lógica y tengamos el DOM definitivo, lo insertamos como hacemos siempre, por ejemplo, con un <code>appendChild</code> (<em>ver más adelante</em>).</p>
<p>Es entonces cuando se traslada todo el DOM del fragmento al lugar donde hemos indicado en el <code>appendChild</code> (*en nuestro ejemplo, a la etiqueta <code>&lt;body&gt;</code>), dejando nuevamente el fragmento vacío.</p>
<blockquote>
<p>Los elementos <code>&lt;template&gt;</code> utilizan <strong>fragmentos</strong> para crear un DOM desconectado del documento principal. Puedes ver más en <a href="../../../webcomponents/componentes/plantillas-html-webcomponents/index.htm">Plantillas y DOM en WebComponents</a>.</p>
</blockquote>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../seleccionar-elementos-dom/index.htm" title="Seleccionar elementos del DOM">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Seleccionar elementos del DOM</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../atributos-del-dom/index.htm" title="Gestionar atributos del DOM">
  <div>
    <span>Gestionar atributos del DOM</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
