<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Insertar elementos en el DOM - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Existen varias formas de insertar elementos en el DOM desde Javascript, así como eliminarlos. Descubre en este artículo como se hace.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Insertar elementos en el DOM - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Existen varias formas de insertar elementos en el DOM desde Javascript, así como eliminarlos. Descubre en este artículo como se hace.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/dom/insertar-elementos-dom/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/dom/insertar-elementos-dom/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Insertar elementos en el DOM - Javascript en español">
  <meta property="twitter:description" content="Existen varias formas de insertar elementos en el DOM desde Javascript, así como eliminarlos. Descubre en este artículo como se hace.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../oop/que-es/index.htm" title="Orientación a objetos">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../eventos/que-son-eventos/index.htm" title="¿Qué son los eventos?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        DOM
      </span>
            <a class="link" href="../que-es/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es el DOM?
            </a>
            <a class="link" href="../seleccionar-elementos-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Seleccionar elementos del DOM
            </a>
            <a class="link" href="../crear-elementos-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Crear elementos en el DOM
            </a>
            <a class="link" href="../atributos-del-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Gestionar atributos del DOM
            </a>
            <a class="link" href="../manipular-clases-css/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              La API classList de Javascript
            </a>
            <a class="link" href="../contenido-elemento-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Contenido en el DOM
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Insertar elementos en el DOM
            </a>
            <a class="link" href="../navegar-elementos-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Navegar por elementos del DOM
            </a>
            <a class="link" href="../animate-elementos-dom/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Animar elementos del DOM
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">Insertar elementos en el DOM</a></h1><h2 class="typewriter">Formas de añadir elementos en una página</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../contenido-elemento-dom/index.htm">Contenido en el DOM</a>
    <a class="current" href="index.htm">Insertar elementos en el DOM</a>
    <a href="../navegar-elementos-dom/index.htm">Navegar por elementos del DOM</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>En capítulos anteriores hemos visto formas de <a href="../crear-elementos-dom/index.htm">crear elementos en el DOM</a> e incluso <a href="../contenido-elemento-dom/index.htm">modificar el contenido de elementos HTML</a>. Aunque mediante propiedades como <code>.innerHTML</code> podemos insertar elementos en el DOM de un documento HTML, en muchas ocasiones quizás no es la mejor forma.</p>
<p>Si tenemos que hacer múltiples inserciones o necesitamos insertar elementos manteniendo intacta la estructura existente (<em>o los listeners de eventos asociados</em>), estaría bien disponer de formas en las que podamos indicar exactamente donde queremos añadir el elemento, de forma más controlada. Y eso es lo que vamos a ver en este artículo.</p>
<p>Veamos 3 formas (<em>de más tradicional a más moderna</em>) de <strong>inserción o modificación de elementos</strong>:</p>
<ul>
<li>1️⃣ La API de nodos</li>
<li>2️⃣ La API de elementos</li>
<li>3️⃣ La API de inserción adyacente</li>
</ul>
<p>Puedes usar la que prefieras, que se adapte mejor a tus necesidades.</p>
<h3 id="api-de-nodos" tabindex="-1"><a class="header-anchor" href="#api-de-nodos">API de nodos</a></h3>
<p>La <strong>API de nodos</strong> de Javascript es la más tradicional y antigua, y aunque cumple bien determinados aspectos, suele ser más complicado llegar al objetivo porque no hay ciertos métodos explícitos para hacer determinadas cosas. No obstante, suele ser la más extendida que te encuentras, ya que <code>.appendChild()</code> está muy extendido al ser uno de los más usados:</p>
<table>
<thead>
<tr>
<th>Métodos</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="node"></badge-type> <code>.appendChild(node)</code></td>
<td>Añade como hijo el nodo <code>node</code>. Devuelve el nodo insertado.</td>
</tr>
<tr>
<td><badge-type class="node"></badge-type> <code>.removeChild(node)</code></td>
<td>Elimina y devuelve el nodo hijo <code>node</code>.</td>
</tr>
<tr>
<td><badge-type class="node"></badge-type> <code>.replaceChild(new, old)</code></td>
<td>Reemplaza el nodo hijo <code>old</code> por <code>new</code>. Devuelve <code>old</code>.</td>
</tr>
<tr>
<td><badge-type class="node"></badge-type> <code>.insertBefore(new, node)</code></td>
<td>Inserta el nodo <code>new</code> antes de <code>node</code> y como hijo del nodo actual.</td>
</tr>
<tr>
<td><badge-type class="node"></badge-type> <code>.insertBefore(new, </code><badge-type class="null"></badge-type><code>)</code></td>
<td>Inserta el nodo <code>new</code> después del último nodo hijo. Equivale a <code>.appendChild()</code>.</td>
</tr>
</tbody>
</table>
<p>De ellos, probablemente el método más extendido y conocido es <code>.appendChild()</code>. Vamos a analizar cada uno de ellos y ver como podemos utilizarlos.</p>
<h4 id="el-método-appendchild" tabindex="-1"><a class="header-anchor" href="#el-método-appendchild">El método <code>.appendChild()</code></a></h4>
<p>Uno de los métodos más comunes para añadir un elemento HTML creado con Javascript es <code>.appendChild()</code>. Como su propio nombre indica, este método añade o inserta un nuevo elemento, como si fuera un hijo al final de todos los hijos del elemento sobre el que se realiza.</p>
<p><img src="createelement-dom.png" alt="createElement" width="1024" height="325" loading="lazy"></p>
<p>Es importante tener claro donde se inserta, porque aunque es bastante común, no siempre querremos insertar el elemento en esa posición particular.</p>
<p>Observa el siguiente fragmento de código:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://lenguajejs.com/assets/logo.svg"</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>alt <span class="token operator">=</span> <span class="token string">"Logo Javascript"</span><span class="token punctuation">;</span>

container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>En este ejemplo, creamos un elemento <code>&lt;img&gt;</code> que aún no está conectado al DOM de la página. Existe sólo en la constante <code>&lt;img&gt;</code>. Posteriormente, añadimos los atributos <code>src</code> y <code>alt</code> y lo conectamos al DOM el elemento usando el método <code>.appendChild()</code>.</p>
<p>Se insertará como último hijo del elemento <code>&lt;body&gt;</code>, ya que es su comportamiento predefinido.</p>
<h4 id="el-método-removechild" tabindex="-1"><a class="header-anchor" href="#el-método-removechild">El método <code>.removeChild()</code></a></h4>
<p>En algunos casos, nos puede interesar eliminar un nodo hijo de un elemento. Para esas situaciones, podemos utilizar el método <code>.removeChild(node)</code> donde <code>node</code> es el nodo hijo que queremos eliminar:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secondItem <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item:nth-child(2)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

container<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>secondItem<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Desconecta el segundo .item</span></code></pre>
<h4 id="el-método-replacechild" tabindex="-1"><a class="header-anchor" href="#el-método-replacechild">El método <code>.replaceChild()</code></a></h4>
<p>De la misma forma, el método <code>replaceChild(new, old)</code> nos permite cambiar un nodo hijo <code>old</code> por un nuevo nodo hijo <code>new</code>. En ambos casos, el método nos devuelve el nodo reemplazado:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secondItem <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item:nth-child(2)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newNode<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"DOS"</span><span class="token punctuation">;</span>

container<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> secondItem<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="el-método-insertbefore" tabindex="-1"><a class="header-anchor" href="#el-método-insertbefore">El método <code>.insertBefore()</code></a></h4>
<p>Por último, el método <code>insertBefore(newnode, node)</code> es un método más específico y menos utilizado en el que se puede especificar exactamente el lugar a insertar un nodo. El primer parámetro es el nodo a insertar, mientras que el <strong>segundo parámetro</strong> puede ser:</p>
<ul>
<li><badge-type class="null"></badge-type> ► inserta <code>newnode</code> después del último nodo hijo. Equivale a <code>.appendChild()</code>.</li>
<li><badge-type class="element"></badge-type> ► inserta <code>newnode</code> antes de dicho <code>node</code> de referencia.</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secondItem <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item:nth-child(2)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newNode<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Nuevo elemento"</span><span class="token punctuation">;</span>

container<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> secondItem<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>En este caso, el <strong>nuevo elemento</strong> aparecería justo antes del segundo item.</p>
<hr>
<h3 id="api-de-elementos" tabindex="-1"><a class="header-anchor" href="#api-de-elementos">API de elementos</a></h3>
<p>Los métodos mencionados con anterioridad sirven en muchos casos, sin embargo, son poco específicos y puede que no cubran todas las posibles situaciones. Existe otra familia de métodos para añadir e insertar elementos que quizás sea mucho más versátil.</p>
<p>Todos los métodos permiten pasar por parámetro un elemento o una lista de elementos. También puedes pasar un <badge-type class="string"></badge-type> (<em>para insertar un fragmento de texto</em>). Echemos un vistazo a estos métodos:</p>
<table>
<thead>
<tr>
<th>Métodos</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.before()</code></td>
<td>Añade el nuevo elemento justo antes.</td>
</tr>
<tr>
<td><code>.after()</code></td>
<td>Añade el nuevo elemento justo después.</td>
</tr>
<tr>
<td><code>.prepend()</code></td>
<td>Se añade el nuevo elemento antes del primer hijo.</td>
</tr>
<tr>
<td><code>.append()</code></td>
<td>Se añade el nuevo elemento después del último hijo.</td>
</tr>
<tr>
<td><code>.replaceChildren()</code></td>
<td>Elimina todos los hijos y los sustituye por el nuevo elemento.</td>
</tr>
<tr>
<td><code>.replaceWith()</code></td>
<td>Se sustituye por el nuevo elemento.</td>
</tr>
<tr>
<td><code>.remove()</code></td>
<td>Elimina el propio elemento.</td>
</tr>
</tbody>
</table>
<p>Vamos a suponer que estos métodos los vamos a ejecutar en base al elemento <code>container</code>, por lo que todo se hará respecto a él. Por ejemplo, <code>container.before()</code>.</p>
<h4 id="el-método-before-y-after" tabindex="-1"><a class="header-anchor" href="#el-método-before-y-after">El método <code>.before()</code> y <code>.after()</code></a></h4>
<p>Con el método <code>.before()</code> podemos insertar uno o varios elementos antes del elemento que llama al <code>before</code> (<em>en el ejemplo, container</em>). Con el método <code>.after()</code> ocurre exactamente lo mismo, pero <strong>después del elemento</strong> en lugar de antes:</p>
<p><img src="prepend-append.png" alt="El método prepend, append, before y after" width="1024" height="325" loading="lazy"></p>
<p>Veamoslo con un ejemplo:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Item insertado"</span><span class="token punctuation">;</span>

<span class="token comment">// A) Inserta antes de .container</span>
container<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// B) Inserta después de .container</span>
container<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="el-método-prepend-y-append" tabindex="-1"><a class="header-anchor" href="#el-método-prepend-y-append">El método <code>.prepend()</code> y <code>.append()</code></a></h4>
<p>Con estos dos métodos podemos insertar elementos en sus elementos hijos, al principio o al final. El método <code>.prepend()</code> permite insertar uno o varios elementos antes del primer elemento hijo de nuestro elemento base. En el caso de <code>append()</code> ocurre lo mismo, pero <strong>después del último elemento hijo</strong>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Item insertado"</span><span class="token punctuation">;</span>

<span class="token comment">// A) Inserta antes del primer hijo de .container</span>
container<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// B) Inserta después del último hijo de .container</span>
container<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>El método <code>.append()</code> es equivalente al <code>.appendChild()</code> que vimos más atrás.</p>
<h4 id="el-método-replacechildren-y-replacewith" tabindex="-1"><a class="header-anchor" href="#el-método-replacechildren-y-replacewith">El método <code>.replaceChildren()</code> y <code>.replaceWith()</code></a></h4>
<p>Por otro lado, también tenemos los métodos <code>.replaceChildren()</code> y <code>.replaceWith()</code>. El primero de ellos, <code>replaceChildren()</code> permite eliminar todos los elementos hijos del elemento base, y sustituirlos por uno o varios que indiques por parámetro.</p>
<p><img src="replacewith-replacechildren.png" alt="El método replaceChildren y replaceWith" width="1024" height="325" loading="lazy"></p>
<p>El segundo método, <code>replaceWith()</code>, lo que permite es reemplazar <strong>el propio elemento base</strong> con uno o varios elementos que pasemos por parámetro, por lo que se realiza un reemplazo completo:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Nuevo Item hijo"</span><span class="token punctuation">;</span>

<span class="token comment">// A) Reemplaza por todos sus hijos</span>
container<span class="token punctuation">.</span><span class="token function">replaceChildren</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// B) El container es reemplazado por el nuevo item hijo</span>
container<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="el-método-remove" tabindex="-1"><a class="header-anchor" href="#el-método-remove">El método <code>.remove()</code></a></h4>
<p>Al igual que podemos insertar o reemplazar elementos, también podemos eliminarlos. Ten en cuenta que al «eliminar» un nodo o elemento HTML, lo que hacemos realmente no es borrarlo, sino <strong>desconectarlo del DOM o documento HTML</strong>, de modo que no están conectados, pero siguen existiendo.</p>
<p>El método <code>.remove()</code> se encarga de desconectarse del DOM a sí mismo,</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".deleteme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

div<span class="token punctuation">.</span>isConnected<span class="token punctuation">;</span>    <span class="token comment">// true</span>
div<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span>isConnected<span class="token punctuation">;</span>    <span class="token comment">// false</span></code></pre>
<p>En este caso, lo que hemos hecho es buscar el elemento HTML <code>&lt;div class=&quot;deleteme&quot;&gt;</code> en el documento HTML y desconectarlo de su elemento padre, de forma que dicho elemento pasa a no pertenecer al documento HTML, pero sigue existiendo en la constante <code>div</code>.</p>
<hr>
<h3 id="api-de-inserción-adyacente" tabindex="-1"><a class="header-anchor" href="#api-de-inserción-adyacente">API de inserción adyacente</a></h3>
<p>Probablemente, una de las APIs de manejo del DOM más desconocidas y más interesantes, es la de <strong>Inserción de elementos adjacentes</strong>. Son una familia de 3 métodos que permiten hacer prácticamente cualquier operación posible en el DOM.</p>
<p>Son los métodos que tenemos a continuación:</p>
<table>
<thead>
<tr>
<th>Métodos</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="element"></badge-type> <code>.insertAdjacentElement(position, element)</code></td>
<td>Inserta el <code>element</code> en la posición <code>position</code>. Si falla, <badge-type class="null"></badge-type>.</td>
</tr>
<tr>
<td><code>.insertAdjacentHTML(position, htmlCode)</code></td>
<td>Inserta el código HTML de <code>htmlCode</code> en la posición <code>position</code>.</td>
</tr>
<tr>
<td><code>.insertAdjacentText(position, text)</code></td>
<td>Inserta el texto <code>text</code> en la posición <code>position</code>.</td>
</tr>
</tbody>
</table>
<p>Los métodos de la familia <code>insertAdjacent</code> son bastante más versátiles que <code>.appendChild()</code>, ya que permiten muchas más posibilidades. Tenemos tres versiones diferentes:</p>
<ul>
<li><code>.insertAdjacentElement()</code> donde insertamos una etiqueta HTML <badge-type class="element"></badge-type></li>
<li><code>.insertAdjacentHTML()</code> donde insertamos <strong>código HTML</strong> directamente (<em>similar a innerHTML</em>)</li>
<li><code>.insertAdjacentText()</code> donde insertamos un <strong>texto</strong> directamente (<em>similar a textContent</em>)</li>
</ul>
<p>Ten en cuenta que <code>position</code> es un <badge-type class="string"></badge-type> que puede tener uno de los siguientes valores:</p>
<p><img src="beforebegin-afterbegin-beforeend-afterend.png" alt="beforebegin, afterbegin, beforeend, y afterend" width="1024" height="400" loading="lazy"></p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Descripción</th>
<th>Equivalente a...</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>beforebegin</code></td>
<td>Inserta el elemento <strong>antes</strong> de la etiqueta HTML de apertura.</td>
<td><code>before()</code></td>
</tr>
<tr>
<td><code>afterbegin</code></td>
<td>Inserta el elemento dentro, <strong>antes de su primer hijo</strong>.</td>
<td><code>preprend()</code></td>
</tr>
<tr>
<td><code>beforeend</code></td>
<td>Inserta el elemento dentro, <strong>justo antes de la etiqueta HTML de cierre</strong>.</td>
<td><code>append()</code> o <code>appendChild()</code></td>
</tr>
<tr>
<td><code>afterend</code></td>
<td>Inserta el elemento <strong>después</strong> de la etiqueta HTML de cierre.</td>
<td><code>after()</code></td>
</tr>
</tbody>
</table>
<p>Veamos algunos ejemplo aplicando cada uno de ellos con el método <code>.insertAdjacentElement()</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Creamos un nuevo &lt;div>Ejemplo&lt;/div></span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Ejemplo"</span><span class="token punctuation">;</span>

container<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">"beforebegin"</span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// A) &lt;div>Ejemplo&lt;/div> &lt;div class="container">container&lt;/div></span>

container<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">"afterbegin"</span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// B) &lt;div class="container"> &lt;div>Ejemplo&lt;/div> container&lt;/div></span>

container<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">"beforeend"</span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// C) &lt;div class="container">container &lt;div>Ejemplo&lt;/div> &lt;/div></span>

container<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">"afterend"</span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// D) &lt;div class="container">App&lt;/div> &lt;div>Ejemplo&lt;/div></span></code></pre>
<p>Ten en cuenta que en el ejemplo muestro <strong>varias opciones alternativas</strong>, no lo que ocurriría tras ejecutar las cuatro opciones una detrás de otra.</p>
<p>Por otro lado, notar que tenemos <strong>tres versiones</strong> en esta familia de métodos, una que actúa sobre elementos <strong>HTML</strong> (<em>la que hemos visto</em>), pero otras dos que actuan sobre código HTML y sobre nodos de texto. Veamos un ejemplo de cada una:</p>
<pre class="language-js "><code class="language-js">container<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">"beforebegin"</span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// A) &lt;div>Ejemplo&lt;/div> &lt;div class="container">App&lt;/div></span>

container<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">"beforebegin"</span><span class="token punctuation">,</span> <span class="token string">"&lt;p>Hola&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// B) &lt;p>Hola&lt;/p> &lt;div class="container">App&lt;/div></span>

container<span class="token punctuation">.</span><span class="token function">insertAdjacentText</span><span class="token punctuation">(</span><span class="token string">"beforebegin"</span><span class="token punctuation">,</span> <span class="token string">"Hola a todos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// C) Hola a todos &lt;div class="container">App&lt;/div></span></code></pre>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../contenido-elemento-dom/index.htm" title="Contenido en el DOM">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Contenido en el DOM</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../navegar-elementos-dom/index.htm" title="Navegar por elementos del DOM">
  <div>
    <span>Navegar por elementos del DOM</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
