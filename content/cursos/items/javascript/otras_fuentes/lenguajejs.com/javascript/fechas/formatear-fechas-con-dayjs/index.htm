<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Formatear fechas con dayjs - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="¿Cómo formatear fechas facilmente en Javascript? Utilizando la librería dayjs, una excelente alternativa a Moment.js o al Date nativo de Javascript.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Formatear fechas con dayjs - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/fechas/dayjs.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="¿Cómo formatear fechas facilmente en Javascript? Utilizando la librería dayjs, una excelente alternativa a Moment.js o al Date nativo de Javascript.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/fechas/formatear-fechas-con-dayjs/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/fechas/formatear-fechas-con-dayjs/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Formatear fechas con dayjs - Javascript en español">
  <meta property="twitter:description" content="¿Cómo formatear fechas facilmente en Javascript? Utilizando la librería dayjs, una excelente alternativa a Moment.js o al Date nativo de Javascript.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/fechas/dayjs.png">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../eventos/que-son-eventos/index.htm" title="¿Qué son los eventos?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../regexp/expresiones-regulares/index.htm" title="¿Qué es una expresión regular?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Fechas y horas
      </span>
            <a class="link" href="../date-fechas-nativas/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              El tipo Date
            </a>
            <a class="link" href="../formatear-fechas-con-intl/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Formatear fechas con Intl
            </a>
            <a class="link" href="../fechas-relativas-con-intl/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Fechas relativas con Intl
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Formatear fechas con dayjs
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">Formatear fechas con dayjs</a></h1><h2 class="typewriter">Librería Javascript para dar formato a fechas</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../fechas-relativas-con-intl/index.htm">Fechas relativas con Intl</a>
    <a class="current" href="index.htm">Formatear fechas con dayjs</a>
    <a href="../../regexp/expresiones-regulares/index.htm">¿Qué es una expresión regular?</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Manipular <strong>fechas</strong> con un lenguaje de programación siempre ha sido complicado, ya que tenemos múltiples formas de representarlas. El <a href="../date-fechas-nativas/index.htm">objeto Date nativo</a> está bien, pero puede quedarse bastante corto cuando queremos trabajar a más alto nivel y no tener que implementarlo todo nosotros.</p>
<p>Históricamente, en el ecosistema Javascript se utilizaba frecuentemente una librería llamada <a href="https://momentjs.com/">Moment.js</a>. Sin embargo, esa librería se considera obsoleta desde hace tiempo y te recomiendan migrar a otras librerías más modernas, como por ejemplo <a href="https://moment.github.io/luxon/">Luxon</a> o <a href="https://day.js.org/">dayjs</a>, de la cuál hablaremos en esta ocasión.</p>
<p><strong>DayJS</strong> es una librería muy pequeña (<em>Sólo 2KB</em>) que puede servirnos de <strong>alternativa a Moment.js</strong>, ya que su API es muy flexible y te costará poco acostumbrarte si vienes de Moment. Entre otras cosas, la librería proporciona inmutabilidad, encadenamiento de métodos, soporte de idiomas y navegadores.</p>
<h3 id="instalación-de-dayjs" tabindex="-1"><a class="header-anchor" href="#instalación-de-dayjs">Instalación de dayjs</a></h3>
<p>Para utilizar la librería <strong>dayjs</strong> debemos importarla en nuestro código. Esto se puede hacer de múltiples formas, como veremos a continuación. La primera, y más tradicional, es incluir la URL donde se encuentra el fichero <code>.js</code> de la librería <strong>dayjs</strong>. Podemos utilizar un repositorio de librerías como <a href="https://cdnjs.com/">CDNjs</a> o <a href="https://www.jsdelivr.com/">JSDelivr</a>:</p>
<pre class="language-html "><code class="language-html"><span class="token comment">&lt;!-- Método 1: HTML+CDN --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/dayjs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Sin embargo, en estos días es más habitual hacerlo desde los ficheros Javascript. Se puede hacer también de varias formas. La primera, y más conservadora, instalando la librería con NPM mediante el comando <code>npm install dayjs</code> . De esta forma, podremos hacer un <a href="../../modulos/import/index.htm#bare-imports">bare import</a> de la siguiente forma:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">/* Método 2: JS+NPM */</span>
<span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">"dayjs"</span><span class="token punctuation">;</span></code></pre>
<p>Esto importará la librería apropiada buscándola en la carpeta <code>node_modules</code> , donde la habrá instalado el NPM cuando hicimos <code>npm install</code>.</p>
<p>Por último, tendremos otra forma, un poco más moderna, que es una mezcla de las dos anteriores. Se basa en utilizar un CDN para importar la librería, pero desde un fichero Javascript en lugar desde el HTML:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">/* Método 3: CDN+ESM */</span>
<span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">"https://cdn.skypack.dev/dayjs"</span><span class="token punctuation">;</span></code></pre>
<p>Este método requiere que el fichero javascript se cargue con una etiqueta <code>&lt;script type=&quot;module&quot;&gt;</code> y que la librería esté en formato <a href="../../../automatizadores/introduccion/commonjs-vs-es-modules/index.htm">ESM</a>. <a href="https://www.skypack.dev/">SkyPack</a> es un CDN moderno de librerías preparadas para utilizar con sistema ESM. Si lo prefieres, también tienes <a href="https://esm.sh/">esm.sh</a>.</p>
<h3 id="crear-fechas-con-dayjs" tabindex="-1"><a class="header-anchor" href="#crear-fechas-con-dayjs">Crear fechas con dayjs</a></h3>
<p><strong>Dayjs</strong> tiene múltiples y variadas formas de crear fechas, pasando información diferente como entrada. Veamos las principales:</p>
<table class="medium">
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dayjs()</code></td>
<td>Crea la fecha actual. Igual a <code>dayjs(new Date())</code> o <code>dayjs(undefined)</code> .</td>
</tr>
<tr>
<td><code>dayjs(</code> <badge-type class="date"></badge-type> <code> date)</code></td>
<td>Transforma una fecha Date en una fecha dayjs.</td>
</tr>
<tr>
<td><code>dayjs(</code> <badge-type class="string"></badge-type> <code>isoDate)</code></td>
<td>Crea una fecha específica desde <a href="https://es.wikipedia.org/wiki/ISO_8601">formato ISO 8601</a>.</td>
</tr>
<tr>
<td><code>dayjs(</code> <badge-type class="string"></badge-type> <code>date, </code> <badge-type class="string"></badge-type> <code> format)</code></td>
<td>Crea una fecha específica, desde un formato específico.</td>
</tr>
<tr>
<td><code>dayjs(</code> <badge-type class="string"></badge-type> <code>date, </code> <badge-type class="array"></badge-type> <code> formats)</code></td>
<td>Idem al anterior pero con varios formatos diferentes.</td>
</tr>
<tr>
<td><code>dayjs(</code> <badge-type class="number"></badge-type> <code>timestamp)</code></td>
<td>Calcula fecha con número de <code>ms</code> desde <strong>1-ENE-1970</strong> a las <strong>12AM UTC</strong>.</td>
</tr>
<tr>
<td><code>dayjs.unix(</code> <badge-type class="number"></badge-type> <code>timestamp)</code></td>
<td>Idem, con <code>sec</code> en vez de <code>ms</code> . Igual a <code>dayjs(timestamp * 1000)</code> .</td>
</tr>
<tr>
<td><code>dayjs(</code> <badge-type class="array"></badge-type> <code>date)</code></td>
<td>Crea una fecha a partir de un array de números: Año, mes, día, hora...</td>
</tr>
<tr>
<td><code>dayjs(</code> <badge-type class="object"></badge-type> <code>date)</code></td>
<td>Crea una fecha desde un objeto con claves como <code>y</code> , <code>M</code> , <code>d</code> , <code>h</code> , <code>m</code> , <code>s</code> , <code>ms</code> .</td>
</tr>
</tbody>
</table>
<p>Como se puede ver, existen muy diversas formas de crear objetos de fechas con <strong>dayjs</strong>. Todas las formas anteriores, nos crean un objeto <code>dayjs</code> que contendrá una fecha y que posteriormente, veremos como representar por pantalla, también de múltiples formas. Sin embargo, vamos a centrarnos ahora sólo en la primera parte donde creamos una fecha a partir de múltiples formatos.</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Objeto de fecha dayjs (con la fecha actual)</span>

<span class="token keyword">const</span> isoDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">"2022-11-30T16:45:00.005Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Formato ISO 8601</span>

<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30-1-22 con Date nativo</span></code></pre>
<p>De estas primeras formas, podemos crear fechas que representen en el momento actual, o fechas específicas que utilizan el estándar (<em>ISO 8601</em>) o que utilizan fechas creadas con el <a href="../date-fechas-nativas/index.htm">objeto Date de fechas nativas</a> de Javascript.</p>
<p>Si por otro lado nos interesa crear una fecha a partir de un formato muy específico (<em>algo muy habitual</em>), podemos utilizar un segundo parámetro donde indicamos cuál es ese formato, mientras que en el primer parámetro pasamos un <badge-type class="string"></badge-type> con la fecha representada en dicho formato:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">import</span> customParseFormat <span class="token keyword">from</span> <span class="token string">"dayjs/plugin/customParseFormat"</span><span class="token punctuation">;</span>
dayjs<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>customParseFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> firstDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">"22/02/2022"</span><span class="token punctuation">,</span> <span class="token string">"DD/MM/YYYY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> secondDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">"2022-22-Jan"</span><span class="token punctuation">,</span> <span class="token string">"YYYY-DD-MMM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Si quieres utilizar esta forma de crear fechas, necesitas antes importar el plugin <code>customParseFormat</code> y extender de él, de lo contrario obtendrás una fecha no válida. Las letras que se utilizan para determinar el formato en el segundo parámetro son las siguientes:</p>
<table>
<thead>
<tr>
<th>Símbolo</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>YY</code> / <code>YYYY</code></td>
<td>Año con 2 dígitos (<em>22</em>) / año con 4 dígitos (<em>2022</em>).</td>
</tr>
<tr>
<td><code>M</code> / <code>MM</code></td>
<td>Número del mes (<em>1, 2, 3...</em>) / número del mes con dos dígitos (<em>01, 02, 03...</em>).</td>
</tr>
<tr>
<td><code>MMM</code> / <code>MMMM</code></td>
<td>Nombre del mes abreviado (<em>Jan, Feb...</em>) / nombre del mes (<em>January, February...</em>).</td>
</tr>
<tr>
<td><code>D</code> / <code>DD</code></td>
<td>Día del mes (<em>1, 2, 3...</em>) / día del mes con dos dígitos (<em>01, 02, 03...</em>).</td>
</tr>
<tr>
<td><code>H</code> / <code>HH</code></td>
<td>Hora del día en formato de «24 horas» (<em>0, 1, 2... 23</em>) / versión de 2 dígitos. (<em>00, 01, 02... 23</em>)</td>
</tr>
<tr>
<td><code>h</code> / <code>hh</code></td>
<td>Hora del día en formato de «12 horas» (<em>1, 2, 3... 12</em>) / versión de 2 dígitos. (<em>01, 02, 03... 12</em>)</td>
</tr>
<tr>
<td><code>m</code> / <code>mm</code></td>
<td>Minutos (<em>1, 2, 3...</em>) / minutos con dos dígitos (<em>01, 02, 03...</em>).</td>
</tr>
<tr>
<td><code>s</code> / <code>ss</code></td>
<td>Segundos (<em>1, 2, 3...</em>) / segundos con dos dígitos (<em>01, 02, 03...</em>).</td>
</tr>
<tr>
<td><code>S</code> / <code>SS</code> / <code>SSS</code></td>
<td>Milisegundos (<em>1, 2, 3...</em>) / con dos dígitos (<em>01, 02, 03...</em>) / con tres dígitos (<em>001, 002, 003...</em>).</td>
</tr>
<tr>
<td><code>Z</code> / <code>ZZ</code></td>
<td>Diferencia horaria en formato (<em>+02:00</em>) / Diferencia horaria en formato (<em>+0200</em>).</td>
</tr>
<tr>
<td><code>A</code> / <code>a</code></td>
<td>Antes (<em>AM</em>) o después (<em>PM</em>) del mediodía en mayúsculas / Versión en minúsculas (<em>am, pm</em>).</td>
</tr>
<tr>
<td><code>Do</code></td>
<td>Día del mes con número ordinal (<em>1st, ..., 31st</em>)</td>
</tr>
</tbody>
</table>
<p>Además de los métodos anteriores, existen formas de crear fechas como las que veremos a continuación. El primero de ellos, crea una fecha a partir de un timestamp (<em>UNIX Epoch</em>), es decir, un <badge-type class="number"></badge-type> que representa el número de <strong>milisegundos</strong> que han pasado desde el <strong>1-ENE-1970</strong> a las <strong>12:00AM</strong> (<em>UTC</em>):</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Timestamp (UNIX Epoch)</span>
<span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Por otro lado, también podemos crear fechas a partir de un <badge-type class="object"></badge-type> donde las claves son la unidad que representa. Como claves se pueden utilizar varias opciones:</p>
<ul>
<li>Plural: <code>years</code>, <code>months</code>, <code>days</code> o <code>dates</code>, <code>hours</code>, <code>minutes</code>, <code>seconds</code> y <code>milliseconds</code>.</li>
<li>Singular: <code>year</code>, <code>month</code>, <code>day</code> o <code>date</code>, <code>hour</code>, <code>minute</code>, <code>second</code> y <code>millisecond</code>.</li>
<li>Abreviación: <code>y</code>, <code>M</code>, <code>d</code>, <code>h</code>, <code>m</code>, <code>s</code> y <code>ms</code>.</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token comment">// Object</span>
<span class="token keyword">import</span> objectSupport <span class="token keyword">from</span> <span class="token string">"dayjs/plugin/objectSupport"</span><span class="token punctuation">;</span>
dayjs<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>objectSupport<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> dateFromObject <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">2022</span><span class="token punctuation">,</span> <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">day</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> dateFromArray <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// import/extend con arraySupport</span></code></pre>
<p>Ten en cuenta que para utilizar el método de objetos, antes hay que importar <code>objectSupport</code> desde la carpeta de plugins de dayjs, y posteriormente extenderlo con <code>dayjs.extend(objectSupport)</code>. En el caso de los arrays habría que hacer lo mismo con el plugin <code>arraySupport</code>.</p>
<blockquote>
<blockquote>
<p>Mucho cuidado al indicar el <strong>mes</strong> de una fecha. Cuando lo indicamos utilizando el Date nativo, o en formatos como el de objetos o array, el <code>0</code> equivale a Enero, mientras que el <code>1</code> a Febrero, etc.</p>
</blockquote>
</blockquote>
<h3 id="formatear-fechas-con-dayjs" tabindex="-1"><a class="header-anchor" href="#formatear-fechas-con-dayjs">Formatear fechas con dayjs</a></h3>
<p>Hasta ahora lo que hemos hecho es crear una fecha, más concretamente, un <badge-type class="object"></badge-type> de fecha de <strong>dayjs</strong> partiendo de prácticamente cualquier tipo de información de entrada (<em>string con diferentes formatos, objeto Date nativo, objeto Javascript, array, etc...</em>). Una vez tenemos ese objeto <strong>dayjs</strong>, lo que probablemente nos interese es mostrar esa información con otro tipo de formato (<em>o el mismo</em>).</p>
<p>Para ello, utilizaremos el método <code>.format()</code> sobre el objeto <strong>dayjs</strong>, al cuál le podemos pasar un <badge-type class="string"></badge-type> indicando el formato de salida que buscamos:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Creamos un objeto dayjs a partir de una fecha</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">"2022-23-01"</span><span class="token punctuation">,</span> <span class="token string">"YYYY-DD-MM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Mostramos esa fecha con el formato indicado</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"DD/MM/YYYY"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "23/01/2022"</span></code></pre>
<p>El <badge-type class="string"></badge-type> indicado en el método <code>.format()</code> es muy parecido al que hablamos anteriormente, pero con algunas diferencias, como los símbolos <code>d</code> / <code>dd</code> / <code>ddd</code> / <code>dddd</code> o <code>h</code> / <code>hh</code>:</p>
<table>
<thead>
<tr>
<th>Símbolo</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>YY</code> / <code>YYYY</code></td>
<td>Año con 2 dígitos (<em>22</em>) / año con 4 dígitos (<em>2022</em>).</td>
</tr>
<tr>
<td><code>M</code> / <code>MM</code></td>
<td>Número del mes (<em>1, 2, 3...</em>) / número del mes con dos dígitos (<em>01, 02, 03...</em>).</td>
</tr>
<tr>
<td><code>MMM</code> / <code>MMMM</code></td>
<td>Nombre del mes abreviado (<em>Jan, Feb...</em>) / nombre del mes (<em>January, February...</em>).</td>
</tr>
<tr>
<td><code>D</code> / <code>DD</code></td>
<td>Día del mes (<em>1, 2, 3...</em>) / día del mes con dos dígitos (<em>01, 02, 03...</em>).</td>
</tr>
<tr>
<td><code>H</code> / <code>HH</code></td>
<td>Hora del día en formato de «24 horas» (<em>0, 1, 2... 23</em>) / versión de 2 dígitos. (<em>00, 01, 02... 23</em>)</td>
</tr>
<tr>
<td><code>h</code> / <code>hh</code></td>
<td>Hora del día en formato de «12 horas» (<em>1, 2, 3... 12</em>) / versión de 2 dígitos. (<em>01, 02, 03... 12</em>)</td>
</tr>
<tr>
<td><code>m</code> / <code>mm</code></td>
<td>Minutos (<em>1, 2, 3...</em>) / minutos con dos dígitos (<em>01, 02, 03...</em>).</td>
</tr>
<tr>
<td><code>s</code> / <code>ss</code></td>
<td>Segundos (<em>1, 2, 3...</em>) / segundos con dos dígitos (<em>01, 02, 03...</em>).</td>
</tr>
<tr>
<td><code>SSS</code></td>
<td>Milisegundos con tres dígitos (<em>001, 002, 003...</em>).</td>
</tr>
<tr>
<td><code>Z</code> / <code>ZZ</code></td>
<td>Diferencia horaria en formato (<em>+02:00</em>) / Diferencia horaria en formato (<em>+0200</em>).</td>
</tr>
<tr>
<td><code>A</code> / <code>a</code></td>
<td>Antes (<em>AM</em>) o después (<em>PM</em>) del mediodía en mayúsculas / Versión en minúsculas (<em>am, pm</em>).</td>
</tr>
<tr>
<td><code>d</code> / <code>dd</code></td>
<td>Día de la semana (<em>0, 1, 2... 6</em>) / Idem, abreviado (<em>Su, Mo... Sa</em>).</td>
</tr>
<tr>
<td><code>ddd</code> / <code>dddd</code></td>
<td>Día de la semana corto (<em>Sun, Mon... Sat</em>) / Idem, completo (<em>Sunday, Monday... Saturday</em>).</td>
</tr>
<tr>
<td><code>Z</code> / <code>ZZ</code></td>
<td>Diferencia horaria en formato <code>+02:00</code> / Diferencia horaria en formato <code>+0200</code>.</td>
</tr>
</tbody>
</table>
<blockquote>
<blockquote>
<p>El método <code>.format()</code> siempre nos devolverá los meses numéricos empezando en 1, ya que está orientado a devolver un <badge-type class="string"></badge-type> que se utilizará para mostrar en la página a los usuarios finales.</p>
</blockquote>
</blockquote>
<p>Ten en cuenta que los objetos de <strong>dayjs</strong> (<em>al contrario que los Date nativos</em>) son inmutables, por lo tanto una vez establecida una fecha no puedes cambiarla. Si deseas modificar una fecha, debes clonar una fecha y utilizar los setters apropiados para hacer las modificaciones correspondientes:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> alternativeDate <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token number">2030</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Usamos year() como setter</span>
<span class="token keyword">const</span> alternativeDate2 <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token number">2030</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Equivalente al anterior</span>
<span class="token keyword">const</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// Usamos year() como getter</span></code></pre>
<p>Tenemos una amplia cantidad de getters y setters en <strong>dayjs</strong>, entre los que podemos encontrar los siguientes:</p>
<table>
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.year(</code><badge-type class="number"></badge-type> <code>value)</code></td>
<td>Obtiene o cambia el año de la fecha utilizada.</td>
</tr>
<tr>
<td><code>.month(</code><badge-type class="number"></badge-type> <code>value)</code></td>
<td>Obtiene o cambia el mes de la fecha utilizada. <strong>Empieza en 0</strong>.</td>
</tr>
<tr>
<td><code>.date(</code><badge-type class="number"></badge-type> <code>value)</code></td>
<td>Obtiene o cambia el día de la fecha utilizada.</td>
</tr>
<tr>
<td><code>.day(</code><badge-type class="number"></badge-type> <code>value)</code></td>
<td>Obtiene o cambia el día de la semana de la fecha utilizada.</td>
</tr>
<tr>
<td><code>.hour(</code><badge-type class="number"></badge-type> <code>value)</code></td>
<td>Obtiene o cambia la hora de la fecha utilizada.</td>
</tr>
<tr>
<td><code>.minute(</code><badge-type class="number"></badge-type> <code>value)</code></td>
<td>Obtiene o cambia los minutos de la fecha utilizada.</td>
</tr>
<tr>
<td><code>.second(</code><badge-type class="number"></badge-type> <code>value)</code></td>
<td>Obtiene o cambia los segundos de la fecha utilizada.</td>
</tr>
<tr>
<td><code>.millisecond(</code><badge-type class="number"></badge-type> <code>value)</code></td>
<td>Obtiene o cambia los milisegundos de la fecha utilizada.</td>
</tr>
<tr>
<td><code>.get(</code> <badge-type class="string"></badge-type><code>unit)</code></td>
<td>Obtiene el valor de la unidad indicada por parámetro.</td>
</tr>
<tr>
<td><code>.set(</code> <badge-type class="string"></badge-type><code>unit, </code><badge-type class="number"></badge-type> <code>value)</code></td>
<td>Cambia el valor de la unidad indicada por parámetro.</td>
</tr>
</tbody>
</table>
<p>A través de plugins se pueden utilizar otros métodos como la semana del año (<em>weekYear</em>), el día del año (<em>dayOfYear</em>), el día del mes en formato alfabético (<em>weekday</em>), etc...</p>
<h3 id="fechas-en-diferentes-idiomas" tabindex="-1"><a class="header-anchor" href="#fechas-en-diferentes-idiomas">Fechas en diferentes idiomas</a></h3>
<p>Con <strong>dayjs</strong> es muy sencillo formatear fechas en diferentes idiomas, como por ejemplo, en español. Para ello, primero debemos importar el idioma que queremos utilizar, y luego indicar a <strong>dayjs</strong> que vamos a utilizar dicho idioma. Se puede hacer de dos formas:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">"dayjs"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> es <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"dayjs/locale/es"</span><span class="token punctuation">;</span>

dayjs<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">"es"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"DD/MMMM/YYYY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>De esta forma, con <code>dayjs.locale(&quot;es&quot;)</code> cargamos el idioma español <strong>de forma global</strong> importado en el módulo <code>es</code> de la linea anterior. Asi pues, todas las fechas que manipulemos después de dicha linea, aparecerán en el idioma seleccionado. Sin embargo, si lo hacemos de la siguiente forma, estaremos utilizando el idioma en la instancia concreta, por lo que solo afectará a ella:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">"dayjs"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> es <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"dayjs/locale/es"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">"es"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"DD/MMMM/YYYY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Las siguientes lineas donde manipulemos fechas, aparecerán en el idioma principal, ya que sólo hemos utilizado el idioma español para esa fecha <code>date</code> concreta.</p>
<p>Además, también podemos utilizar algunos datos locales de apoyo como <strong>nombres de los días de la semana</strong> o <strong>nombres del mes del año</strong>, simplemente importadno el plugin <code>localeData</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">"dayjs"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> es <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"dayjs/locale/es"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> localeData <span class="token keyword">from</span> <span class="token string">"dayjs/plugin/localeData"</span><span class="token punctuation">;</span>

dayjs<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">"es"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dayjs<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>localeData<span class="token punctuation">)</span><span class="token punctuation">;</span>

dayjs<span class="token punctuation">.</span><span class="token function">weekdays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// ["domingo", "lunes", "martes", ..., "sábado"]</span>
dayjs<span class="token punctuation">.</span><span class="token function">weekdaysShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["dom.", "lun.", "mar.", ..., "sáb."]</span>
dayjs<span class="token punctuation">.</span><span class="token function">weekdaysMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ["do", "lu", "ma", "mi", "ju", "vi", "sá"]</span>
dayjs<span class="token punctuation">.</span><span class="token function">monthsShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ["ene", "feb", "mar", "abr", ..., "dic"]</span>
dayjs<span class="token punctuation">.</span><span class="token function">months</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// ["Enero", "Febrero", "Marzo", ..., "Diciembre"]</span></code></pre>
<p>No olvides que tienes que importar la localización (<code>es</code>) y establecerla e importar el plugin <code>localeData</code>, y extender de él.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../fechas-relativas-con-intl/index.htm" title="Fechas relativas con Intl">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Fechas relativas con Intl</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../../regexp/expresiones-regulares/index.htm" title="¿Qué es una expresión regular?">
  <div>
    <span>¿Qué es una expresión regular?</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
