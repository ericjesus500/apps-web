<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>¿Qué es un Map? - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Explico la diferencia que existe entre los objetos de Javascript y las estructuras Map y WeakMap.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="¿Qué es un Map? - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Explico la diferencia que existe entre los objetos de Javascript y las estructuras Map y WeakMap.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/set-map/que-es-map-weakmap/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/set-map/que-es-map-weakmap/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="¿Qué es un Map? - Javascript en español">
  <meta property="twitter:description" content="Explico la diferencia que existe entre los objetos de Javascript y las estructuras Map y WeakMap.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../arrays/que-es/index.htm" title="¿Qué es un Array en Javascript?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../calidad-de-codigo/eslint/index.htm" title="ESLint: Linter Javascript">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Set / Map
      </span>
            <a class="link" href="../que-es-set-weakset/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es un Set?
            </a>
            <a class="link" href="../operaciones-conjuntos/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Set: Operaciones de conjuntos
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es un Map?
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">¿Qué es un Map?</a></h1><h2 class="typewriter">Mapa: Estructura de datos de pares clave-valor</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../operaciones-conjuntos/index.htm">Set: Operaciones de conjuntos</a>
    <a class="current" href="index.htm">¿Qué es un Map?</a>
    <a href="../../calidad-de-codigo/eslint/index.htm">ESLint: Linter Javascript</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Los <code>Map</code> en Javascript son estructuras de datos nativas que permiten implementar una estructura de tipo <strong>mapa</strong>, es decir, una estructuras donde tiene <strong>valores</strong> guardados a través de una <strong>clave</strong> para identificarlos. Comúnmente, esto se denomina <strong>pares clave-valor</strong>.</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">// Map({}) (Mapa vacío)</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// Map({ 1=>"uno" })</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"dos"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"tres"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Map({ 1=>"uno", 2=>"dos", 3=>"tres" })</span>

map<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                     <span class="token comment">// "Map"</span></code></pre>
<p>En este ejemplo, creamos un elemento <code>map</code>, que no es más que un mapa de pares clave-valor. El primer <code>map</code> se define como un mapa vacío, el segundo, es un mapa con un solo elemento, y el tercero con 3 elementos. Para inicializar los mapas con datos, se introduce como parámetro un <a href="../../objetos/iteradores/index.htm">array de entradas</a> (<em>un array de arrays</em>), que en nuestro tercer caso tiene estas combinaciones:</p>
<ul>
<li><strong>Clave</strong>: <badge-type class="number"></badge-type> <code>1</code> =&gt; <strong>Valor</strong>: <badge-type class="string"></badge-type> <code>&quot;uno&quot;</code></li>
<li><strong>Clave</strong>: <badge-type class="number"></badge-type> <code>2</code> =&gt; <strong>Valor</strong>: <badge-type class="string"></badge-type> <code>&quot;dos&quot;</code></li>
<li><strong>Clave</strong>: <badge-type class="number"></badge-type> <code>3</code> =&gt; <strong>Valor</strong>: <badge-type class="string"></badge-type> <code>&quot;tres&quot;</code></li>
</ul>
<p>Por lo tanto, si consultamos <code>map</code> con la clave <code>2</code>, nos devolverá un <badge-type class="string"></badge-type> <code>&quot;dos&quot;</code>.</p>
<h3 id="qué-son-los-map" tabindex="-1"><a class="header-anchor" href="#qué-son-los-map">¿Qué son los Map?</a></h3>
<p>Los tipos de dato <code>Map</code> son muy similares a los <a href="../../objetos/que-son/index.htm">Objetos</a> de Javascript, ya que estos últimos se pueden usar como estructuras de diccionario mediante <strong>pares clave-valor</strong>. Sin embargo, los <code>Object</code> tienen algunas diferencias como que pueden colisionar algunos nombres de claves o que las claves deben ser <badge-type class="string"></badge-type> o <badge-type class="symbol"></badge-type>, entre varias otras.</p>
<p>Una estructura de tipo <code>Map</code> tiene las siguientes propiedades o métodos:</p>
<table>
<thead>
<tr>
<th>Propiedad o Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="number"></badge-type> <code>.size</code></td>
<td>Propiedad que devuelve el número de elementos que tiene el mapa.</td>
</tr>
<tr>
<td><badge-type class="map"></badge-type> <code>.set(key, value)</code></td>
<td>Establece o modifica la clave <code>key</code> con el valor <code>value</code>. <strong>Muta</strong></td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.has(key)</code></td>
<td>Comprueba si <code>key</code> ya existe en el mapa y devuelve si existe o no.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.get(key)</code></td>
<td>Obtiene el valor de la clave <code>key</code> del mapa.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.delete(key)</code></td>
<td>Elimina el elemento con la clave <code>key</code> del mapa. Devuelve si lo eliminó correctamente.</td>
</tr>
<tr>
<td><code>.clear()</code></td>
<td>Vacía el mapa completamente.</td>
</tr>
</tbody>
</table>
<p>Vamos a analizar los diferentes métodos y propiedades que tienen los mapas.</p>
<h3 id="propiedad-size" tabindex="-1"><a class="header-anchor" href="#propiedad-size">Propiedad size</a></h3>
<p>Si quieres saber cuántos elementos tiene un mapa, puedes utilizar la propiedad <code>.size</code>, que funciona de forma muy similar al <code>.length</code> de los array, por ejemplo.</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token comment">// 0</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"dos"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token comment">// 2</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"dos"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"tres"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token comment">// 2 (El 1->"tres" sobreescribe al anterior)</span></code></pre>
<p>Observa que si introducimos un nuevo par clave-valor que tiene la misma clave que otro (<em>tenemos dos que comparten la clave <code>1</code></em>), se sobreescribirá. No pueden existir dos pares clave-valor con la misma clave.</p>
<h3 id="métodos" tabindex="-1"><a class="header-anchor" href="#métodos">Métodos</a></h3>
<p>Veamos ahora los diferentes métodos que tienen las estructuras de conjuntos <code>Map</code>.</p>
<h4 id="establecer-elementos-set" tabindex="-1"><a class="header-anchor" href="#establecer-elementos-set">Establecer elementos (set)</a></h4>
<p>El método <code>.set()</code> fija un par clave-valor en el mapa. Observa que hay un pequeño matiz muy importante de diferencia entre el concepto «añadir» (<em><code>.add()</code></em>) y el concepto «establecer» o «fijar» (<em><code>.set()</code></em>):</p>
<ul>
<li>Si usamos <code>.set()</code> para una <strong>clave</strong> que no existe, se añade al mapa.</li>
<li>Si usamos <code>.set()</code> para una <strong>clave</strong> que ya existe, la sobreescribe.</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"cinco"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"letra A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"cinco sobreescrito"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Sobreescribe el anterior</span>

map<span class="token punctuation">;</span>            <span class="token comment">// Map({ 5=>"cinco sobreescrito", "A"=>"letra A" })</span></code></pre>
<p>Ten en cuenta que al contrario que los <badge-type class="object"></badge-type>, los <badge-type class="map"></badge-type> pueden utilizar como clave cualquier tipo de dato. En el caso de los <badge-type class="object"></badge-type> debes utilizar un <badge-type class="string"></badge-type> o un <badge-type class="symbol"></badge-type>.</p>
<h4 id="comprobar-si-existen-has" tabindex="-1"><a class="header-anchor" href="#comprobar-si-existen-has">Comprobar si existen (has)</a></h4>
<p>Para comprobar si un elemento existe en un mapa, se debe hacer a través de su <strong>clave</strong>, y se utiliza el método <code>.has()</code>.Este método devuelve un <badge-type class="boolean"></badge-type>, por lo que si existe la clave, nos devolverá <code>true</code>, y en caso contrario, nos devolverá <code>false</code>.</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"dos"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"tres"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// true</span>
map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">"treinta y cuatro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span></code></pre>
<p>Recuerda que si estás utilizando tipos de datos más complejos como <badge-type class="object"></badge-type> o <badge-type class="array"></badge-type>, deberías tenerlos almacenados en una variable, ya que si los creas al momento de pasarlos por parámetro, estarás pasando su referencia, y podrían no ser los mismos objetos aunque los escribas exactamente igual.</p>
<h4 id="borrar-elementos-delete" tabindex="-1"><a class="header-anchor" href="#borrar-elementos-delete">Borrar elementos (delete)</a></h4>
<p>Si necesitamos borrar algún elemento del mapa, lo podemos hacer mediante el método <code>.delete()</code>. Devuelve un <badge-type class="boolean"></badge-type> a <code>true</code> si lo consigue eliminar, en caso contrario, devolverá <code>false</code>.</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"dos"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"tres"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>
map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>

map<span class="token punctuation">;</span>              <span class="token comment">// Map({ 1=>"uno", 2=>"dos" })</span></code></pre>
<h4 id="vacíar-conjunto-clear" tabindex="-1"><a class="header-anchor" href="#vacíar-conjunto-clear">Vacíar conjunto (clear)</a></h4>
<p>Por último, utilizando el método <code>.clear()</code> borraremos todos los elementos del mapa, dejándolo vacío. Este método no devuelve nada.</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"dos"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"tres"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span>size<span class="token punctuation">;</span>         <span class="token comment">// 0</span></code></pre>
<h3 id="convertir-a-arrays" tabindex="-1"><a class="header-anchor" href="#convertir-a-arrays">Convertir a Arrays</a></h3>
<p>Si tenemos claro el proceso de <a href="../../arrays/desestructuracion-arrays/index.htm">desestructuración</a>, podemos convertir los <code>Map</code> en <badge-type class="array"></badge-type> o incluso en <badge-type class="object"></badge-type> de forma muy sencilla. Eso sí, antes te recomiendo mirarte el artículo de <a href="../../objetos/iteradores/index.htm">Iteradores en Objetos</a>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"dos"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"tres"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span>size<span class="token punctuation">;</span>                   <span class="token comment">// 3 (Contiene 3 elementos)</span>
map<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">;</span>       <span class="token comment">// "Map"</span>
<span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">structuredClone</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

entries<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">;</span>   <span class="token comment">// "Array"</span>
entries<span class="token punctuation">;</span>                    <span class="token comment">// [[1, "uno"], [2, "dos"], [3, "tres"]]</span></code></pre>
<blockquote>
<p>Recuerda utilizar <code>structuredClone()</code> para clonar la estructura si tiene elementos anidados, ya que sino sólo realizará una <strong>copia superficial</strong> y utilizará referencias para los elementos anidados.</p>
</blockquote>
<p>Este array de entradas que nos da como resultado, lo podríamos utilizar para crear un nuevo map, o incluso un objeto:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">;</span>      <span class="token comment">// Map({ 1=>"uno", 2=>"dos", 3=>"tres" })</span>

<span class="token keyword">const</span> object <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
object<span class="token punctuation">;</span>   <span class="token comment">// { 1: "uno", 2: "dos", 3: "tres" }</span></code></pre>
<blockquote>
<blockquote>
<blockquote>
<p>Aún así, recuerda que habría ciertos <code>Map</code> que quizás podrían dar conflictos al pasar a objeto, como por ejemplo, si tienes una clave <code>toString</code>. Más adelante comentaremos las diferencias.</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="qué-son-los-weakmap" tabindex="-1"><a class="header-anchor" href="#qué-son-los-weakmap">¿Qué son los WeakMap?</a></h3>
<p>Al igual que ocurre con los <code>Set</code> y los <code>WeakSet</code>, con los <code>Map</code> tenemos una estructura denominada <code>WeakMap</code>. La idea es la misma: se trata de una estructura derivada, muy similar a los <code>Map</code>, pero con algunas diferencias.</p>
<h4 id="diferencias-con-los-map" tabindex="-1"><a class="header-anchor" href="#diferencias-con-los-map">Diferencias con los Map</a></h4>
<p>Al margen de algunas diferencias que detallaremos más adelante, la diferencia principal de los <code>Map</code> con los <code>WeakMap</code> es que estos últimos, no permiten utilizar tipos primitivos (<badge-type class="boolean"></badge-type>, <badge-type class="string"></badge-type>, <badge-type class="number"></badge-type>) como <strong>clave</strong>, mientras que el <code>Map</code> si lo permite:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// *** Map</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// OK</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// OK</span>

<span class="token comment">// *** WeakMap</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ERROR: Uncaught TypeError: Invalid value used in weak map key</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"uno"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span></code></pre>
<p>La razón de utilizar <code>WeakMap</code> en lugar de <code>Map</code>, es porque los primeros utilizan <strong>referencias débiles</strong> a un objeto, o lo que es lo mismo, si ese objeto no se utiliza (<em>no está referenciado</em>) en ninguna otra parte del código, se eliminará del <code>WeakMap</code> automáticamente y en cuanto el <strong>Garbage Collector</strong> (<em>Recolector de basura</em>) lo decida, lo borrará de memoria.</p>
<h3 id="tabla-de-resumen-de-diferencias" tabindex="-1"><a class="header-anchor" href="#tabla-de-resumen-de-diferencias">Tabla de resumen de diferencias</a></h3>
<p>A continuación, una tabla resumen de las diferencias entre <code>Map</code>, <code>WeakMap</code> y <code>Object</code>:</p>
<table class="compact">
<thead>
<tr>
<th>Característica</th>
<th style="text-align:center">Map</th>
<th style="text-align:center">WeakMap</th>
<th style="text-align:center">Object</th>
</tr>
</thead>
<tbody>
<tr>
<td>Se pueden insertar claves repetidas</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
</tr>
<tr>
<td>Se pueden insertar claves con tipos primitivos</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">Sólo <badge-type class="string"></badge-type> o <badge-type class="symbol"></badge-type></td>
</tr>
<tr>
<td>Si no se usa el elemento, se elimina del map</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
</tr>
<tr>
<td>Se puede convertir a array (es iterable)</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌ <code>Object.entries(obj)</code></td>
</tr>
<tr>
<td>Pueden colisionar algunas claves <sup>*</sup></td>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td>Las claves garantizan un orden por inserción</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
</tr>
<tr>
<td>Propiedad <code>.size</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌ <code>Object.keys(obj).length</code></td>
</tr>
<tr>
<td>Método <code>.set()</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌ Se usa asignación por clave</td>
</tr>
<tr>
<td>Método <code>.get()</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌ Se usa acceso a la clave</td>
</tr>
<tr>
<td>Método <code>.has()</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌ <code>Object.keys(obj).includes(key)</code></td>
</tr>
<tr>
<td>Método <code>.delete()</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
</tr>
<tr>
<td>Método <code>.clear()</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
</tr>
</tbody>
</table>
<p>Respecto a lo que se menciona de que pueden colisionar algunas claves, es debido a que los <badge-type class="object"></badge-type> comparten claves y propiedades del objeto, ya que se trata de una estructura de datos que mezcla propiedades, métodos y los datos del elemento. Sin embargo, en el caso de los maps, se separa la API de la estructura de los datos almacenados.</p>
<p>Observa el siguiente ejemplo:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
object<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// ERROR: obj.toString is not a function</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// OK: "[object Map]"</span></code></pre>
<p>Aquí se puede ver, como almacenando una propiedad llamada <code>toString</code> en el objeto, colisiona con el método ya existente <code>.toString()</code>, sobreescribiéndolo y dando problemas a la hora de convertir el objeto a <badge-type class="string"></badge-type>. Sin embargo, con los <badge-type class="map"></badge-type> no hay problema.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../operaciones-conjuntos/index.htm" title="Set: Operaciones de conjuntos">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Set: Operaciones de conjuntos</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../../calidad-de-codigo/eslint/index.htm" title="ESLint: Linter Javascript">
  <div>
    <span>ESLint: Linter Javascript</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
