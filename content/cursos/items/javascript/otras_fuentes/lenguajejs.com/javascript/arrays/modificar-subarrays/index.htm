<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Modificar o crear subarrays - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="En Javascript podemos crear fragmentos de array (subarrays) a partir de un array más grande o alterando el array original. Vamos a verlos.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Modificar o crear subarrays - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="En Javascript podemos crear fragmentos de array (subarrays) a partir de un array más grande o alterando el array original. Vamos a verlos.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/arrays/modificar-subarrays/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/arrays/modificar-subarrays/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Modificar o crear subarrays - Javascript en español">
  <meta property="twitter:description" content="En Javascript podemos crear fragmentos de array (subarrays) a partir de un array más grande o alterando el array original. Vamos a verlos.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../objetos/que-son/index.htm" title="¿Qué son los objetos?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../set-map/que-es-set-weakset/index.htm" title="¿Qué es un Set?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Arrays
      </span>
            <a class="link" href="../que-es/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es un Array en Javascript?
            </a>
            <a class="link" href="../buscar-y-comprobar/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Buscar elementos en un array
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Modificar o crear subarrays
            </a>
            <a class="link" href="../ordenacion/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Ordenación de un array
            </a>
            <a class="link" href="../array-functions/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Array functions
            </a>
            <a class="link" href="../desestructuracion-arrays/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Desestructuración de arrays
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">Modificar o crear subarrays</a></h1><h2 class="typewriter">Alterar arrays existentes o crear fragmentos de array</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../buscar-y-comprobar/index.htm">Buscar elementos en un array</a>
    <a class="current" href="index.htm">Modificar o crear subarrays</a>
    <a href="../ordenacion/index.htm">Ordenación de un array</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Hay situaciones en las que tenemos un <badge-type class="array"></badge-type> y queremos crear nuevos <strong>subarrays</strong>, es decir, un pequeño fragmento del <badge-type class="array"></badge-type> original, o simplemente <strong>modificar</strong> el array original para hacer ciertos cambios, pero de una forma más general y no tener que hacerlo elemento a elemento.</p>
<p>Para ello, existen varios métodos relacionados, entre los que se encuentran los siguientes:</p>
<table>
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="array"></badge-type> <code>.slice(start, end)</code> ✅</td>
<td>Devuelve los elementos desde la posición <code>start</code> hasta <code>end</code> (excluído).</td>
</tr>
<tr class="danger">
<td><badge-type class="array"></badge-type> <code>.splice(start, size)</code> ⚠️</td>
<td>Devuelve los <code>size</code> siguientes elementos desde la posición <code>start</code>.</td>
</tr>
<tr class="danger">
<td><badge-type class="array"></badge-type> <code>.splice(start, size, e1, e2...)</code> ⚠️</td>
<td>Idem. Además, luego inserta <code>e1</code>, <code>e2</code>... en la posición <code>start</code>.</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>.toSpliced(start, size)</code> <badge-es class="es2023"></badge-es> ✅</td>
<td>Idem a <code>splice(start, size)</code>, pero sin mutar el array original.</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>.toSpliced(st, sz, e1, e2...)</code> <badge-es class="es2023"></badge-es> ✅</td>
<td>Idem a <code>splice(st, sz, e1, e2..)</code>, pero sin mutar el array original.</td>
</tr>
<tr class="danger">
<td><badge-type class="array"></badge-type> <code>.copyWithin(pos, start, end)</code> <badge-es class="es2015"></badge-es> ⚠️</td>
<td>Muta el array, cambiando en <code>pos</code> y copiando desde <code>start</code> a <code>end</code>.</td>
</tr>
<tr class="danger">
<td><badge-type class="array"></badge-type> <code>.fill(element, start, end)</code> <badge-es class="es2015"></badge-es> ⚠️</td>
<td>Cambia los elementos del <badge-type class="array"></badge-type> por <code>element</code> desde <code>start</code> hasta <code>end</code>.</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>.with(index, item)</code> <badge-es class="es2023"></badge-es> ✅</td>
<td>Devuelve una copia del original, con el elemento <code>index</code> modificado.</td>
</tr>
</tbody>
</table>
<ul>
<li><sup>✅</sup> El array original está seguro (<em>no muta</em>).</li>
<li><sup>⚠️</sup> El array original cambia (<em>muta</em>).</li>
</ul>
<p>Vamos a ir explicándolos uno por uno.</p>
<h3 id="crear-fragmento-con-slice" tabindex="-1"><a class="header-anchor" href="#crear-fragmento-con-slice">Crear fragmento con <code>.slice()</code></a></h3>
<p>El método <code>.slice()</code> devuelve los elementos del array desde la posición <code>start</code> hasta la posición <code>end</code>, permitiendo crear un <strong>nuevo array</strong> más pequeño con ese grupo de elementos. Recuerda que las posiciones empiezan a contar desde <code>0</code>. En el caso de que no se proporcione el parámetro <code>end</code>, se devuelven todos los elementos desde la posición <code>start</code> hasta el final del array.</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

letters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// ["d", "e"]</span>
letters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ["a", "b"]</span>
letters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ["e"]</span>
letters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ["c", "d", "e"]</span>
letters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ["d", "e"]</span></code></pre>
<p>Observa que en el primer caso, al indicar un sólo parámetro, <code>end</code> es la posición del último elemento del array. En el último caso, al indicar un parámetro negativo, se empieza a contar desde el final. Recuerda que en todo momento, el <badge-type class="array"></badge-type> original <code>letters</code> no sufre modificaciones.</p>
<h3 id="crear-fragmento-con-splice-o-tospliced" tabindex="-1"><a class="header-anchor" href="#crear-fragmento-con-splice-o-tospliced">Crear fragmento con <code>.splice()</code> o <code>.toSpliced()</code></a></h3>
<p>Por otro lado, el método <code>.splice()</code> realiza algo parecido a <code>.slice()</code>. Veamos las diferencias antes de continuar:</p>
<ul>
<li>Método <code>.slice()</code>: Obtiene un subarray desde una <strong>posición inicial</strong> a una <strong>final</strong></li>
<li>Método <code>.splice()</code>: Obtiene un subarray desde una <strong>posición inicial</strong>, con un <strong>tamaño concreto</strong></li>
</ul>
<blockquote>
<blockquote>
<blockquote>
<p>⚠️ El método <code>.splice()</code> tiene una gran diferencia respecto al anterior: <strong>muta el array original</strong>.</p>
</blockquote>
</blockquote>
</blockquote>
<p>Observa que el método <code>.splice()</code>, en su segundo parámetro, <code>size</code> no es la posición final del subarray (<em>como ocurre con <code>slice</code></em>), sino el tamaño del subarray final, es decir, el número de elementos que se van a obtener desde la posición <code>start</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

letters<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Crea y devuelve ["a", "b"]</span>
letters                     <span class="token comment">// Altera el array original: ["c", "d", "e"]</span>

<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

letters<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Crea y devuelve ["c"]</span>
letters                     <span class="token comment">// Altera el array original ["a", "b", "d", "e"]</span></code></pre>
<p>Es decir, con el método <code>.splice()</code> devolvemos un <badge-type class="array"></badge-type> con los elementos eliminados desde la posición <code>start</code> hasta la posición <code>start + size</code>. Por otro lado, el array original <strong>muta</strong> y se eliminan dichos elementos.</p>
<p>Si no queremos mutar el array original, podemos utilizar <code>.toSpliced()</code>, que es un método nuevo que funciona de forma muy similar a <code>.spliced()</code>, pero sin alterar el array original. Mucho cuidado a la hora de utilizarlo como reemplazo, ya que este método devuelve como queda el array final, pero no devuelve lo que hemos extraído.</p>
<p>Observa como funciona en este fragmento de código:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

letters<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Crea y devuelve ["c", "d", "e"]</span>
letters                       <span class="token comment">// El array original no cambia</span>

letters<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Crea y devuelve ["a, "b, "d", "e"]</span>
letters                       <span class="token comment">// El array original no cambia</span></code></pre>
<p>El soporte del método <code>.toSpliced()</code> es bastante bueno hoy en día:</p>
<p><caniuse-support title="Javascript builtins Array toSpliced" feature="mdn-javascript_builtins_Array_toSpliced" edge="110/y" firefox="115/y" chrome="110/y" safari="16/y" opera="96/y" ios_saf="16/y" and_chr="110/y" and_ff="115/y">
</caniuse-support></p>
<blockquote>
<p>En ambos métodos, es posible también indicar una serie de parámetros opcionales después de los mencionados, que permitirán además de la extracción de elementos, <strong>insertar dichos elementos</strong> justo donde hicimos la extracción.</p>
</blockquote>
<h3 id="diferencias-entre-slice-y-splice" tabindex="-1"><a class="header-anchor" href="#diferencias-entre-slice-y-splice">Diferencias entre <code>.slice()</code> y <code>.splice()</code></a></h3>
<p>Veamos un ejemplo ilustrativo para entender bien la diferencia entre ambos:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// .slice() no modifica el array</span>
letters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Devuelve ['c', 'd']. El array no se modifica.</span>

<span class="token comment">// .splice() si modifica el array</span>
letters<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Devuelve ['c', 'd']. Ahora array = ['a', 'b', 'e']</span>
letters<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Devuelve []. Ahora array = ['a', 'z', 'x', 'b', 'e']</span></code></pre>
<p>Observa que en el último caso de <code>.splice()</code>, además de extraer elementos, se insertan nuevos elementos. A raíz de este último ejemplo, mencionar que también podemos insertar elementos en una posición concreta del array de dos formas alternativas:</p>
<ul>
<li>Utilizando <code>.slice()</code> y <code>.concat()</code> (<em>no se muta el array original</em>)</li>
<li>Utilizando <code>.splice()</code> y <a href="../desestructuracion-arrays/index.htm">desestructuración</a> (<em>se muta el array original</em>)</li>
</ul>
<p>Veamos un ejemplo de cada forma, primero, utilizando <code>.slice()</code> y <code>.concat()</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> middlePart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> firstPart <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [1, 2, 3]</span>
<span class="token keyword">const</span> lastPart <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [8, 9, 10]</span>

firstPart<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>middlePart<span class="token punctuation">,</span> lastPart<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
numbers                                  <span class="token comment">// [1, 2, 3, 8, 9, 10] (numbers no ha mutado)</span></code></pre>
<p>Ahora, otro ejemplo, utilizando <code>.splice()</code> y desestructuración. Ten en cuenta que el resultado en esta ocasión lo tendremos en la constante <code>numbers</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> middlePart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

numbers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>middlePart<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [] (Elementos eliminados, en este caso, ninguno)</span>
numbers                               <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] (numbers ha mutado)</span></code></pre>
<p>Como se puede ver, se ha hecho la misma operación de dos formas diferentes.</p>
<h3 id="repetir-fragmento-con-copywithin" tabindex="-1"><a class="header-anchor" href="#repetir-fragmento-con-copywithin">Repetir fragmento con <code>.copyWithin()</code></a></h3>
<p>Es posible tener un array al que queremos hacer ciertas modificaciones donde <code>.slice()</code> y <code>.splice()</code> se quedan cortos (<em>o no resultan cómodos</em>). Veamos algunos métodos introducidos en <strong>ECMAScript</strong> <badge-es class="es2015"></badge-es> que nos permiten crear una versión modificada de un array:</p>
<p>El primero de ellos, <code>copyWithin(pos, start, end)</code> nos permite alterar el array, de modo que, empezando en la posición <code>pos</code>, copiará los elementos que están desde la posición <code>start</code> hasta la posición <code>end</code>. El parámetro <code>end</code> es opcional, de modo que si no se indica, se asume que <code>end</code> es el tamaño del array.</p>
<p>Veamos algunos ejemplos que alteran sucesivamente el array <code>letters</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Estos métodos modifican el array original</span>
letters<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ["a", "b", "c", "a", "b", "c"]</span>
letters<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// ["a", "b", "c", "b", "c", "a"]</span>
letters<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ["a", "b", "c", "b", "a", "a"]</span></code></pre>
<blockquote>
<p>Ten en cuenta que la constante <code>letters</code> se va alterando en cada ejecución del método <code>.copyWithin()</code>, ya que no sólo devuelve el array, sino que <strong>muta</strong> el original. Considera utilizar <code>structuredClone()</code> si quieres crear un nuevo array sin mutar el original: <a href="../../objetos/clonar-o-copiar-elementos/index.htm">clonar objetos en Javascript</a>.</p>
</blockquote>
<p>Algo equivalente a lo anterior, pero sin mutar el array original, ni usar el <code>structuredClone()</code>, podría ser realizar lo siguiente:</p>
<ul>
<li>Obtenemos el fragmento desde la posición <code>0</code> hasta la <code>1</code>, es decir: <code>[&quot;A&quot;]</code></li>
<li>Le concatenamos los siguientes fragmentos.</li>
<li>Obtenemos el fragmento desde la posición <code>4</code> hasta la <code>6</code>, es decir: <code>[&quot;E&quot;, &quot;F&quot;]</code></li>
<li>Obtenemos el fragmento desde la posición <code>1</code> más la diferencia entre <code>6-4</code> hasta el final: <code>[&quot;D&quot;, &quot;E&quot;, &quot;F&quot;]</code></li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// ["A", "E", "F", "D", "E", "F"]</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["A", "E", "F", "D", "E", "F"]</span></code></pre>
<p>Esta última forma tampoco muta el array original, pero obviamente, es más compleja de escribir.</p>
<h3 id="reducir-el-tamaño-de-un-array" tabindex="-1"><a class="header-anchor" href="#reducir-el-tamaño-de-un-array">Reducir el tamaño de un array</a></h3>
<p>También, en ciertos casos, nos podría interesar reducir el tamaño de un array para quedarnos con sus primeros elementos y descartar el resto. En el siguiente ejemplo, creamos un nuevo <badge-type class="array"></badge-type> con <code>.slice()</code>. Dicho array es una versión reducida del array original que teníamos en un principio:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Mediante slice()</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

newNumbers    <span class="token comment">// [1, 2, 3, 4], numbers no cambia</span></code></pre>
<p>Sin embargo, hay una forma muy sencilla y rápida de hacer lo mismo, que es modificar directamente el tamaño del array mediante la propiedad <code>.length</code>. Por ejemplo, hacer un <code>numbers.length = 4</code> en un array de 8 elementos, reducirá el array a los primeros 4 elementos:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Mediante .length</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
numbers<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

numbers       <span class="token comment">// [1, 2, 3, 4], numbers cambia</span></code></pre>
<p>En este último caso no estamos creando un nuevo array, sino que reutilizamos el que ya teníamos, reduciendo su tamaño y descartando el resto de elementos.</p>
<h3 id="rellenar-un-array-con-fill" tabindex="-1"><a class="header-anchor" href="#rellenar-un-array-con-fill">Rellenar un array con <code>.fill()</code></a></h3>
<p>Existe un método que nos permite <strong>rellenar</strong> el <badge-type class="array"></badge-type> con los elementos indicados. Se le puede indicar unos parámetros opcionales <code>start</code> y <code>end</code> para establecer la posición de inicio y/o fin donde queremos rellenar, y así sólo alterar un fragmento del array.</p>
<blockquote>
<blockquote>
<blockquote>
<p>⚠️ Ten en cuenta que con <code>.fill()</code> estamos <strong>alterando</strong> el <badge-type class="array"></badge-type>.</p>
</blockquote>
</blockquote>
</blockquote>
<p>Veamos algunos ejemplos:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Estos métodos modifican el array original</span>

letters<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"Z"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// ["Z", "Z", "Z", "Z", "Z", "f"]</span>
letters<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ["AA", "AA", "Z", "Z", "Z", "f"]</span>
letters<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// [1, 1, 1, 1, 1]</span>
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// [5, 5, 5, 5, 5]</span></code></pre>
<p>Observa que en el último caso, con <code>new Array(5)</code> creamos un array de 5 elementos undefined y lo rellenamos con números <code>5</code> con el método <code>.fill()</code>.</p>
<p>También podríamos utilizar un enfoque más <strong>funcional</strong> y hacer algo similar con el método <code>.map()</code>, uno de los métodos que tienen los <badge-type class="array"></badge-type>. La diferencia es que en este caso, <strong>no se muta</strong> el <badge-type class="array"></badge-type> original, y por otro lado, devolvemos el nuevo <badge-type class="array"></badge-type> construido:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

elements<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// [10, 10, 10, 10, 10]</span>
elements<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Sin mutar el original</span>

<span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

elements<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// [1, 2, 10, 10, 5]</span>
elements<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=></span> <span class="token operator">!</span>element <span class="token operator">?</span> <span class="token number">10</span> <span class="token operator">:</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Sin mutar el original</span></code></pre>
<blockquote>
<p>Si te interesa este enfoque, hablamos sobre ello más adelante, en el tema <a href="../array-functions/index.htm">Array functions</a>.</p>
</blockquote>
<h3 id="el-método-with" tabindex="-1"><a class="header-anchor" href="#el-método-with">El método <code>.with()</code></a></h3>
<p>El nuevo método <code>.with()</code> nos proporciona una forma donde podemos hacer una pequeña modificación en un array, sin que alteremos el original. Observa el siguiente fragmento de código:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token comment">// Modificamos el elemento en la posición 0</span>

elements<span class="token punctuation">;</span>   <span class="token comment">// ["a", "B", "C", "D", "E"];</span></code></pre>
<p>Hemos realizado esta tarea en varios pasos y hemos mutado la estructura original. Sin embargo, con el método <code>with()</code> tenemos varias ventajas, ya que podemos realizar la misma tarea de una sola vez, <strong>sin mutar el array original</strong>. De hecho, podemos incluso encadenar múltiples llamadas a <code>.with()</code> y realizar varios cambios, como se ve en la segunda parte:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Ejemplo 1: Reemplazo con with()</span>
<span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

elements<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["a", "B", "C", "D", "E"]</span>

<span class="token comment">// Ejemplo 2: Reemplazo múltiple con with()</span>
<span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

elements<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["a", "B", "c", "D", "e"]</span></code></pre>
<p>Lo importante de usar <code>.with()</code> es que el array original no muta y permanece intacto, simplemente se crea un nuevo array. El soporte en navegadores del método <code>.with()</code> es bastante bueno en la actualidad:</p>
<p><caniuse-support title="Javascript builtins Array with" feature="mdn-javascript_builtins_Array_with" edge="110/y" firefox="115/y" chrome="110/y" safari="16/y" opera="96/y" ios_saf="16/y" and_chr="110/y" and_ff="115/y">
</caniuse-support></p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../buscar-y-comprobar/index.htm" title="Buscar elementos en un array">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Buscar elementos en un array</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../ordenacion/index.htm" title="Ordenación de un array">
  <div>
    <span>Ordenación de un array</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
