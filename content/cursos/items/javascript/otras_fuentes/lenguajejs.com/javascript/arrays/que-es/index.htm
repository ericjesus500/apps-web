<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>¿Qué es un Array en Javascript? - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Los arrays son variables especiales que pueden almacenar una colección o agrupación de valores de diferente naturaleza en su interior.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="¿Qué es un Array en Javascript? - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/arrays/que-es/arrays.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Los arrays son variables especiales que pueden almacenar una colección o agrupación de valores de diferente naturaleza en su interior.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/arrays/que-es/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/arrays/que-es/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="¿Qué es un Array en Javascript? - Javascript en español">
  <meta property="twitter:description" content="Los arrays son variables especiales que pueden almacenar una colección o agrupación de valores de diferente naturaleza en su interior.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/arrays/que-es/arrays.png">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../objetos/que-son/index.htm" title="¿Qué son los objetos?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../set-map/que-es-set-weakset/index.htm" title="¿Qué es un Set?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Arrays
      </span>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es un Array en Javascript?
            </a>
            <a class="link" href="../buscar-y-comprobar/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Buscar elementos en un array
            </a>
            <a class="link" href="../modificar-subarrays/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Modificar o crear subarrays
            </a>
            <a class="link" href="../ordenacion/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Ordenación de un array
            </a>
            <a class="link" href="../array-functions/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Array functions
            </a>
            <a class="link" href="../desestructuracion-arrays/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Desestructuración de arrays
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">¿Qué es un Array en Javascript?</a></h1><h2 class="typewriter">Colección de datos en una estructura ordenada</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../../objetos/iteradores/index.htm">Iteradores de objetos</a>
    <a class="current" href="index.htm">¿Qué es un Array en Javascript?</a>
    <a href="../buscar-y-comprobar/index.htm">Buscar elementos en un array</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>A medida que trabajamos en nuestro código, se hace necesario agrupar valores en una misma variable, para representar conjuntos de datos con cierta relación entre sí. Para ello, tenemos la opción de crear <strong>objetos</strong>, o unas variables más sencillas llamadas <strong>arrays</strong>.</p>
<h3 id="qué-es-un-array" tabindex="-1"><a class="header-anchor" href="#qué-es-un-array">¿Qué es un array?</a></h3>
<p>Un <badge-type class="array"></badge-type> es una colección o agrupación de elementos en una misma variable, cada uno de ellos ubicado por la posición que ocupa en el array. En algunas ocasiones también se les suelen llamar <strong>arreglos</strong> o <strong>vectores</strong>. En Javascript, se pueden definir de varias formas:</p>
<table>
<thead>
<tr>
<th>Constructor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="array"></badge-type> <code>new Array(</code><badge-type class="number"></badge-type><code>size)</code></td>
<td>Crea un array vacío de tamaño <code>size</code>. Sus valores no están definidos, pero son <badge-type class="undefined"></badge-type>.</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>new Array(e1, e2...)</code></td>
<td>Crea un array con los elementos indicados.</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>[e1, e2...]</code></td>
<td>Simplemente, los elementos dentro de corchetes: <code>[]</code>. <strong>Notación preferida</strong>.</td>
</tr>
</tbody>
</table>
<p>Por ejemplo, podríamos tener un array que en su primera posición tenemos el <badge-type class="string"></badge-type> 'a', en la segunda el <badge-type class="string"></badge-type> 'b' y en la tercera el <badge-type class="string"></badge-type> 'c'. En Javascript, esto se crearía de esta forma:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Forma tradicional (no se suele usar en Javascript)</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Array con 3 elementos</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// Array vacío de tamaño 3</span>

<span class="token comment">// Mediante literales (notación preferida)</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// Array con 3 elementos</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">// Array vacío (0 elementos)</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// Array mixto (String, Number, Boolean)</span></code></pre>
<p>Al contrario que muchos otros lenguajes de programación, Javascript permite que se puedan realizar arrays de <strong>tipo mixto</strong>, no siendo obligatorio que todos los elementos sean del mismo tipo de dato.</p>
<blockquote>
<blockquote>
<p><strong>OJO</strong>: Al crear un array con <code>new Array(size)</code> hay varios matices que merece la pena mencionar. Lo primero, si sólo se indica un parámetro numérico <code>size</code>, Javascript creará un array vacío de <code>size</code> elementos. Es decir, no es lo mismo que <code>const a = [3]</code>, donde creamos un array con un elemento <code>3</code>. Por otro lado, <code>new Array(size)</code> realmente crea un array vacío que aún no ha sido rellenado con nada (<em>esto hace que sea más óptimo para arrays grandes</em>) y aunque es equivalente, no es exactamente igual <code>new Array(3)</code> que <code>[undefined, undefined, undefined]</code>.</p>
</blockquote>
</blockquote>
<h3 id="acceso-a-elementos-del-array" tabindex="-1"><a class="header-anchor" href="#acceso-a-elementos-del-array">Acceso a elementos del array</a></h3>
<p>Al igual que los <badge-type class="string"></badge-type>, saber el número elementos que tiene un array es muy sencillo. Sólo hay que acceder a la propiedad <code>.length</code>, que nos devolverá el número de elementos existentes en un array:</p>
<table>
<thead>
<tr>
<th>Forma</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="number"></badge-type> <code>.length</code></td>
<td>Propiedad que devuelve el número de elementos del array.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>[pos]</code></td>
<td>Operador que devuelve (o modifica) el elemento número <code>pos</code> del array.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.at(pos)</code> <badge-es class="es2022"></badge-es></td>
<td>Método que devuelve el elemento en la posición <code>pos</code>. Números negativos en orden inverso.</td>
</tr>
</tbody>
</table>
<p>Veamos como funcionan.</p>
<h4 id="el-operador" tabindex="-1"><a class="header-anchor" href="#el-operador">El operador <code>[]</code></a></h4>
<p>Por otro lado, si lo que queremos es acceder a un elemento específico del array, no hay más que utilizar el operador <code>[]</code>, al igual que lo podríamos hacer con los <badge-type class="string"></badge-type> para acceder a un carácter concreto. En este caso, accedemos a la posición del elemento que queremos recuperar sobre el array:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

letters<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment">// 3</span>
letters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 'a'</span>
letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 'c'</span>
letters<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// undefined</span></code></pre>
<p>Recuerda que las posiciones empiezan a contar desde <code>0</code> y que si intentamos acceder a una posición que no existe (<em>mayor del tamaño del array</em>), nos devolverá un <badge-type class="undefined"></badge-type>.</p>
<p>El operador <code>[]</code> no sólo nos permite obtener o acceder a un elemento del array, sino que también nos permite modificar un elemento específico del array, si utilizamos la asignación:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

letters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Z"</span><span class="token punctuation">;</span>  <span class="token comment">// Devuelve "Z" y modifica letters a ["a", "Z", "c"]</span>
letters<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"D"</span><span class="token punctuation">;</span>  <span class="token comment">// Devuelve "D" y modifica letters a ["a", "Z", "c", "D"]</span>
letters<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>  <span class="token comment">// Devuelve "A" y modifica letters a ["a", "Z", "c", "D", undefined, "A"]</span></code></pre>
<p>Ten en cuenta que con el nuevo método <code>.with()</code>, se puede hacer esto de una forma más cómoda y sin modificar el array original. Permite encadenar múltiples operaciones, pero ten en cuenta que sólo modifica, no se pueden añadir elementos que no existen antes en el array:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

letters<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Devuelve "Z" y modifica letters a ["a", "Z", "c"]</span>
letters<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Z"</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// No se puede hacer porque la posición 3 no existe</span>
letters<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// No se puede hacer porque la posición 5 no existe</span></code></pre>
<p>El soporte del método <code>.with()</code> es muy bueno hoy en día:</p>
<p><caniuse-support title="Javascript builtins Array with" feature="mdn-javascript_builtins_Array_with" edge="110/y" firefox="115/y" chrome="110/y" safari="16/y" opera="96/y" ios_saf="16/y" and_chr="110/y" and_ff="115/y">
</caniuse-support></p>
<h4 id="el-método-at" tabindex="-1"><a class="header-anchor" href="#el-método-at">El método <code>.at()</code></a></h4>
<p>Además del clásico operador <code>[]</code>, también podemos utilizar el método <code>.at()</code>, añadido en Javascript <badge-es class="es2022"></badge-es>. Con él, se puede hacer exactamente lo mismo que con <code>[pos]</code>, sólo que además permite valores negativos, mediante los cuales se puede obtener elementos en orden inverso, es decir, empezando a contar desde el último elemento:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

letters<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "a"</span>
letters<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "b"</span>
letters<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// undefined</span>
letters<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "c"</span>
letters<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "b"</span></code></pre>
<p>Esta característica hace que acceder al último elemento (<em>o cercanos</em>) sea bastante práctico, ya que hacer la misma operación con el operador <code>[]</code> era algo menos directo que en algunos casos se podría volver confuso o poco intuitivo:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> lastItem <span class="token operator">=</span> letters<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

letters<span class="token punctuation">[</span>lastItem<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// "c"</span></code></pre>
<p>El soporte del método <code>.at()</code> es muy bueno en navegadores actuales:</p>
<p><caniuse-support title="Javascript builtins Array at" feature="mdn-javascript_builtins_Array_at" edge="92/y" firefox="90/y" chrome="92/y" safari="15.4/y" opera="78/y" ios_saf="15.4/y" and_chr="92/y" and_ff="90/y">
</caniuse-support></p>
<h3 id="añadir-o-eliminar-elementos" tabindex="-1"><a class="header-anchor" href="#añadir-o-eliminar-elementos">Añadir o eliminar elementos</a></h3>
<p>Existen varias formas de añadir elementos a un array ya existente. Ten en cuenta que en todos estos casos estamos <strong>mutando</strong> (<em>variando los elementos del array ya existente</em>). Veamos los <strong>métodos</strong> que podemos usar para ello:</p>
<table>
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="number"></badge-type> <code>.push(e1, e2, e3...)</code> ⚠️</td>
<td>Añade uno o varios elementos al final del array. Devuelve el tamaño del array.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.pop()</code> ⚠️</td>
<td>Elimina el último elemento del array. Devuelve dicho elemento.</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.unshift(e1, e2, e3...)</code> ⚠️</td>
<td>Añade uno o varios elementos al inicio del array. Devuelve el tamaño del array.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.shift()</code> ⚠️</td>
<td>Elimina el primer elemento del array. Devuelve dicho elemento.</td>
</tr>
</tbody>
</table>
<blockquote>
<blockquote>
<blockquote>
<p>⚠️ Recuerda que estos métodos sirven para modificar (<em>mutar</em>) el array original.</p>
</blockquote>
</blockquote>
</blockquote>
<p>En los arrays, Javascript proporciona métodos tanto para insertar o eliminar elementos <strong>por el final</strong> del array, como <strong>por el principio</strong>:</p>
<ul>
<li>Los métodos <code>.push()</code> y <code>.pop()</code> actuan al <strong>final del array</strong>.</li>
<li>Los métodos <code>.unshift()</code> y <code>.shift()</code> actuan al <strong>inicio del array</strong>.</li>
</ul>
<p>Veámoslos en acción:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Array inicial</span>

elements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Devuelve 4.   Ahora elements = ['a', 'b', 'c', 'd']</span>
elements<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Devuelve 'd'. Ahora elements = ['a', 'b', 'c']</span>

elements<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Devuelve 4.   Ahora elements = ['Z', 'a', 'b', 'c']</span>
elements<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Devuelve 'Z'. Ahora elements = ['a', 'b', 'c']</span></code></pre>
<p>Salvo por esto, funcionan exactamente igual. Los métodos de inserción <code>.push()</code> o <code>.unshift()</code> insertan los elementos pasados por parámetro en el array y devuelve el tamaño actual que tiene el array después de la inserción. Por otro lado, los métodos de extracción, <code>.pop()</code> o <code>.shift()</code>, extraen y devuelven el elemento extraído.</p>
<h3 id="alternativas-para-crear-arrays" tabindex="-1"><a class="header-anchor" href="#alternativas-para-crear-arrays">Alternativas para crear arrays</a></h3>
<p>Aunque hemos visto las formas principales de crear un <badge-type class="array"></badge-type> en Javascript, existen otras que permiten generar un <badge-type class="array"></badge-type> partiendo de otras (<em>y muy variadas</em>) estructuras de datos.</p>
<p>Algunos de estos casos son los siguientes:</p>
<table>
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="array"></badge-type> <code>Array.from(obj)</code> <badge-es class="es2015"></badge-es></td>
<td>Intenta convertir el <code>obj</code> en un array.</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>Array.from(obj, fmap)</code> <badge-es class="es2015"></badge-es></td>
<td>Idem, pero ejecuta la función <code>fmap</code> por cada elemento. Equivalente a <code>.map()</code></td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>Array.from({ length:</code><em>size</em><code>})</code></td>
<td>Crea un array a partir de un <badge-type class="object"></badge-type> de tamaño <code>size</code>, relleno de <badge-type class="undefined"></badge-type></td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>.concat(e1, e2, e3...)</code></td>
<td>Devuelve los elementos pasados por parámetro concatenados al final del array.</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>.join(sep)</code></td>
<td>Une los elementos del array mediante separadores <code>sep</code> en un <badge-type class="string"></badge-type>.</td>
</tr>
</tbody>
</table>
<p>Vamos a analizar cada uno de estos métodos y poner algunos ejemplos.</p>
<h4 id="convertir-a-array" tabindex="-1"><a class="header-anchor" href="#convertir-a-array">Convertir a array</a></h4>
<p>El método estático <code>Array.from()</code>, aunque ahora quizás no le encontremos mucha utilidad, nos resultará muy interesante más adelante. Este método se suele utilizar para convertir variables «parecidas» a los <strong>arrays</strong> (<em>pero que no son arrays</em>) en un <badge-type class="array"></badge-type>. Este es el caso de variables como <badge-type class="string"></badge-type> <a href="../../string/variables-texto/index.htm">Strings</a> o de <badge-type class="nodelist"></badge-type> <a href="../../dom/que-es/index.htm">lista de elementos del DOM</a>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span>
text<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                          <span class="token comment">// "String"</span>

<span class="token keyword">const</span> letters <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// ["1", "2", "3", "4", "5"]</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>text<span class="token punctuation">]</span><span class="token punctuation">;</span>                      <span class="token comment">// ["1", "2", "3", "4", "5"]</span>

<span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
divs<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                          <span class="token comment">// "NodeList"</span>

<span class="token keyword">const</span> elements <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>divs<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// [div, div, div]</span>
<span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>divs<span class="token punctuation">]</span><span class="token punctuation">;</span>                     <span class="token comment">// [div, div, div]</span></code></pre>
<p>Como se puede ver, es algo muy similar a lo que hacemos con la <a href="../desestructuracion-arrays/index.htm">desestructuración de arrays</a>. Pero no todos los elementos se pueden convertir a arrays. Por ejemplo, si intentamos convertir un <code>undefined</code> o un <code>null</code>, nos dará un error similar a <strong>Uncaught TypeError: null is not iterable</strong>.</p>
<p>De forma opcional, <code>Array.from(obj)</code> puede recibir un parámetro adicional: una función que actuará de forma idéntica a una <a href="../array-functions/index.htm">función map()</a>. Veamos el funcionamiento:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> numbers <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [1, 2, 3, 4, 5]</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// Equivalente al anterior</span>

<span class="token comment">// Equivalente a los dos anteriores</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>text<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Observa que en este caso, la función pasada por segundo parámetro del <code>Array.from()</code> se ejecutará por cada uno de los elementos de <code>text</code>, y en este caso concretamente, la función <code>(number) =&gt; Number(number)</code> fuerza a convertir cada elemento en un número. La diferencia respecto al ejemplo anterior, es que en este caso obtienes un array de números, mientras que el anterior obtenías un array de textos.</p>
<blockquote>
<p>Si lo que buscas es convertir un objeto <badge-type class="object"></badge-type> de Javascript en un <badge-type class="array"></badge-type>, probablemente te interese el tema de <a href="../../objetos/iteradores/index.htm">Iteradores de objetos</a> donde vemos métodos como <code>Object.keys()</code>, <code>Object.values()</code> u <code>Object.entries()</code>.</p>
</blockquote>
<h4 id="concatenar-arrays" tabindex="-1"><a class="header-anchor" href="#concatenar-arrays">Concatenar arrays</a></h4>
<p>Al igual que en los <badge-type class="string"></badge-type>, en los <badge-type class="array"></badge-type> tenemos el método <code>concat()</code>, que nos permite unir los elementos pasados por parámetro en un array a la estructura que estamos manejando. Se podría pensar que los métodos <code>.push()</code> y <code>concat()</code> funcionan de la misma forma, pero no es exactamente así. Veamos un ejemplo:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

elements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Devuelve 6. Ahora elements = [1, 2, 3, 4, 5, 6]</span>
elements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Devuelve 7. Ahora elements = [1, 2, 3, 4, 5, 6, [7, 8, 9]]</span></code></pre>
<p>Ahora veamos el mismo ejemplo realizado con el método <code>.concat()</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> firstPart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secondPart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

firstPart<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>firstPart<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// Devuelve [1, 2, 3, 1, 2, 3]</span>
firstPart<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>secondPart<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Devuelve [1, 2, 3, 4, 5, 6]</span>

<span class="token comment">// Se pueden pasar elementos sueltos</span>
firstPart<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Devuelve [1, 2, 3, 4, 5, 6]</span>

<span class="token comment">// Se pueden concatenar múltiples arrays e incluso mezclarlos con elementos sueltos</span>
firstPart<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>firstPart<span class="token punctuation">,</span> secondPart<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Devuelve [1, 2, 3, 1, 2, 3, 4, 5, 6, 7]</span></code></pre>
<p>Observa un detalle muy importante: El método <code>concat()</code>, a diferencia de <code>push()</code>, no modifica el array sobre el cuál trabajamos y al que le añadimos los elementos, sino que simplemente lo devuelve. Al margen de esto, observa que en el caso de pasar un array por parámetro, <code>push()</code> lo inserta como un array, mientras que <code>concat()</code> inserta cada uno de sus elementos.</p>
<blockquote>
<blockquote>
<p>También hay que tener cuidado al utilizar el operador <code>+</code> con los arrays. A diferencia de lo que quizás puede parecer intuitivo, utilizando este operador no se añaden los elementos al array, sino que se convierten los arrays en string y luego se concatenan. Veremos más sobre estas <strong>conversiones implícitas</strong> en temas posteriores.</p>
</blockquote>
</blockquote>
<h4 id="separar-y-unir-strings" tabindex="-1"><a class="header-anchor" href="#separar-y-unir-strings">Separar y unir strings</a></h4>
<p>Además, también tenemos otro método con el que es posible crear un <badge-type class="array"></badge-type> a partir de un <badge-type class="string"></badge-type>. Se trata del método <code>.split()</code> que vimos en el tema de los <badge-type class="string"></badge-type>. En este caso, el método <code>.join()</code> es su contrapartida. Con <code>.join()</code> podemos crear un <badge-type class="string"></badge-type> con todos los elementos del array, separándolo por el texto que le pasemos por parámetro:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Une elementos del array por el separador indicado</span>
letters<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Devuelve 'a->b->c'</span>
letters<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Devuelve 'a.b.c'</span>

<span class="token comment">// Separa elementos del string por el separador indicado</span>
<span class="token string">"a.b.c"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Devuelve ['a', 'b', 'c']</span>
<span class="token string">"5-4-3-2-1"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Devuelve ['5', '4', '3', '2', '1']</span></code></pre>
<p>Ten en cuenta que, como se puede ver en los ejemplos, <code>.join()</code> siempre devolverá los elementos como <badge-type class="string"></badge-type>, mientras que <code>.split()</code> devolverá un <badge-type class="array"></badge-type>.</p>
<p>Observa un caso especial, en el que pasamos un cadena de texto <badge-type class="string"></badge-type> vacía al <code>.split()</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token string">"Hola a todos"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ['H', 'o', 'l', 'a', ' ', 'a', ' ', 't', 'o', 'd', 'o', 's']</span></code></pre>
<p>En este caso, le hemos pedido dividir el <badge-type class="string"></badge-type> sin indicar <strong>ningún separador</strong>, por lo que Javascript toma la unidad mínima como separador: nos devuelve un <badge-type class="array"></badge-type> con cada carácter del <badge-type class="string"></badge-type> original. Ten en cuenta que los espacios en blanco también cuentan como carácter.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../../objetos/iteradores/index.htm" title="Iteradores de objetos">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Iteradores de objetos</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../buscar-y-comprobar/index.htm" title="Buscar elementos en un array">
  <div>
    <span>Buscar elementos en un array</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
