<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>¿Qué es un String? - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="En Javascript, las variables de texto (String) son un tipo de dato básico (primitivo) que permite manipular texto.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="¿Qué es un String? - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="En Javascript, las variables de texto (String) son un tipo de dato básico (primitivo) que permite manipular texto.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/string/variables-texto/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/string/variables-texto/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="¿Qué es un String? - Javascript en español">
  <meta property="twitter:description" content="En Javascript, las variables de texto (String) son un tipo de dato básico (primitivo) que permite manipular texto.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../number/variables-numericas/index.htm" title="¿Qué es un Number?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../objetos/que-son/index.htm" title="¿Qué son los objetos?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Strings
      </span>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es un String?
            </a>
            <a class="link" href="../substrings/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Posiciones y substrings
            </a>
            <a class="link" href="../buscar-y-reemplazar/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Buscar y reemplazar
            </a>
            <a class="link" href="../modificar/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Modificar cadenas de texto
            </a>
            <a class="link" href="../unicode/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Contenido de texto Unicode
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">¿Qué es un String?</a></h1><h2 class="typewriter">Variables con contenido de texto</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../../number/bigint/index.htm">El tipo BigInt</a>
    <a class="current" href="index.htm">¿Qué es un String?</a>
    <a href="../substrings/index.htm">Posiciones y substrings</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>En Javascript y en el mundo del desarrollo web, una de las tareas que más solemos hacer es manejar <strong>cadenas de texto</strong> y realizar tareas con ellas. Por lo tanto, tenemos que familiarizarnos con el tipo de dato <badge-type class="string"></badge-type>.</p>
<h3 id="qué-es-un-string" tabindex="-1"><a class="header-anchor" href="#qué-es-un-string">¿Qué es un String?</a></h3>
<p>En programación, cuando hablamos de una varible que posee información de texto, decimos que su tipo de dato es <badge-type class="string"></badge-type>. En Javascript, es muy sencillo crear una variable de texto. A rasgos generales, hay dos formas principales de hacerlo:</p>
<table>
<thead>
<tr>
<th>Constructor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="string"></badge-type> <code>new String(text)</code></td>
<td>Crea un objeto de texto a partir del texto <code>text</code> pasado por parámetro. <strong>Evitar</strong></td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>&quot;texto&quot;</code></td>
<td>Simplemente, escribimos el texto entre comillas simples o dobles. <strong>Notación preferida</strong>.</td>
</tr>
</tbody>
</table>
<p>Los <badge-type class="string"></badge-type> son uno de los tipos de datos básicos (<em>primitivos</em>), y como tal, es más sencillo utilizar los literales que la notación que utiliza la palabra clave <code>new</code>. Para englobar los textos, se pueden utilizar tres tipos de comillas:</p>
<ul>
<li><strong>Comillas simples</strong>: <code>'</code></li>
<li><strong>Comillas dobles</strong>: <code>&quot;</code></li>
<li><strong>Backticks</strong>: <code>`</code> (<em>ver más adelante, en Interpolación de variables</em>)</li>
</ul>
<blockquote>
<p>Aunque es posible utilizar <strong>comillas simples</strong> y <strong>comillas dobles</strong> en los <badge-type class="string"></badge-type>, se recomienda decantarse por uno de los dos estilos y no mezclarlos. Las empresas y equipos de desarrollo suelen tener guías para determinar cuál usar.</p>
</blockquote>
<p>A continuación, un ejemplo de declaración de variables de texto en Javascript:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Notación literal (preferida)</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"¡Hola a todos!"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">"Otro mensaje de texto"</span><span class="token punctuation">;</span>

<span class="token comment">// Notación mediante objeto</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"¡Hola a todos!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Otro mensaje de texto"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<blockquote>
<p>A diferencia de otros lenguajes de programación, Javascript no diferencia entre <badge-type class="string"></badge-type> (<em>cadena de texto</em>) y carácteres (<em>char, un sólo carácter</em>). Javascript mantiene ambos dentro del tipo de dato <badge-type class="string"></badge-type>, por lo que una variable, aunque sólo contenga un carácter, sigue siendo un <badge-type class="string"></badge-type>.</p>
</blockquote>
</blockquote>
<h4 id="propiedades-de-un-string" tabindex="-1"><a class="header-anchor" href="#propiedades-de-un-string">Propiedades de un string</a></h4>
<p>Al crear una variable con contenido de texto <badge-type class="string"></badge-type>, automáticamente, esa variable pasa a tener a su disposición todas las <strong>propiedades</strong> (<em>variables</em>) y <strong>métodos</strong> (<em>funciones</em>) disponibles para este tipo de dato, por lo que podemos utilizarlos en nuestro código, como iremos viendo a continuación:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="number"></badge-type> <code>.length</code></td>
<td>Devuelve el número de carácteres totales del texto.</td>
</tr>
</tbody>
</table>
<p>En el caso de los strings, solo tenemos una propiedad importante, <code>.length</code>, que se encarga de devolver el tamaño total de la cadena de texto en cuestión, como se puede ver en los siguientes ejemplos:</p>
<pre class="language-js "><code class="language-js"><span class="token string">"Hola"</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 4</span>
<span class="token string">"Adiós"</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment">// 5</span>
<span class="token string">""</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 0</span>
<span class="token string">"¡Yeah!"</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 6</span></code></pre>
<p>Nótese que se ha utilizado <badge-type class="string"></badge-type> directamente, sin necesidad de guardarlos en una variable.</p>
<h4 id="acceso-a-un-carácter" tabindex="-1"><a class="header-anchor" href="#acceso-a-un-carácter">Acceso a un carácter</a></h4>
<p>Si lo pensamos bien, un <badge-type class="string"></badge-type> está formado por carácteres, de forma que el texto <code>&quot;Hola&quot;</code>, esta formado por los carácteres <code>&quot;H&quot;</code>, <code>&quot;o&quot;</code>, <code>&quot;l&quot;</code> y <code>&quot;a&quot;</code>. Si queremos acceder a cada uno de ellos, podemos utilizar el operador <code>[]</code> indicando la posición a la que queremos acceder:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"Hola"</span><span class="token punctuation">;</span>

text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// "H"</span>
text<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// "o"</span>
text<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// "l"</span>
text<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// undefined</span></code></pre>
<p>Si intentamos acceder a una <strong>posición</strong> (<em>índice</em>) que no existe, nos devolverá <code>undefined</code> (<em>no está definido</em>).</p>
<h4 id="métodos-de-un-string" tabindex="-1"><a class="header-anchor" href="#métodos-de-un-string">Métodos de un string</a></h4>
<p>Pero las características más interesantes de los strings se encuentran en los métodos de dicho tipo de dato. Ten en cuenta que, en las variables de texto, los métodos se ejecutan sobre el propio texto del <badge-type class="string"></badge-type>, devolviendo información modificada a partir de este.</p>
<p>Por ejemplo, el método <code>.repeat()</code> está disponible en cualquier <badge-type class="string"></badge-type>, y básicamente repite el texto en cuestión el número de veces que le indicamos por parámetro:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"Javascript"</span><span class="token punctuation">;</span>

text<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "JavascriptJavascriptJavascript"</span></code></pre>
<p>A lo largo de los próximos temas, daremos un repaso a los diferentes métodos que existen en los <badge-type class="string"></badge-type>, separado en artículos temáticos por categorías.</p>
<h3 id="interpolación-de-variables" tabindex="-1"><a class="header-anchor" href="#interpolación-de-variables">Interpolación de variables</a></h3>
<p>En <strong>ECMAScript</strong> <badge-es class="es2015"></badge-es> se introduce una interesante mejora en la manipulación general de <badge-type class="string"></badge-type>, sobre todo respecto a la legibilidad de código. Antes, sólo se podían definir <badge-type class="string"></badge-type> mediante <strong>comillas simples</strong> o <strong>comillas dobles</strong>.</p>
<p>Si queríamos concatenar (<em>unir</em>) varias cadenas de texto, teníamos que hacer algo parecido a esto:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> firstWord <span class="token operator">=</span> <span class="token string">"frase"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secondWord <span class="token operator">=</span> <span class="token string">"concatenada"</span><span class="token punctuation">;</span>

<span class="token string">"Una "</span> <span class="token operator">+</span> firstWord <span class="token operator">+</span> <span class="token string">" bien "</span> <span class="token operator">+</span> secondWord<span class="token punctuation">;</span>   <span class="token comment">// 'Una frase bien concatenada'</span></code></pre>
<p>A medida que añadimos más variables o contenido, el código se puede hacer más complejo de leer, especialmente si tenemos que concatenar elementos de un array, objetos, etc... Para evitar añadir complejidad innecesaria, se introducen las <strong>backticks</strong> (<em>comillas hacia atrás</em>), que nos permitirán <strong>interpolar</strong> el valor de las variables sin tener que cerrar, concatenar y abrir la cadena de texto continuamente:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> firstWord <span class="token operator">=</span> <span class="token string">"frase"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secondWord <span class="token operator">=</span> <span class="token string">"concatenada"</span><span class="token punctuation">;</span>

<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Una </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstWord<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> mejor </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>secondWord<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>       <span class="token comment">// 'Una frase mejor concatenada'</span></code></pre>
<p>Esto, a priori, es una funcionalidad muy simple, pero puede llegar a mejorar sustancialmente la legibilidad de código generado. Además, nos aporta una serie de ventajas:</p>
<ul>
<li>Permite <strong>múltiples líneas</strong>, algo que no se puede hacer con las demás comillas</li>
<li>Permite interpolar expresiones Javascript (<em>no sólo variables</em>)</li>
<li>Permite interpolar el valor de variables (<em>ya mencionado</em>)</li>
</ul>
<p>Todo esto lo hace ideal para crear plantillas reutilizables, por ejemplo, con código HTML:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> magicalWord <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;strong>Magical Word&lt;/strong></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  &lt;div class="container">
    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>magicalWord<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
  &lt;/div>
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Observa que <code>template</code> incluye el código HTML de <code>magicalWord</code>, algo que quizás no tiene mucho sentido aún, pero que puede cobrar mucho sentido si pensamos en crear funciones reutilizables:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">function</span> <span class="token function">makeButton</span><span class="token punctuation">(</span><span class="token parameter">className<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;button class="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>className<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/button></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">makeButton</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">,</span> <span class="token string">"Aceptar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// '&lt;button class="primary">Aceptar&lt;/button>'</span>
<span class="token function">makeButton</span><span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">,</span> <span class="token string">"Eliminar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// '&lt;button class="warning">Eliminar&lt;/button>'</span></code></pre>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../../number/bigint/index.htm" title="El tipo BigInt">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>El tipo BigInt</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../substrings/index.htm" title="Posiciones y substrings">
  <div>
    <span>Posiciones y substrings</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
