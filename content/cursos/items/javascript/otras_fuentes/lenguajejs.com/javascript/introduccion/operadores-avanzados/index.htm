<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Operadores avanzados - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Una vez conocemos los operadores básicos de Javascript, es bueno aprender ciertos operadores más avanzados.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Operadores avanzados - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Una vez conocemos los operadores básicos de Javascript, es bueno aprender ciertos operadores más avanzados.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/introduccion/operadores-avanzados/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/introduccion/operadores-avanzados/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Operadores avanzados - Javascript en español">
  <meta property="twitter:description" content="Una vez conocemos los operadores básicos de Javascript, es bueno aprender ciertos operadores más avanzados.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../../retos/nivel-medio/bingo/index.htm" title="Bingo">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../number/variables-numericas/index.htm" title="¿Qué es un Number?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Introducción a Javascript
      </span>
            <a class="link" href="../que-es-javascript/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es Javascript?
            </a>
            <a class="link" href="../consola-de-javascript/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              La consola Javascript
            </a>
            <a class="link" href="../como-funciona/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Cómo funciona Javascript?
            </a>
            <a class="link" href="../ecmascript/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              La especificación ECMAScript
            </a>
            <a class="link" href="../tipos-de-datos/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Tipos de datos
            </a>
            <a class="link" href="../funciones/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Funciones
            </a>
            <a class="link" href="../operadores-basicos/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Operadores básicos
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Operadores avanzados
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">Operadores avanzados</a></h1><h2 class="typewriter">Operadores avanzados en Javascript</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../operadores-basicos/index.htm">Operadores básicos</a>
    <a class="current" href="index.htm">Operadores avanzados</a>
    <a href="../../number/variables-numericas/index.htm">¿Qué es un Number?</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>En la primera parte de este artículo, vimos una serie de <a href="../operadores-basicos/index.htm">operadores básicos en Javascript</a>, donde explicamos, entre otros, operadores aritméticos, de asignación, unarios, operadores de comparación y operadores binarios. Como puedes ver, en general, para trabajar con <strong>valores numéricos</strong>.</p>
<p>En este artículo vamos a seguir con los operadores de Javascript, pero entrando en temas un poco más avanzados, y quizás menos intuitivos y más complejos:</p>
<ul>
<li><strong>Operadores de Strings</strong>: Operaciones con variables y/o <badge-type class="string"></badge-type></li>
<li><strong>Operadores lógicos</strong>: Como trabajar con valores <badge-type class="boolean"></badge-type> o similares</li>
<li><strong>Otros operadores</strong>: Otros operadores sin relación directa con los apartados anteriores</li>
</ul>
<h3 id="operadores-de-strings" tabindex="-1"><a class="header-anchor" href="#operadores-de-strings">Operadores de Strings</a></h3>
<p>Al igual que tenemos operadores para trabajar con <strong>valores numéricos</strong>, en Javascript también tenemos operadores que se pueden utilizar con valores que no son numéricos, por ejemplo, con <badge-type class="string"></badge-type>. Echemos un vistazo a las siguientes:</p>
<table>
<thead>
<tr>
<th>Nombre</th>
<th>Operador</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>Concatenación de texto</td>
<td><code>a + b</code></td>
<td>Une el contenido de <code>a</code> con el contenido de <code>b</code></td>
</tr>
<tr>
<td>Conversión a número (Suma unaria)</td>
<td><code>+a</code></td>
<td>Si <code>a</code> no es un número, intenta convertirlo en un número.</td>
</tr>
</tbody>
</table>
<p>Profundicemos un poco en cada caso para entenderlos mejor y saber bien como funcionan.</p>
<h4 id="operador-de-concatenación" tabindex="-1"><a class="header-anchor" href="#operador-de-concatenación">Operador de concatenación</a></h4>
<p>Anteriormente habíamos mencionado que el operador <code>+</code> se utiliza para realizar operaciones sumatorias. Esto es así cuando los dos operandos que utilizamos son números <badge-type class="number"></badge-type>. Pero, ¿qué ocurre si no es así? En el siguiente ejemplo, puedes comprobar que ocurre cuando utilizamos el operador <code>+</code> y alguno de nuestros operandos no es un <badge-type class="number"></badge-type>:</p>
<pre class="language-js "><code class="language-js">Ejemplo       Resultado                       Explicación
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>     <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>                      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span>         <span class="token comment">// 4      (Número + número)     2 + 2</span>
<span class="token string">"2"</span> <span class="token operator">+</span> <span class="token string">"2"</span>     <span class="token comment">// "22"   (String + string)     String(2) + String(2)</span>
<span class="token string">"2"</span> <span class="token operator">+</span> <span class="token number">2</span>       <span class="token comment">// "22"   (String + número)     String(2) + 2</span>
<span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"2"</span>       <span class="token comment">// "22"   (Número + string)     2 + String(2)</span>
<span class="token string">"a"</span> <span class="token operator">+</span> <span class="token number">2</span>       <span class="token comment">// "a2"   (String + número)     String("a") + 2</span></code></pre>
<p>Observa que salvo en el primer caso (<em>donde tenemos dos <badge-type class="number"></badge-type></em>), el operador <code>+</code> funciona como un <strong>concatenador</strong>, es decir, uniendo los dos <badge-type class="string"></badge-type>, y en el caso que uno de ellos no lo sea, lo convierte.</p>
<p>Esto puede complicarse aún más si vamos usando operandos con diferentes <strong>tipos de datos</strong>, pero veremos eso un poco más adelante. Esto ocurre porque Javascript realiza lo que se llama un proceso de <strong>conversión implícita</strong> donde traduce los tipos de datos al que considera más oportuno. Muchas veces podrás encontrarla mencionada como <strong>Coerción</strong>.</p>
<blockquote>
<p>Muchos programadores prefieren usar lenguajes de programación donde el sistema de <strong>tipos</strong> es más estricto que en Javascript (<em>que por naturaleza es muy flexible</em>). Si piensas de la misma forma, probablemente prefieras <a href="https://www.typescriptlang.org/">Typescript</a>, un metalenguaje donde el programador debe indicar el tipo de dato que va a usar y posteriormente se traduce a JS.</p>
</blockquote>
<h4 id="operador-de-suma-unaria" tabindex="-1"><a class="header-anchor" href="#operador-de-suma-unaria">Operador de suma unaria</a></h4>
<p>Anteriormente, ya habíamos hablado del operador de <strong>resta unaria</strong> (<em>negación</em>) que sirve para cambiar de signo a un número. Sin embargo, también tenemos un operador de <strong>suma unaria</strong> que hace justo lo contrario: mantener positivo un número.</p>
<p>¿Qué sentido puede tener esto si un número, por defecto, ya es positivo? Ninguna. Por eso, en Javascript, el operador <code>+</code> se utiliza para <strong>forzar el cambio de tipo de dato a número</strong>, como podemos ver en el siguiente ejemplo:</p>
<pre class="language-js "><code class="language-js"><span class="token operator">+</span><span class="token number">5</span>              <span class="token comment">// 5      (El valor ya era numérico y positivo)</span>
<span class="token operator">+</span><span class="token operator">-</span><span class="token number">5</span>             <span class="token comment">// -5     (El valor ya era numérico y negativo)</span>
<span class="token operator">+</span><span class="token string">"5"</span>            <span class="token comment">// 5      (El valor era string y pasa a ser numérico)</span>
<span class="token operator">+</span><span class="token string">"-5"</span>           <span class="token comment">// -5     (El valor era string y pasa a ser numérico)</span>
<span class="token operator">+</span><span class="token string">"a"</span>            <span class="token comment">// NaN    (El valor era string pero no es un número)</span></code></pre>
<p>De esta forma, al incluir el operador unario <code>+</code> previo a la variable, forzamos a convertirlo a número (<em>o a su forma de representarse numéricamente</em>).</p>
<h3 id="operadores-lógicos" tabindex="-1"><a class="header-anchor" href="#operadores-lógicos">Operadores lógicos</a></h3>
<p>Los operadores lógicos son muy utilizados en su forma básica, sin embargo, tienen bastantes particularidades y matices, que intentaré explicar en esta sección. Dentro del apartado de <strong>operadores lógicos</strong> tenemos los siguientes:</p>
<table>
<thead>
<tr>
<th>Nombre</th>
<th>Operador</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>Operador lógico <strong>AND</strong></td>
<td><code>a &amp;&amp; b</code></td>
<td>Devuelve <code>a</code> si es <code>false</code>, sino devuelve <code>b</code>.</td>
</tr>
<tr>
<td>Operador ternario <code>?:</code></td>
<td><code>a ? b : c</code></td>
<td>Si <code>a</code> es <code>true</code>, devuelve <code>b</code>, sino devuelve <code>c</code>.</td>
</tr>
<tr>
<td>Operador lógico <strong>OR</strong></td>
<td><code>a || b</code></td>
<td>Devuelve <code>a</code> si es <code>true</code>, sino devuelve <code>b</code>.</td>
</tr>
<tr>
<td>Operador lógico <strong>Nullish coalescing</strong></td>
<td><code>a ?? b</code></td>
<td>Devuelve <code>b</code> si <code>a</code> es <code>null</code> o <code>undefined</code>, sino devuelve <code>a</code>.</td>
</tr>
<tr>
<td>Operador de asignación lógica nula <code>??=</code></td>
<td><code>a ??= b</code></td>
<td>Es equivalente a <code>a ?? (a = b)</code></td>
</tr>
<tr>
<td>Operador de encadenamiento opcional <code>?.</code></td>
<td><code>data?.name</code></td>
<td>Permite intentar acceder a una propiedad, aunque su padre no exista.</td>
</tr>
<tr>
<td>Operador unario lógico <strong>NOT</strong></td>
<td><code>!a</code></td>
<td>Invierte el valor. Si es <code>true</code> devuelve <code>false</code> y viceversa.</td>
</tr>
</tbody>
</table>
<h4 id="operador-and-lógico" tabindex="-1"><a class="header-anchor" href="#operador-and-lógico">Operador AND lógico</a></h4>
<p>El <strong>operador lógico AND</strong> establece una condición donde devolverá el primer valor si es <code>false</code>, o el segundo valor si el primero es <code>true</code>. Esto se puede leer de forma que «<strong>devuelve <code>b</code> si <code>a</code> y <code>b</code> son verdaderos, sino <code>a</code></strong>».</p>
<p>Veamos algunos ejemplos:</p>
<pre class="language-js "><code class="language-js"><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span>      <span class="token comment">// false (si ninguno de los dos es true, false)</span>
<span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span>       <span class="token comment">// false (idem)</span>
<span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span>       <span class="token comment">// false (idem)</span>
<span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span>        <span class="token comment">// true (si ambos son true, true)</span></code></pre>
<p>Pero de la misma forma que el anterior, se puede utilizar con otros tipos de datos. Ahora si importa el primer valor y el segundo:</p>
<pre class="language-js "><code class="language-js"><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">undefined</span>      <span class="token comment">// 0 (se evalua como false &amp;&amp; false, devuelve el primero)</span>
<span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span>      <span class="token comment">// undefined (se evalua como false &amp;&amp; false, devuelve el primero)</span>
<span class="token number">55</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span>          <span class="token comment">// null (se evalua como true &amp;&amp; false, devuelve el segundo)</span>
<span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token number">55</span>          <span class="token comment">// null (se evalua como false &amp;&amp; true, devuelve el primero)</span>
<span class="token number">44</span> <span class="token operator">&amp;&amp;</span> <span class="token number">20</span>            <span class="token comment">// 20 (se evalua como true &amp;&amp; true, devuelve el segundo)</span></code></pre>
<p>Teniendo todo esto en cuenta, este operador es una oportunidad fantástica para utilizarlo a modo de <code>if</code> compactos y muy legibles. No obstante, ten en cuenta que este patrón puede ser interesante en algunos casos simples, pero en otros puede complicar la <strong>legibilidad de código</strong>.</p>
<p>Veamos algunos ejemplos de como utilizarlo:</p>
<pre class="language-js "><code class="language-js"><span class="token number">45</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"OK"</span>            <span class="token comment">// "OK"</span>
<span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"OK"</span>         <span class="token comment">// false</span>

<span class="token keyword">const</span> <span class="token function-variable function">doTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"OK!"</span><span class="token punctuation">;</span>   <span class="token comment">// Creamos función que devuelve "OK!"</span>
isCorrect <span class="token operator">&amp;&amp;</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// Si isCorrect es true, ejecuta doTask()</span></code></pre>
<p>También ten en cuenta que en el caso de necesitar un caso <code>else</code> para el fin, este patrón no sería ideal. Para ese caso, echa un vistazo al siguiente, el <strong>operador ternario</strong>.</p>
<h4 id="operador-ternario" tabindex="-1"><a class="header-anchor" href="#operador-ternario">Operador ternario</a></h4>
<p>El <strong>operador ternario</strong> es una especie de <strong>if compacto</strong> que tienen la mayoría de los lenguajes de programación, donde en lugar de utilizar un <code>if / else</code> tradicional, para escribir en varias líneas, podemos hacerlo mediante el <strong>operador ternario</strong>. Su estructura es la siguiente: <code>(condición) ? valor verdadero : valor falso</code>.</p>
<p>Veamos como la utilizaríamos, comparándolo con un <code>if</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Sin operador ternario</span>
<span class="token keyword">let</span> role<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">"Manz"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  role <span class="token operator">=</span> <span class="token string">"streamer"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  role <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Con operador ternario</span>
<span class="token keyword">const</span> role <span class="token operator">=</span> name <span class="token operator">===</span> <span class="token string">"Manz"</span> <span class="token operator">?</span> <span class="token string">"streamer"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">;</span></code></pre>
<p>En este caso, <code>name === &quot;Manz&quot;</code> sería la condición, <code>&quot;streamer&quot;</code> el valor si la condición es verdadera, y <code>&quot;user&quot;</code> el valor si la condición es falsa. Como puedes ver, el operador ternario permite escribir código mucho más compacto en muchas situaciones.</p>
<p>► <a href="../../../fundamentos/estructuras-de-control/condicionales-if-else/index.htm">Condicionales y operador ternario</a></p>
<h4 id="operador-or-lógico" tabindex="-1"><a class="header-anchor" href="#operador-or-lógico">Operador OR lógico</a></h4>
<p>El <strong>operador lógico OR</strong> establece una condición donde devolverá el primer valor si es <code>true</code>, o el segundo valor si el primero es <code>false</code>. Esto se puede leer de forma que «<strong>devuelve <code>a</code> (si es verdadero), o si no, <code>b</code></strong>».</p>
<p>Veamos algunos ejemplos:</p>
<pre class="language-js "><code class="language-js"><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span>     <span class="token comment">// false (si ninguno de los dos es true, false)</span>
<span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span>      <span class="token comment">// true (desde que uno sea true, true)</span>
<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span>      <span class="token comment">// true (idem)</span>
<span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">true</span>       <span class="token comment">// true (idem)</span></code></pre>
<p>Sin embargo, ten en cuenta que podemos utilizarlo con otros tipos de datos. En el anterior, los valores repetidos no hay que diferenciarlos: si <code>false || false</code> te da igual que <code>false</code> devuelva. Eso no ocurre con otros tipos de datos. Recuerda que cualquier valor superior a <code>0</code> es considerado <code>true</code> como <badge-type class="boolean"></badge-type> y que cualquier valor que sea <code>0</code> o <strong>falsy</strong>, es <code>false</code>.</p>
<p>Veamos algunos ejemplos:</p>
<pre class="language-js "><code class="language-js"><span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">null</span>          <span class="token comment">// null (se evalua como false || false, devuelve el segundo)</span>
<span class="token number">44</span> <span class="token operator">||</span> <span class="token keyword">undefined</span>    <span class="token comment">// 44 (se evalua como true || false, devuelve el primero)</span>
<span class="token number">0</span> <span class="token operator">||</span> <span class="token number">17</span>            <span class="token comment">// 17 (se evalua como false || true, devuelve el segundo)</span>
<span class="token number">4</span> <span class="token operator">||</span> <span class="token number">10</span>            <span class="token comment">// 4 (se evalua como true || true, devuelve el primero)</span></code></pre>
<p>Teniendo todo esto en cuenta, el operador <code>||</code> nos podría venir bastante bien para situaciones donde, por ejemplo, tenemos una variable <code>name</code> que no sabemos a ciencia cierta si está definida y queremos crear una nueva variable <code>userName</code> con el valor de <code>name</code>, o sino, un valor por defecto <code>&quot;Unknown name&quot;</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> userName <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">"Unknown name"</span><span class="token punctuation">;</span>

<span class="token string">"Manz"</span> <span class="token operator">||</span> <span class="token string">"Unknown name"</span>      <span class="token comment">// "Manz"</span>
<span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">"Unknown name"</span>        <span class="token comment">// "Unknown name"</span>
<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token string">"Unknown name"</span>       <span class="token comment">// "Unknown name"</span>
<span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token string">"Unknown name"</span>   <span class="token comment">// "Unknown name"</span>
<span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"Unknown name"</span>           <span class="token comment">// "Unknown name"</span></code></pre>
<blockquote>
<blockquote>
<p><strong>OJO</strong>: Ten presente que en algunos casos te puede interesar esta funcionalidad, pero <code>0</code> es un valor válido para ti, cosa que en este caso no se permite (<em>como se puede ver en el último caso</em>). Para ello, es mejor utilizar el operador <code>??</code> de unión nula (<em>nullish coalescing</em>).</p>
</blockquote>
</blockquote>
<h4 id="operador-nullish-coalescing" tabindex="-1"><a class="header-anchor" href="#operador-nullish-coalescing">Operador Nullish coalescing</a></h4>
<p>El operador <strong>nullish coalescing</strong> <badge-es class="es2020"></badge-es> (<em>unión nula</em>) es un operador lógico muy similar al <strong>operador OR</strong>, pero con ciertos matices y cambios. A grandes rasgos, se puede decir que el operador <code>a ?? b</code> devuelve <code>b</code> sólo cuando <code>a</code> es <code>undefined</code> o <code>null</code>. Al contrario que el <strong>operador OR</strong>, con valores como <code>false</code>, <code>0</code> o <code>&quot;&quot;</code>, no devuelve <code>b</code>.</p>
<p>Veamoslo con un ejemplo para ver la diferencia con el anterior:</p>
<pre class="language-js "><code class="language-js"><span class="token number">42</span> <span class="token operator">||</span> <span class="token number">50</span>          <span class="token comment">// 42</span>
<span class="token number">42</span> <span class="token operator">??</span> <span class="token number">50</span>          <span class="token comment">// 42 (ambos se comportan igual)</span>
<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">50</span>       <span class="token comment">// 50 (false es un valor falsy, devuelve el segundo)</span>
<span class="token boolean">false</span> <span class="token operator">??</span> <span class="token number">50</span>       <span class="token comment">// false (la parte izquierda no es null ni undefined, devuelve el primero)</span>
<span class="token number">0</span> <span class="token operator">||</span> <span class="token number">50</span>           <span class="token comment">// 50 (0 es un valor falsy, devuelve el segundo)</span>
<span class="token number">0</span> <span class="token operator">??</span> <span class="token number">50</span>           <span class="token comment">// 0 (la parte izquierda no es null ni undefined, devuelve el primero)</span>
<span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">50</span>        <span class="token comment">// 50 (null es un valor falsy, devuelve el segundo)</span>
<span class="token keyword">null</span> <span class="token operator">??</span> <span class="token number">50</span>        <span class="token comment">// 50 (devuelve el segundo)</span>
<span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token number">50</span>   <span class="token comment">// 50 (undefined es un valor falsy, devuelve el segundo)</span>
<span class="token keyword">undefined</span> <span class="token operator">??</span> <span class="token number">50</span>   <span class="token comment">// 50 (devuelve el segundo)</span></code></pre>
<p>Dependiendo del caso, podría interesarnos utilizar el operador <code>??</code> o el operador <code>||</code>. Por ejemplo, imagina que tenemos un objeto <code>data</code> donde tenemos almacenado la cantidad de balas que le quedan a un personaje.</p>
<p>Si necesitamos mostrar al usuario visualmente en el menú que se ha quedado sin balas, quizás nos podría interesar utilizar el operador <code>||</code>. Por otro lado, si lo que queremos es sumar la cantidad de balas que tiene, con la cantidad de proyectiles, quizás nos interesaría más utilizar el operador <code>??</code>.</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">ammo</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
data<span class="token punctuation">.</span>ammo <span class="token operator">||</span> <span class="token string">"Sin balas"</span><span class="token punctuation">;</span>     <span class="token comment">// "Sin balas"</span>
data<span class="token punctuation">.</span>ammo <span class="token operator">??</span> <span class="token string">"Sin balas"</span><span class="token punctuation">;</span>     <span class="token comment">// 0</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
data<span class="token punctuation">.</span>ammo <span class="token operator">||</span> <span class="token string">"Sin balas"</span><span class="token punctuation">;</span>     <span class="token comment">// "Sin balas"</span>
data<span class="token punctuation">.</span>ammo <span class="token operator">??</span> <span class="token string">"Sin balas"</span><span class="token punctuation">;</span>     <span class="token comment">// "Sin balas"</span></code></pre>
<p>Ten en cuenta que en el segundo caso, la propiedad <code>ammo</code> es <code>undefined</code>, ya que no está definida.</p>
<h4 id="asignación-lógica-nula" tabindex="-1"><a class="header-anchor" href="#asignación-lógica-nula">Asignación lógica nula</a></h4>
<p>Este operador es bastante interesante para algunas operaciones muy frecuentes en Javascript. Existen ciertos casos donde, si una variable tiene valores <code>null</code> o <code>undefined</code> (<em>valores nullish</em>) y sólo en esos casos, queremos cambiar su valor. Veamos como se haría sin utilizar la asignación lógica nula y como podríamos resumirlo utilizándola:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Sin asignación lógica nula</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> x <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Con asignación lógica nula</span>
x <span class="token operator">??=</span> <span class="token number">50</span><span class="token punctuation">;</span></code></pre>
<p>Recuerda que <code>a ??= b</code> es equivalente a <code>a ?? (a = b)</code>. Esto puede ser super útil para simplificar casos como el siguiente:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">resetConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  data<span class="token punctuation">.</span>life <span class="token operator">??=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  data<span class="token punctuation">.</span>level <span class="token operator">??=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">resetConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// { life: 25, level: 4 }</span>
<span class="token function">resetConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// { life: 100, level: 2 }</span>
<span class="token function">resetConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// { life: 100, level: 1 }</span></code></pre>
<p>Observa que la función <code>resetConfig()</code> obtiene un objeto por parámetro y en el caso de tener una de las propiedades <code>life</code> o <code>level</code> a <code>null</code> o no existir (<em>o valer <code>undefined</code></em>), las reseteará al valor indicado.</p>
<h4 id="encadenamiento-opcional" tabindex="-1"><a class="header-anchor" href="#encadenamiento-opcional">Encadenamiento opcional</a></h4>
<p>Existe un operador muy interesante denominado <strong>optional chaining</strong> <badge-es class="es2020"></badge-es> (<em>operador de encadenamiento opcional</em>). Este operador nos permite acceder a propiedades, aunque su elemento padre no exista, de forma que podamos evitar un error que es bastante frecuente.</p>
<p>Veámoslo con un ejemplo, para situarnos mejor. Tenemos el siguiente objeto:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Manz"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"streamer"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">power</span><span class="token operator">:</span> <span class="token number">25</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Si intentamos acceder a una de sus propiedades en el interior de <code>attrs</code> lo haremos sin problema:</p>
<pre class="language-js "><code class="language-js">user<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>power     <span class="token comment">// 25</span>
user<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>life      <span class="token comment">// 100</span></code></pre>
<p>Sin embargo, vamos a imaginar que la propiedad <code>attrs</code> (<em>y todo su contenido</em>) no existe aún, sino que tenemos un objeto <code>user</code> que solo tiene las propiedades <code>name</code> y <code>role</code>, pero que en algún momento de nuestro código esta propiedad <code>attrs</code> se añadirá en nuestro objeto.</p>
<p>Si intentamos acceder a una de sus propiedades sin que la propiedad <code>attrs</code> exista, ocurriría lo siguiente:</p>
<pre class="language-js "><code class="language-js">user<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>power     <span class="token comment">// TypeError: Cannot read properties of undefined (reading 'power')</span>
user<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>life      <span class="token comment">// TypeError: Cannot read properties of undefined (reading 'life')</span>

user<span class="token punctuation">.</span>attrs <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>life   <span class="token comment">// Evitamos el error (comprobamos si existe attrs antes)</span></code></pre>
<p>Esto ocurre porque estamos intentando acceder a la propiedad <code>power</code> o <code>life</code> dentro de una propiedad <code>attrs</code> que no está definida, es decir, que es <code>undefined</code>. Dicho de otro modo, estamos intentando hacer un <code>undefined.power</code> o un <code>undefined.life</code>.</p>
<p>Para evitar esto, hasta ahora teníamos que utilizar un <code>if</code> condicional, un operador lógico AND o alguna forma similar que comprobara antes que <code>attrs</code> existe realmente, volviendolo bastante engorroso si tenemos múltiples objetos anidados uno dentro de otro. Ahora podemos utilizar el <strong>optional chaining</strong>, que no es más que añadir una <code>?</code> antes del punto de la propiedad a la que queremos acceder:</p>
<pre class="language-js "><code class="language-js">user<span class="token punctuation">.</span>attrs<span class="token operator">?.</span>power    <span class="token comment">// undefined</span>
user<span class="token punctuation">.</span>attrs<span class="token operator">?.</span>life     <span class="token comment">// undefined</span></code></pre>
<p>Como puedes ver, ahora podemos hacer el intento de acceso sin que nos lance un error. Nos devuelve <code>undefined</code> porque no está definido, pero podemos acceder de forma segura.</p>
<h4 id="operador-lógico-not" tabindex="-1"><a class="header-anchor" href="#operador-lógico-not">Operador lógico NOT</a></h4>
<p>El <strong>operador lógico NOT</strong> es un operador unario que se utiliza para negar un valor, es decir, para invertir su valor <badge-type class="boolean"></badge-type>. Si una variable vale <code>true</code>, al negarla valdrá <code>false</code> y si una variable vale <code>false</code>, al negarla, valdrá <code>false</code>. Para negar una variable, se precede del símbolo <code>!</code>.</p>
<p>Veamos algunos ejemplos:</p>
<pre class="language-js "><code class="language-js"><span class="token operator">!</span><span class="token boolean">true</span>        <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token boolean">false</span>       <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token boolean">true</span>       <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token boolean">false</span>      <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token boolean">true</span>      <span class="token comment">// false</span></code></pre>
<p>Sin embargo, también lo podemos hacer con variables con otros tipos de datos:</p>
<pre class="language-js "><code class="language-js"><span class="token operator">!</span><span class="token number">44</span>          <span class="token comment">// false (se evalua como !true)</span>
<span class="token operator">!</span><span class="token number">0</span>           <span class="token comment">// true (se evalua como !false)</span>
<span class="token operator">!</span><span class="token string">""</span>          <span class="token comment">// true (es lo mismo que !0, que a su vez es !false)</span>
<span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">||</span> <span class="token number">23</span><span class="token punctuation">)</span>  <span class="token comment">// false (se evalua como !10, que es !true)</span></code></pre>
<p>Observa que, como se aprecia en el último caso, también podemos usarlo con expresiones más complejas.</p>
<h3 id="otros-operadores" tabindex="-1"><a class="header-anchor" href="#otros-operadores">Otros operadores</a></h3>
<p>Existen otros operadores menos frecuentes como los que incluyo en esta sección, que merece la pena echar un vistazo por conocimiento general.</p>
<h4 id="operador-coma" tabindex="-1"><a class="header-anchor" href="#operador-coma">Operador coma</a></h4>
<p>Quizás, puede parecer el más extraño de todos, ya que no se suele usar demasiado de forma individual, pero en algunos contextos es muy utilizado. El <strong>operador coma</strong> se utiliza simplemente para realizar varias operaciones o sentencias en una misma linea, separándolas por comas. Veamos un ejemplo muy sencillo:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// Sin operador coma</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">// Con operador coma</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre>
<p>Ten en cuenta que en una misma línea, y separando por <strong>coma</strong>, estamos realizando dos operaciones: declarando dos constantes. Ahora, observa el siguiente ejemplo donde vamos a hacer múltiples asignaciones. Si lo haces desde la consola del navegador, comprobarás que sólo devuelve el resultado de la última operación:</p>
<pre class="language-js "><code class="language-js"><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span>                <span class="token comment">// 6 (Parece que sólo ha hecho la tercera operación)</span>
a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span>    <span class="token comment">// a=3, b=2, c=6 (se han realizado todas)</span></code></pre>
<p>Observa que en el primer caso puede parecer que ocurre sólo la última parte, porque devuelve 6. Sin embargo, se han ejecutado todas las operaciones, como se puede ver en el segundo ejemplo, comprobando los valores almacenados en <code>a</code>, <code>b</code> y <code>c</code>. Otro ejemplo:</p>
<pre class="language-js "><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Bye"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"42"</span>   <span class="token comment">// Se ejecutan todos, pero devuelve "42"</span></code></pre>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../operadores-basicos/index.htm" title="Operadores básicos">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Operadores básicos</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../../number/variables-numericas/index.htm" title="¿Qué es un Number?">
  <div>
    <span>¿Qué es un Number?</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
