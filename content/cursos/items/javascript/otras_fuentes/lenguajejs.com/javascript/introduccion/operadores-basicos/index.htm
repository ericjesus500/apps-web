<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Operadores básicos - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Existen una serie de operadores para realizar operaciones básicas en Javascript. Aprendamos a utilizarlos.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Operadores básicos - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Existen una serie de operadores para realizar operaciones básicas en Javascript. Aprendamos a utilizarlos.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/introduccion/operadores-basicos/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/introduccion/operadores-basicos/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Operadores básicos - Javascript en español">
  <meta property="twitter:description" content="Existen una serie de operadores para realizar operaciones básicas en Javascript. Aprendamos a utilizarlos.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../../retos/nivel-medio/bingo/index.htm" title="Bingo">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../number/variables-numericas/index.htm" title="¿Qué es un Number?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Introducción a Javascript
      </span>
            <a class="link" href="../que-es-javascript/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es Javascript?
            </a>
            <a class="link" href="../consola-de-javascript/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              La consola Javascript
            </a>
            <a class="link" href="../como-funciona/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Cómo funciona Javascript?
            </a>
            <a class="link" href="../ecmascript/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              La especificación ECMAScript
            </a>
            <a class="link" href="../tipos-de-datos/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Tipos de datos
            </a>
            <a class="link" href="../funciones/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Funciones
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Operadores básicos
            </a>
            <a class="link" href="../operadores-avanzados/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Operadores avanzados
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">Operadores básicos</a></h1><h2 class="typewriter">Operadores básicos en Javascript</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../funciones/index.htm">Funciones</a>
    <a class="current" href="index.htm">Operadores básicos</a>
    <a href="../operadores-avanzados/index.htm">Operadores avanzados</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Al trabajar con Javascript (<em>o con cualquier lenguaje de programación</em>), es muy habitual hacer uso de los llamados <strong>operadores</strong>. Se trata de unos símbolos que nos permitirán hacer una serie de operaciones con uno o más operadores (<em>generalmente, números</em>). Sin embargo, esto se entiende mejor con ejemplos, por lo que vamos a desglosar los <strong>operadores básicos</strong> en una serie de bloques y a explicarlos para que se entienda lo mejor posible:</p>
<ul>
<li><strong>Aritméticos</strong>: Operadores para realizar operaciones matemáticas.</li>
<li><strong>Asignación</strong>: Operadores para guardar información en variables.</li>
<li><strong>Unarios</strong>: Operadores que se utilizan con un sólo operando.</li>
<li><strong>Comparación</strong>: Operadores para realizar comprobaciones.</li>
<li><strong>Binarios</strong>: Operadores a bajo nivel (<em>a nivel de bits</em>).</li>
</ul>
<h3 id="operadores-aritméticos" tabindex="-1"><a class="header-anchor" href="#operadores-aritméticos">Operadores aritméticos</a></h3>
<p>En primer lugar, vamos a centrarnos en los <strong>operadores aritméticos</strong>, que son los operadores que utilizamos para realizar operaciones matemáticas básicas. Los más sencillos son los cuatro primeros, que forman parte de las operaciones matemáticas básicas habituales:</p>
<table>
<thead>
<tr>
<th>Nombre</th>
<th>Operador</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>Suma</td>
<td><code>a + b</code></td>
<td>Suma el valor de <code>a</code> al valor de <code>b</code>.</td>
</tr>
<tr>
<td>Resta</td>
<td><code>a - b</code></td>
<td>Resta el valor de <code>b</code> al valor de <code>a</code>.</td>
</tr>
<tr>
<td>Multiplicación</td>
<td><code>a * b</code></td>
<td>Multiplica el valor de <code>a</code> por el valor de <code>b</code>.</td>
</tr>
<tr>
<td>División</td>
<td><code>a / b</code></td>
<td>Divide el valor de <code>a</code> entre el valor de <code>b</code>.</td>
</tr>
<tr>
<td>Módulo</td>
<td><code>a % b</code></td>
<td>Devuelve el resto de la división de <code>a</code> entre <code>b</code>.</td>
</tr>
<tr>
<td>Exponenciación</td>
<td><code>a ** b</code></td>
<td>Eleva <code>a</code> a la potencia de <code>b</code>, es decir, <code>a</code><sup><code>b</code></sup>. Equivalente a <code>Math.pow(a, b)</code>.</td>
</tr>
</tbody>
</table>
<p>Menos frecuentes suelen ser el <strong>módulo</strong> o la <strong>exponenciación</strong>, sin embargo, muy útiles en algunas situaciones.</p>
<h4 id="operador-módulo" tabindex="-1"><a class="header-anchor" href="#operador-módulo">Operador módulo</a></h4>
<p>Observa el siguiente ejemplo donde utilizamos la <strong>operación módulo</strong> para limitar el índice:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mod <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span>mod<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Observa que en el <code>console.log()</code> estamos mostrando <code>numbers[i]</code> y luego <code>numbers[mod]</code>. Si ejecutas este código, comprobarás que en el primer caso, se van mostrando los valores del array <code>numbers</code>, es decir, <code>10, 20, 30...</code> y así hasta <code>80</code>. Sin embargo, en el segundo caso del <code>console.log()</code>, donde utilizamos <code>mod</code> como índice, se repiten los dos primeros: <code>10, 20, 10, 20, 10, 20...</code>.</p>
<p>Esto ocurre porque en la línea <code>const mod = i % 2</code> hemos hecho el módulo sobre 2 y no estamos dejando que ese índice crezca más de <code>2</code>, los valores que va a tomar <code>mod</code> en el bucle serán <code>0, 1, 0, 1, 0, 1...</code>, puedes comprobarlo cambiando el <code>console.log()</code> y mostrando los valores <code>i</code> y <code>mod</code>.</p>
<h4 id="operador-de-exponenciación" tabindex="-1"><a class="header-anchor" href="#operador-de-exponenciación">Operador de exponenciación</a></h4>
<p>En el caso de la exponenciación, simplemente podemos utilizar el operador <code>**</code>. Antiguamente, la exponenciación se hacía a través del método <code>Math.pow()</code>, sin embargo, ahora podemos hacerlo a través de este operador, con idéntico resultado:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 32</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">**</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 32</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 32</span></code></pre>
<p>En este caso, estamos haciendo la operación <code>2</code><sup><code>5</code></sup>, es decir, <code>2 * 2 * 2 * 2 * 2</code>.</p>
<h3 id="operadores-de-asignación" tabindex="-1"><a class="header-anchor" href="#operadores-de-asignación">Operadores de asignación</a></h3>
<p>Al margen de los anteriores, también tenemos los <strong>operadores de asignación</strong>. Estos operadores nos permiten asignar información a diferentes constantes o variables a través del símbolo <code>=</code>, lo cuál es bastante lógico pues así lo hacemos en matemáticas.</p>
<p>No obstante, también existen ciertas <strong>contracciones</strong> relacionadas con la asignación que nos permiten realizar operaciones de una forma más compacta. Son las siguientes:</p>
<table>
<thead>
<tr>
<th>Nombre</th>
<th>Operador</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>Asignación</td>
<td><code>c = a + b</code></td>
<td>Asigna el valor de la parte derecha (<em>en este ejemplo, una suma</em>) a <code>c</code>.</td>
</tr>
<tr>
<td>Suma y asignación</td>
<td><code>a += b</code></td>
<td>Es equivalente a <code>a = a + b</code>.</td>
</tr>
<tr>
<td>Resta y asignación</td>
<td><code>a -= b</code></td>
<td>Es equivalente a <code>a = a - b</code>.</td>
</tr>
<tr>
<td>Multiplicación y asignación</td>
<td><code>a *= b</code></td>
<td>Es equivalente a <code>a = a * b</code>.</td>
</tr>
<tr>
<td>División y asignación</td>
<td><code>a /= b</code></td>
<td>Es equivalente a <code>a = a / b</code>.</td>
</tr>
<tr>
<td>Módulo y asignación</td>
<td><code>a %= b</code></td>
<td>Es equivalente a <code>a = a % b</code>.</td>
</tr>
<tr>
<td>Exponenciación y asignación</td>
<td><code>a **= b</code></td>
<td>Es equivalente a <code>a = a ** b</code>.</td>
</tr>
</tbody>
</table>
<p>Por ejemplo, realizar la asignación <code>a = a + b</code> sería exactamente lo mismo que escribir <code>a += b</code>, sólo que esta última está escrita de una forma más resumida.</p>
<h3 id="operadores-unarios" tabindex="-1"><a class="header-anchor" href="#operadores-unarios">Operadores unarios</a></h3>
<p>Los operadores unarios son aquellos que en lugar de tener <strong>dos operandos</strong>, como los anteriores, sólo tienen <strong>uno</strong>. Es decir, se realizan sobre un sólo valor almacenado en una variable.</p>
<table>
<thead>
<tr>
<th>Nombre</th>
<th>Operador</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>Incremento</td>
<td><code>a++</code></td>
<td>Usa el valor de <code>a</code> y luego lo incrementa. También llamado <strong>postincremento</strong>.</td>
</tr>
<tr>
<td>Decremento</td>
<td><code>a--</code></td>
<td>Usa el valor de <code>a</code> y luego lo decrementa. También llamado <strong>postdecremento</strong>.</td>
</tr>
<tr>
<td>Incremento previo</td>
<td><code>++a</code></td>
<td>Incrementa el valor de <code>a</code> y luego lo usa. También llamado <strong>preincremento</strong>.</td>
</tr>
<tr>
<td>Decremento previo</td>
<td><code>--a</code></td>
<td>Decrementa el valor de <code>a</code> y luego lo usa. También llamado <strong>predecremento</strong>.</td>
</tr>
<tr>
<td>Resta unaria</td>
<td><code>-a</code></td>
<td>Cambia de signo (niega) a <code>a</code>.</td>
</tr>
</tbody>
</table>
<p>Una tarea muy común en programación es la de incrementar variables. Por ejemplo, si hacemos un <code>a = a + 1</code>, lo que estamos haciendo es incrementar el valor de <code>a</code> un número más grande del que ya poseía. Para hacer esto mucho más fácil y cómodo, podemos escribir <code>a++</code> que es equivalente a lo anterior. Sin embargo, hay un pequeño matiz, que es lo que se denomina <strong>preincremento</strong> y <strong>postincremento</strong>.</p>
<p>Para ver las diferencias clave del <strong>preincremento</strong> y el <strong>postincremento</strong> observa el siguiente ejemplo:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">++</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Observa que en el <code>console.log()</code> primero usamos la <code>a</code>, luego hacemos el <strong>postincremento</strong> (<em>es decir, la usamos y luego incrementamos</em>), y finalmente la volvemos a mostrar por consola. Prueba a reemplazar el <code>a++</code> por <code>++a</code> y hacer el mismo ejemplo. Esto nos dará el siguiente resultado:</p>
<pre class="language-bash "><code class="language-bash">a a++ a         a ++a a
- --- -         - --- -
<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">1</span>         <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">1</span>
<span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">2</span>         <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">2</span>
<span class="token number">2</span>  <span class="token number">2</span>  <span class="token number">3</span>         <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">3</span>
<span class="token number">3</span>  <span class="token number">3</span>  <span class="token number">4</span>         <span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">4</span>
<span class="token number">4</span>  <span class="token number">4</span>  <span class="token number">5</span>         <span class="token number">4</span>  <span class="token number">5</span>  <span class="token number">5</span></code></pre>
<p>Como puedes ver, en la segunda columna de la segunda tabla (<em>preincremento</em>), el valor mostrado ya ha sido incrementado, sin embargo, en la segunda columna de la primera tabla, permanece el valor (<em>postincremento</em>), ya que como su propio nombre indica se incrementará posteriormente.</p>
<p>Aunque estos detalles es bueno conocerlos, lo más habitual suele ser que se use el <code>a++</code> en una línea independiente, sin utilizarse, por lo que no importa demasiado si hacer preincremento o postincremento. Sólo hay que tenerlo en cuenta si se está usando o asignando.</p>
<h3 id="operadores-de-comparación" tabindex="-1"><a class="header-anchor" href="#operadores-de-comparación">Operadores de comparación</a></h3>
<p>Los operadores de comparación son aquellos que utilizamos en nuestro código (<em>generalmente, en el interior de un <code>if</code>, aunque no es el único sitio donde podemos utilizarlos</em>) para realizar comprobaciones. Estas expresiones de comparación devuelven un <badge-type class="boolean"></badge-type> booleano con un valor de <code>true</code> o <code>false</code>.</p>
<table>
<thead>
<tr>
<th>Nombre</th>
<th>Operador</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>Operador de igualdad <code>==</code></td>
<td><code>a == b</code></td>
<td>Comprueba si el <strong>valor</strong> de <code>a</code> es igual al de <code>b</code>. <strong>No comprueba tipo de dato</strong>.</td>
</tr>
<tr>
<td>Operador de desigualdad <code>!=</code></td>
<td><code>a != b</code></td>
<td>Comprueba si el <strong>valor</strong> de <code>a</code> no es igual al de <code>b</code>. <strong>No comprueba tipo de dato</strong>.</td>
</tr>
<tr>
<td>Operador mayor que <code>&gt;</code></td>
<td><code>a &gt; b</code></td>
<td>Comprueba si el valor de <code>a</code> es mayor que el de <code>b</code>.</td>
</tr>
<tr>
<td>Operador mayor/igual que <code>&gt;=</code></td>
<td><code>a &gt;= b</code></td>
<td>Comprueba si el valor de <code>a</code> es mayor o igual que el de <code>b</code>.</td>
</tr>
<tr>
<td>Operador menor que <code>&lt;</code></td>
<td><code>a &lt; b</code></td>
<td>Comprueba si el valor de <code>a</code> es menor que el de <code>b</code>.</td>
</tr>
<tr>
<td>Operador menor/igual que <code>&lt;=</code></td>
<td><code>a &lt;= b</code></td>
<td>Comprueba si el valor de <code>a</code> es menor o igual que el de <code>b</code>.</td>
</tr>
<tr>
<td>Operador de identidad <code>===</code></td>
<td><code>a === b</code></td>
<td>Comprueba si el <strong>valor y el tipo de dato</strong> de <code>a</code> es igual al de <code>b</code>.</td>
</tr>
<tr>
<td>Operador no idéntico <code>!==</code></td>
<td><code>a !== b</code></td>
<td>Comprueba si el <strong>valor y el tipo de dato</strong> de <code>a</code> no es igual al de <code>b</code>.</td>
</tr>
</tbody>
</table>
<p>Recuerda que en Javascript, hay diferencia entre <code>==</code> (<em>igualdad</em>) y <code>===</code> (<em>identidad</em>). Mientras que el primero sólo comprueba el valor de la comparación, el segundo comprueba <strong>el valor y el tipo de dato</strong> de la comparación. La diferencia se entiende muy fácil con el siguiente ejemplo:</p>
<pre class="language-js "><code class="language-js"><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">5</span>     <span class="token comment">// true   (ambos son iguales, coincide su valor)</span>
<span class="token string">"5"</span> <span class="token operator">==</span> <span class="token number">5</span>   <span class="token comment">// true   (ambos son iguales, coincide su valor)</span>
<span class="token number">5</span> <span class="token operator">===</span> <span class="token number">5</span>    <span class="token comment">// true   (ambos son idénticos, coincide su valor y su tipo de dato)</span>
<span class="token string">"5"</span> <span class="token operator">===</span> <span class="token number">5</span>  <span class="token comment">// false  (no son idénticos, coincide su valor, pero no su tipo de dato)</span></code></pre>
<h3 id="operadores-binarios" tabindex="-1"><a class="header-anchor" href="#operadores-binarios">Operadores binarios</a></h3>
<p>Aunque en Javascript no es algo que se utilice demasiado, existen los denominados <strong>operadores a nivel de bit</strong>. Se trata de una serie de operadores que nos permiten realizar operaciones básicas trabajando a nivel binario, donde los operandos solo pueden tomar valores de <code>0</code> o <code>1</code>:</p>
<table>
<thead>
<tr>
<th>Nombre</th>
<th>Operador</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>Operador <strong>AND</strong></td>
<td><code>a &amp; b</code></td>
<td>Devuelve <code>1</code> si ambos operandos son <code>1</code>.</td>
</tr>
<tr>
<td>Operador <strong>OR</strong></td>
<td><code>a | b</code></td>
<td>Devuelve <code>1</code> si al menos un operando es <code>1</code>.</td>
</tr>
<tr>
<td>Operador <strong>XOR</strong> (OR exclusivo)</td>
<td><code>a ^ b</code></td>
<td>Devuelve <code>1</code> si ambos operandos son diferentes.</td>
</tr>
<tr>
<td>Operador <strong>NOT</strong> (unario)</td>
<td><code>~a</code></td>
<td>Invierte los bits del operando (por ejemplo, 000101 pasa a 111010). Trunca a 32 bits.</td>
</tr>
<tr>
<td>Operador <strong>LEFT SHIFT</strong></td>
<td><code>a &lt;&lt; b</code></td>
<td>Desplazamiento de bits hacia la izquierda. Ej: <code>11</code> (3) pasa a <code>110</code> (6).</td>
</tr>
<tr>
<td>Operador <strong>RIGHT SHIFT</strong></td>
<td><code>a &gt;&gt; b</code></td>
<td>Desplazamiento de bits hacia la derecha. Ej: <code>11</code> (3) pasa a <code>1</code> (1).</td>
</tr>
<tr>
<td>Operador <strong>RIGHT SHIFT</strong> sin signo</td>
<td><code>a &gt;&gt;&gt; b</code></td>
<td>Desplazamiento de bits hacia la derecha, como un operador sin signo.</td>
</tr>
</tbody>
</table>
<p>Por ejemplo, los tres primeros suelen ser los más habituales, donde podríamos crear las llamadas <strong>tablas de verdad</strong>, sin embargo, también podemos combinarlo con el NOT y conseguir variaciones:</p>
<pre class="language-bash "><code class="language-bash"> a   b     AND   OR    XOR     NOT AND   NOT OR   NOT XOR
--- ---   ----- ----- -----   --------- -------- ---------
 <span class="token number">0</span>   <span class="token number">0</span>      <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>         <span class="token number">1</span>         <span class="token number">1</span>        <span class="token number">1</span>
 <span class="token number">0</span>   <span class="token number">1</span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">1</span>         <span class="token number">1</span>         <span class="token number">0</span>        <span class="token number">0</span>
 <span class="token number">1</span>   <span class="token number">0</span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">1</span>         <span class="token number">1</span>         <span class="token number">0</span>        <span class="token number">0</span>
 <span class="token number">1</span>   <span class="token number">1</span>      <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span>        <span class="token number">1</span></code></pre>
<blockquote>
<p>Sin embargo, ten en cuenta que los operadores a nivel de bit son más complejos y pueden utilizarse en Javascript con valores diferentes de <code>0</code> y <code>1</code>, por lo que necesitaríamos más conocimientos de como operar con números binarios y sus fundamentos.</p>
</blockquote>
<h4 id="asignación-a-nivel-de-bit" tabindex="-1"><a class="header-anchor" href="#asignación-a-nivel-de-bit">Asignación a nivel de bit</a></h4>
<p>De la misma forma que anteriormente vimos que tenemos a nuestra disposición unos operadores de asignación compactos para realizar tareas más verbosas, tenemos de la misma forma una serie de operadores de asignación a nivel de bit. Son los siguientes:</p>
<table>
<thead>
<tr>
<th>Nombre</th>
<th>Operador</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>Desplazamiento a la izquierda y asignación</td>
<td><code>a &lt;&lt;= b</code></td>
<td>Es equivalente a <code>a = a &lt;&lt; b</code>.</td>
</tr>
<tr>
<td>Desplazamiento a la derecha y asignación</td>
<td><code>a &gt;&gt;= b</code></td>
<td>Es equivalente a <code>a = a &gt;&gt; b</code>.</td>
</tr>
<tr>
<td>Desplazamiento a la derecha sin signo y asignación</td>
<td><code>a &gt;&gt;&gt;= b</code></td>
<td>Es equivalente a <code>a = a &gt;&gt;&gt; b</code>.</td>
</tr>
<tr>
<td>Operación AND y asignación</td>
<td><code>a &amp;= b</code></td>
<td>Es equivalente a <code>a = a &amp; b</code></td>
</tr>
<tr>
<td>Operación OR y asignación</td>
<td><code>a |= b</code></td>
<td>Es equivalente a <code>a = a | b</code></td>
</tr>
<tr>
<td>Operación XOR y asignación</td>
<td><code>a ^= b</code></td>
<td>Es equivalente a <code>a = a ^ b</code></td>
</tr>
<tr>
<td>Operación AND lógico y asignación</td>
<td><code>a &amp;&amp;= b</code></td>
<td>Es equivalente a <code>a &amp;&amp; (a = b)</code></td>
</tr>
<tr>
<td>Operación OR lógico y asignación</td>
<td><code>a ||= b</code></td>
<td>Es equivalente a <code>a || (a = b)</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>Existen muchos otros operadores, pero los veremos en la segunda parte de este artículo, donde explicamos <a href="../operadores-avanzados/index.htm">operadores avanzados</a>.</p>
</blockquote>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../funciones/index.htm" title="Funciones">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Funciones</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../operadores-avanzados/index.htm" title="Operadores avanzados">
  <div>
    <span>Operadores avanzados</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
