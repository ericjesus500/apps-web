<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Clonar objetos o elementos - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Javascript tiene varias formas para copiar o clonar elementos: JSON.parse, spread, structuredClone... ¡Te explico las ventajas y desventajas de cada una!">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Clonar objetos o elementos - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Javascript tiene varias formas para copiar o clonar elementos: JSON.parse, spread, structuredClone... ¡Te explico las ventajas y desventajas de cada una!">
  <meta property="og:url" content="https://lenguajejs.com/javascript/objetos/clonar-o-copiar-elementos/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/objetos/clonar-o-copiar-elementos/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Clonar objetos o elementos - Javascript en español">
  <meta property="twitter:description" content="Javascript tiene varias formas para copiar o clonar elementos: JSON.parse, spread, structuredClone... ¡Te explico las ventajas y desventajas de cada una!">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../string/variables-texto/index.htm" title="¿Qué es un String?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../arrays/que-es/index.htm" title="¿Qué es un Array en Javascript?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Objetos
      </span>
            <a class="link" href="../que-son/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué son los objetos?
            </a>
            <a class="link" href="../json/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Formato JSON
            </a>
            <a class="link" href="../desestructuracion-objetos/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Desestructuración de objetos
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Clonar objetos o elementos
            </a>
            <a class="link" href="../iteradores/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Iteradores de objetos
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">Clonar objetos o elementos</a></h1><h2 class="typewriter">Formas de copiar estructuras de datos en Javascript</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../desestructuracion-objetos/index.htm">Desestructuración de objetos</a>
    <a class="current" href="index.htm">Clonar objetos o elementos</a>
    <a href="../iteradores/index.htm">Iteradores de objetos</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>En Javascript, así como en muchos otros lenguajes, necesitaremos en ocasiones copiar o clonar elementos de nuestro código, de forma que podamos cambiar uno y dejar intacto el original. Para ello, Javascript (<em>al igual que en otros lenguajes</em>) tiene <strong>dos mecanismos</strong> para copiar elementos:</p>
<ul>
<li>🥂 Copia por <strong>valor</strong> (<em>Duplica el contenido</em>)</li>
<li>🔮 Copia por <strong>referencia</strong> (<em>Hace referencia a dónde está el contenido</em>)</li>
</ul>
<p><img src="copia-valor-referencia.png" alt="Copia por valor y copia por referencia" width="1031" height="375" loading="lazy"></p>
<h3 id="copia-por-valor" tabindex="-1"><a class="header-anchor" href="#copia-por-valor">Copia por valor</a></h3>
<p>El primero de ellos, la <strong>copia por valor</strong>, se realiza con los tipos de datos más básicos, es decir, los <a href="../../introduccion/tipos-de-datos/index.htm">tipos de datos primitivos</a>, es decir: <badge-type class="number"></badge-type>, <badge-type class="string"></badge-type>, <badge-type class="boolean"></badge-type>, etc. Esto ocurre así porque son estructuras simples y rápidas de copiar.</p>
<p>La copia por <strong>valor</strong> significa que simplemente se crea una nueva variable o constante y se asigna el mismo valor que tiene la variable original. Lo que a efectos prácticos cualquiera imaginaría como una <strong>copia</strong>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">let</span> originalValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>

<span class="token comment">// Creamos una copia del valor de originalValue</span>
<span class="token keyword">let</span> copy <span class="token operator">=</span> originalValue<span class="token punctuation">;</span>

originalValue<span class="token punctuation">;</span>    <span class="token comment">// 42</span>
copy<span class="token punctuation">;</span>             <span class="token comment">// 42</span>

<span class="token comment">// Alteramos el valor de copy</span>
copy <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>

originalValue<span class="token punctuation">;</span>    <span class="token comment">// 42</span>
copy<span class="token punctuation">;</span>             <span class="token comment">// 55</span></code></pre>
<p>Como puedes ver, todo ocurre de forma predecible. Al alterar el valor de <code>copy</code>, este es modificado y por otro lado, el valor de <code>originalValue</code> sigue siendo el valor original.</p>
<h3 id="copia-por-referencia" tabindex="-1"><a class="header-anchor" href="#copia-por-referencia">Copia por referencia</a></h3>
<p>El segundo mecanismo es la <strong>copia por referencia</strong>, y es un poco más complejo. En Javascript, como en otros lenguajes, al almacenar la información en una variable, esta se guarda en una <strong>dirección de memoria</strong>.</p>
<p>Con estructuras de datos más complejas como <badge-type class="array"></badge-type>, <badge-type class="object"></badge-type> u otros, esta información no se copia por valor, puesto que podríamos tener estructuras muy complejas donde pueden haber muchos niveles de profundidad (<em>array que contiene arrays, que a su vez cada uno de ellos contienen arrays y a su vez cada uno de ellos contienen arrays...</em>).</p>
<p>Para simplificar el proceso, lo que se hace con estos tipos de datos más complejos, es que la copia será una referencia al elemento original, algo que es mucho más práctico y rápido, pero con lo que hay que tener mucho cuidado:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">let</span> originalValue <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ManzDev"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Creamos una supuesta copia del valor de originalValue</span>
<span class="token keyword">let</span> copy <span class="token operator">=</span> originalValue<span class="token punctuation">;</span>

originalValue<span class="token punctuation">;</span>    <span class="token comment">// { name: "ManzDev" }</span>
copy<span class="token punctuation">;</span>             <span class="token comment">// { name: "ManzDev" }</span>

<span class="token comment">// Alteramos el valor de copy</span>
copy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Niv3k_el_pato"</span><span class="token punctuation">;</span>

originalValue<span class="token punctuation">;</span>    <span class="token comment">// { name: "Niv3k_el_pato" }</span>
copy<span class="token punctuation">;</span>             <span class="token comment">// { name: "Niv3k_el_pato" }</span></code></pre>
<p>Como puedes ver, la modificar la propiedad <code>name</code> de <code>copy</code>, también se altera la propiedad <code>name</code> de <code>originalValue</code> puesto que <code>copy</code> solo es una referencia a la estructura original, es decir, está ligado a <code>originalValue</code>. Al cambiar cualquiera de ellos, se modificará el otro.</p>
<h3 id="clonando-variables-o-constantes" tabindex="-1"><a class="header-anchor" href="#clonando-variables-o-constantes">Clonando variables o constantes</a></h3>
<p>Y entonces... ¿Qué puedo hacer para clonar o copiar estructuras de datos complejas sin este problema? Antes de nada tenemos que conocer dos conceptos importantes:</p>
<ul>
<li>
<p>🎈 <strong>Clonación superficial</strong> (<em>Shallow clone</em>): Se llama así cuando realizamos una clonación de una estructura de datos y sólo se copia su <strong>primer nivel</strong>, mientras que segundo y niveles más profundos, se crean referencias.</p>
</li>
<li>
<p>🧨 <strong>Clonación profunda</strong> (<em>Deep clone</em>): Se llama así cuando realizamos una clonación de una estructura de datos a todos sus niveles.</p>
</li>
</ul>
<p>Observa esta estructura de datos:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ManzDev"</span><span class="token punctuation">,</span>        <span class="token comment">// Se clona en superficial y en profundidad</span>
  <span class="token literal-property property">tired</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>           <span class="token comment">// Se clona en superficial y en profundidad</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"css"</span><span class="token punctuation">,</span> <span class="token string">"javascript"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"vue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Sólo en profundidad</span>
  <span class="token literal-property property">numbers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span>              <span class="token comment">// Sólo en profundidad</span>
<span class="token punctuation">}</span></code></pre>
<p>Si realizamos una <strong>clonación superficial</strong>, solo clonaríamos los tipos de datos básicos (<em>los dos primeros</em>). Los dos últimos, al ser estructuras complejas en sí mismas, no se realizaría una clonación, sino que sería una referencia al elemento original, modificando ambos si alteramos uno de sus elementos, como vimos anteriormente.</p>
<p>Si realizamos una <strong>clonación profunda</strong>, no tendríamos este problema, se clonarían todos los elementos, independientemente del nivel de profundidad.</p>
<h3 id="clonando-elementos-en-javascript" tabindex="-1"><a class="header-anchor" href="#clonando-elementos-en-javascript">Clonando elementos en Javascript</a></h3>
<p>Tradicionalmente, hay varias aproximaciones, vamos a explicarlas, junto a sus ventajas y desventajas:</p>
<table>
<thead>
<tr>
<th>Estrategia</th>
<th>Clonación<br>superficial</th>
<th>Clonación<br>profunda</th>
<th>Tipos de datos<br>avanzados</th>
<th>Nativo</th>
<th>Más info</th>
</tr>
</thead>
<tbody>
<tr>
<td>Asignación <code>=</code></td>
<td>❌ No</td>
<td>❌ No</td>
<td>❌ No</td>
<td>✅ Sí</td>
<td></td>
</tr>
<tr>
<td>Usar <code>Object.assign()</code></td>
<td>✅ Sí</td>
<td>❌ No</td>
<td>❌ No</td>
<td colspan="2">✅ Sí</td>
</tr>
<tr>
<td>Usar spread <code>...</code></td>
<td>✅ Sí</td>
<td>❌ No</td>
<td>❌ No</td>
<td>✅ Sí</td>
<td><a href="../desestructuracion-objetos/index.htm#haciendo-copias-de-objetos">Copias con spread</a></td>
</tr>
<tr>
<td>Serializar con <code>JSON.parse()</code></td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>⚠️ Solo tipos básicos<br>⚠️ No funciones/DOM</td>
<td>✅ Sí</td>
<td><a href="../json/index.htm">JSON</a></td>
</tr>
<tr>
<td>Usar <code>_.cloneDeep()</code> de <a href="https://lodash.com/">Lodash</a></td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Tipos avanzados<br>⚠️ No DOM</td>
<td>❌ No</td>
<td><a href="https://lodash.com/docs/#cloneDeep">cloneDeep</a></td>
</tr>
<tr>
<td>Usar <code>structuredClone()</code></td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Tipos avanzados<br>⚠️ No funciones/DOM</td>
<td>✅ Sí</td>
<td><i>Este post</i></td>
</tr>
</tbody>
</table>
<p>Veamos un ejemplo de cada uno sobre el elemento <code>data</code> anterior. En primer lugar, veamos las formas que permiten clonación superficial, pero no clonación profunda:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// ❌ Esto no realiza una clonación, es una referencia al original</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> data<span class="token punctuation">;</span>

<span class="token comment">// ❌ Sólo superficial (Hay que crear objeto con el mismo tipo)</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>copy<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ❌ Sólo superficial</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>El <code>...</code> (<em>spread</em>) o el <code>Object.assign()</code> pueden interesarnos si necesitamos un mecanismo rápido de clonación, tenemos estructuras de un solo nivel y no nos interesan tipos de datos avanzados, sino datos primitivos.</p>
<p>Ahora veamos las formas donde podemos realizar <strong>clonación profunda</strong> y copiar los elementos incluso a niveles de profundidad mayores y no sólo el primer nivel (<em>como ocurre en la clonación superficial</em>):</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// ✅ El truco de JSON funciona, ❌ pero estamos limitados a los tipos de JSON</span>
<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ✅ Con Lodash, ten en cuenta que necesitaremos descargar/parsear librería externa</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> cloneDeep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"lodash-es"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ✅ Con structuredClone, ciertos tipos (funciones, DOM) devuelven excepción</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token function">structuredClone</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Como conclusión:</p>
<ul>
<li>Usa <code>...</code> (<em>spread</em>) o <code>Object.assign()</code> si trabajas con datos primitivos y un sólo nivel de profundidad.</li>
<li>Usa <code>JSON.parse()</code> y <code>JSON.stringify()</code> en el mismo caso. Útil si necesitas navegadores muy antiguos.</li>
<li>Usa <code>structuredClone()</code> si quieres un clonado moderno, que soporte diferentes niveles de profundidad.</li>
<li>Usa <code>cloneDeep()</code> de <code>Lodash</code> si requieres clonado de funciones y no te supone un coste incluir dependencias externas.</li>
</ul>
<p>Por aquí tienes una tabla resumen donde puedes ver que tipos de datos puede clonar cada uno de los métodos que permiten <strong>clonación profunda</strong>:</p>
<table>
<thead>
<tr>
<th>Tipo de dato</th>
<th><code>...spread</code> / <code>Object.assign()</code></th>
<th><code>JSON.parse()</code></th>
<th><code>_.cloneDeep()</code></th>
<th><code>structuredClone()</code></th>
</tr>
</thead>
<tbody>
<tr>
<td colspan="6">Tipos básicos (primitivos)</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type></td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type></td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type></td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><code>undefined</code></td>
<td>✅ Sí</td>
<td>⚠️ <code>null</code></td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><code>null</code></td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td colspan="6">Tipos complejos (no primitivos)</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type></td>
<td>❌ No, referencia</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type></td>
<td>❌ No, referencia</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><badge-type class="date"></badge-type></td>
<td>❌ No, referencia</td>
<td>⚠️ <code>string</code></td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><badge-type class="bigint"></badge-type></td>
<td>❌ No, referencia</td>
<td>❌ Devuelve TypeError</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><badge-type class="regexp"></badge-type></td>
<td>❌ No, referencia</td>
<td>⚠️ <code>{}</code> vacío</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><badge-type class="map"></badge-type> / <badge-type class="set"></badge-type></td>
<td>❌ No, referencia</td>
<td>⚠️ <code>{}</code> vacío</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
</tr>
<tr>
<td><badge-type class="symbol"></badge-type></td>
<td>❌ No, referencia</td>
<td>✅ Sí</td>
<td>✅ Sí</td>
<td>❌ Devuelve DOMException</td>
</tr>
<tr>
<td><badge-type class="function"></badge-type> / <badge-type class="class"></badge-type></td>
<td>❌ No, referencia</td>
<td>⚠️ <code>null</code></td>
<td>✅ Sí</td>
<td>❌ Devuelve DOMException</td>
</tr>
<tr>
<td>Elemento del DOM</td>
<td>❌ No, referencia</td>
<td>⚠️ <code>{}</code> vacío</td>
<td>❌ No, referencia</td>
<td>❌ Devuelve DOMException</td>
</tr>
</tbody>
</table>
<p>En principio, en estructuras de datos no deberían existir elementos del DOM ni funciones, por lo que <code>structuredClone()</code> debería ser la mejor opción. No obstante, si lo que deseas es clonar ciertas estructuras que además contienen funciones o elementos del DOM, lo mejor sería decantarse por <code>cloneDeep()</code>.</p>
<blockquote>
<blockquote>
<blockquote>
<p>Ten en cuenta que aunque puede ser atractivo el método <code>_.cloneDeep()</code> por soportar todos los tipos de datos, también hay que tener en cuenta que no se trata de un método nativo del navegador, sino que se trata de una librería externa, que debe cargarse, parsearse y ejecutarse y que con estructuras muy complejas puede ser lenta o pesada.</p>
</blockquote>
</blockquote>
</blockquote>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../desestructuracion-objetos/index.htm" title="Desestructuración de objetos">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Desestructuración de objetos</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../iteradores/index.htm" title="Iteradores de objetos">
  <div>
    <span>Iteradores de objetos</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
