<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>XHR: XMLHttpRequest - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="XMLHttpRequest (XHR) es un objeto especial de Javascript que permite realizar peticiones HTTP asíncronas (AJAX) de forma nativa desde Javascript.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="XHR: XMLHttpRequest - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="XMLHttpRequest (XHR) es un objeto especial de Javascript que permite realizar peticiones HTTP asíncronas (AJAX) de forma nativa desde Javascript.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/peticiones-http/xhr/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/peticiones-http/xhr/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="XHR: XMLHttpRequest - Javascript en español">
  <meta property="twitter:description" content="XMLHttpRequest (XHR) es un objeto especial de Javascript que permite realizar peticiones HTTP asíncronas (AJAX) de forma nativa desde Javascript.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../asincronia/que-es/index.htm" title="¿Qué es la asincronía?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../../fundamentos/introduccion/conceptos-previos/index.htm" title="Conceptos previos">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Peticiones HTTP
      </span>
            <a class="link" href="../ajax/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              AJAX: Peticiones HTTP
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              XHR: XMLHttpRequest
            </a>
            <a class="link" href="../fetch/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Fetch: Peticiones Asíncronas
            </a>
            <a class="link" href="../url/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              URL en Javascript
            </a>
            <a class="link" href="../cors/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Política CORS
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">XHR: XMLHttpRequest</a></h1><h2 class="typewriter">Mecanismo (legacy) para hacer peticiones asíncronas</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../ajax/index.htm">AJAX: Peticiones HTTP</a>
    <a class="current" href="index.htm">XHR: XMLHttpRequest</a>
    <a href="../fetch/index.htm">Fetch: Peticiones Asíncronas</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p><strong>XMLHttpRequest</strong> (XHR) es un objeto especial de Javascript que permite realizar <a href="../ajax/index.htm">peticiones HTTP asíncronas (AJAX)</a> de forma nativa desde Javascript. Se trata de la primera implementación que existió, disponible en <strong>ECMAScript</strong> antes de que surgiera <code>fetch</code>, el estándar recomendado actual.</p>
<blockquote>
<p>Actualmente es más frecuente utilizar <code>fetch</code>, puesto que es una API más actual y moderna que utiliza promesas y nos permite hacer lo mismo (<em>o más</em>) escribiendo menos código.</p>
</blockquote>
<h3 id="qué-es-xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#qué-es-xmlhttprequest">¿Qué es XMLHttpRequest?</a></h3>
<p>El objeto <code>XMLHttpRequest</code> se creó originalmente para realizar peticiones HTTP a ficheros <code>.xml</code> externos desde Javascript. Actualmente, se realizan las mismas operaciones pero con ficheros <a href="../../objetos/json/index.htm">JSON</a>, ya que son mucho más habituales en el ecosistema Javascript como <strong>almacenamiento ligero de datos</strong>.</p>
<p>El mecanismo principal de <strong>peticiones HTTP mediante XMLHttpRequest</strong> es muy sencillo, aunque se vuelve un poco más complejo a medida que vamos realizando comprobaciones y detalles relacionados, ya que se realiza todo más a bajo nivel que su equivalente moderno <code>fetch</code>.</p>
<p>El primer paso es crear un objeto <code>XMLHttpRequest</code> (<em>XHR</em>):</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Mediante esta instancia que acabamos de crear, podremos definir el tipo de petición utilizando el método <code>open(method, url)</code>, indicando el método HTTP y la URL a la que queremos hacer la petición:</p>
<pre class="language-js "><code class="language-js">client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/robots.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Preparación de petición</span>
client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// La enviamos</span></code></pre>
<p>Con el método <code>.open()</code> solo preparamos la petición, pero la haremos finalmente efectiva con el método <code>.send()</code>, el cuál lanzará la petición al servidor. Poco después, si consultamos el contenido de la propiedad <code>.responseText</code> (<em>texto de respuesta</em>) de nuestra instancia, comprobaremos que debería estar el contenido del fichero que hemos pedido:</p>
<pre class="language-js "><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Este sería el funcionamiento base de las <strong>peticiones XHR</strong>, que como puedes ver, es muy sencillo. Sin embargo, esto es sólo la teoría. A la hora de la práctica hay más detalles que hay que tener en cuenta.</p>
<p>Por ejemplo, si has ejecutado <strong>línea por línea</strong> en una consola del navegador, habrás comprobado que este código funciona perfectamente. Sin embargo, si intentamos ejecutar <strong>todo el código de golpe</strong>, no funcionará; el valor de <code>client.responseText</code> nos aparecerá vacío.</p>
<p>Esto ocurre debido a que no estamos dando tiempo suficiente al navegador para realizar la petición del fichero <code>/robots.txt</code> al servidor, y por lo tanto, consultamos el resultado antes de tenerlo. Para solucionar esto, hay que esperar un tiempo para comprobar el valor, o mejor aún, hacerlo de forma <strong>asíncrona</strong>, como veremos más adelante.</p>
<blockquote>
<p>El fichero <code>/robots.txt</code> es un fichero de texto que suele existir en prácticamente todas las páginas webs. Se trata de un fichero de texto plano que indica las URL a las que los robots o crawlers (<em>como el de Google</em>) no deberían acceder ni indexar su contenido.</p>
</blockquote>
<h3 id="política-cors" tabindex="-1"><a class="header-anchor" href="#política-cors">Política CORS</a></h3>
<p>Habrás observado que estamos realizando <strong>peticiones relativas</strong>, es decir, al <strong>mismo dominio</strong>. Por defecto, en Javascript, las peticiones al mismo dominio de la web donde nos encontramos se pueden realizar sin ninguna restricción. Sin embargo, si intentamos realizarlas a otro dominio diferente, probablemente nos aparezca un <strong>error de CORS</strong> (<em>Cross-Origin Resource Sharing</em>) similar al siguiente:</p>
<blockquote>
<blockquote>
<blockquote>
<p>Access to XMLHttpRequest at 'https://domain.com/robots.txt' from origin 'https://currentdomain.com/' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</p>
</blockquote>
</blockquote>
</blockquote>
<p>Más adelante, en el capítulo <a href="../cors/index.htm">CORS</a>, abordaremos este tema y comentaremos los detalles que hay que cumplir para poder hacer peticiones a dominios externos, pero de momento nos limitaremos a realizarlos al propio dominio donde nos encontramos.</p>
<h3 id="el-objeto-xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#el-objeto-xmlhttprequest">El objeto XMLHttpRequest</a></h3>
<p>Al crear un objeto <code>XMLHttpRequest</code> tenemos acceso a una serie de propiedades que forman parte de nuestra instancia. Entre ellas, se encuentran las siguientes:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="string"></badge-type> <code>.responseType</code></td>
<td>Define el tipo de respuesta de <code>.response</code>: <code>json</code>, <code>Blob</code>, etc. Por defecto, <strong>text</strong>.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.response</code></td>
<td>Contenido parseado automáticamente basado en <code>.responseType</code>.</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>.responseText</code></td>
<td>Respuesta de la petición como texto plano, o <badge-type class="null"></badge-type> si no se ha recibido.</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>.responseURL</code></td>
<td>URL de la petición HTTP a realizar.</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.readyState</code></td>
<td>Número que indica en que estado se encuentra la petición (ver más adelante).</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.timeout</code></td>
<td>Milisegundos permitidos para realizar la petición HTTP. Por defecto, <strong>0</strong> (sin límite).</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.status</code></td>
<td>Código de error HTTP de respuesta de la petición.</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>.statusText</code></td>
<td>Texto con el código de error de respuesta, legible para humanos.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.withCredentials</code></td>
<td>Indica si la petición HTTP se está realizando con credenciales.</td>
</tr>
</tbody>
</table>
<p>En primer lugar, las propiedades <code>.responseType</code> y <code>.response</code> se usan conjuntamente, debido a que si establecemos un valor en <code>.responseType</code> antes de hacer la petición, se procesará automáticamente la respuesta en <code>.response</code>. Por ejemplo, si establecemos el valor <code>&quot;json&quot;</code> en la propiedad <code>.responseType</code>, en <code>.response</code> obtendremos el <a href="../../objetos/json/index.htm">objeto JSON parseado</a>.</p>
<p>Por otro lado, en la propiedad <code>.responseText</code> siempre obtendremos el <strong>valor de texto puro</strong>, por si ese proceso de parseo queremos hacerlo manualmente. En la propiedad <code>.responseURL</code> tendremos la ruta completa de la petición HTTP.</p>
<p>También tenemos la propiedad <code>.readyState</code>, en la cuál profundizaremos más adelante. Básicamente nos devuelve un valor que determina <strong>en que punto se encuentra la petición</strong> (<em>iniciada, enviada, procesándose, finalizada</em>). Es muy útil para saber cuando realizar ciertas acciones.</p>
<p>La propiedad <code>.timeout</code> indica el número de <strong>milisegundos máximo</strong> que permitiremos para realizar la petición. De ser superior a este tiempo, la petición se descartará. Por defecto viene establecido a <code>0</code>, que significa que no hay límite de tiempo para la petición.</p>
<p>Las propiedades <code>.status</code> y <code>.statusText</code> nos muestran el <strong>código de error HTTP</strong> devuelto por la petición. La propiedad <code>.status</code> de vuelve el número en cuestión (<em>200 = OK, 404 = Not Found, etc...</em>) y la propiedad <code>.statusText</code> nos devuelve un texto un poco más legible donde nos da algo más de información.</p>
<p>Por último, el booleano <code>.withCredentials</code> nos indica si la petición se ha realizado enviando un usuario y contraseña o simplemente se trata de una petición sin indicar credenciales.</p>
<h3 id="métodos-de-xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#métodos-de-xmlhttprequest">Métodos de XMLHttpRequest</a></h3>
<p>Lo que vemos a continuación es una lista de los métodos que podemos utilizar en nuestra instancia de <code>XMLHttpRequest</code>, donde tenemos algunos otros métodos aparte de los mencionados <code>.open()</code> y <code>.send()</code>:</p>
<table>
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td colspan="2">Cabeceras HTTP</td>
</tr>
<tr>
<td><code>.setRequestHeader(</code><badge-type class="string"></badge-type><code>name, </code><badge-type class="string"></badge-type><code>value)</code></td>
<td>Permite añadir la cabecera <code>name</code> con el valor <code>value</code> a la petición HTTP.</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>.getAllResponseHeaders()</code></td>
<td>Obtiene todas las cabeceras HTTP de la respuesta de la petición.</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>.getResponseHeader(</code><badge-type class="string"></badge-type><code>name)</code></td>
<td>Obtiene una cabecera HTTP concreta de la respuesta de la petición.</td>
</tr>
<tr>
<td><code>.overrideMimeType(</code><badge-type class="string"></badge-type><code>mimetype)</code></td>
<td>Permite modificar el MIME (tipo de fichero) de la petición.</td>
</tr>
<tr>
<td colspan="2">Acciones</td>
</tr>
<tr>
<td><code>.open(</code><badge-type class="string"></badge-type><code>method, </code><badge-type class="string"></badge-type><code>url)</code></td>
<td>Permite preparar una petición HTTP.</td>
</tr>
<tr>
<td><code>.send()</code></td>
<td>Envía la petición previamente preparada con <code>.open()</code>.</td>
</tr>
<tr>
<td><code>.send(</code><badge-type class="object"></badge-type><code>body)</code></td>
<td>Idem a la anterior, enviando datos en la petición.</td>
</tr>
<tr>
<td><code>.abort()</code></td>
<td>Cancela la petición enviada.</td>
</tr>
</tbody>
</table>
<p>Los cuatro primeros se utilizan para temas relacionados con las <strong>cabeceras de la petición HTTP</strong>. El primero para la petición que enviamos (<em>permite añadir cabeceras</em>) y los dos siguientes para la petición de respuesta que recibimos, tanto obtener todas las cabeceras con <code>.getAllResponseHeaders()</code>, como obtener una específica <code>.getResponseHeader(name)</code>.</p>
<p>El método <code>.overrideMimeType()</code> nos permite modificar (<em>sobreescribir</em>) el <a href="https://es.wikipedia.org/wiki/Tipo_de_medio">MIME</a> de la petición recibido desde el servidor, muy útil cuando queremos forzarlo a uno diferente.</p>
<p>Por último, tenemos los métodos <code>.open()</code>, <code>.send()</code> y <code>.abort()</code> utilizados para iniciar, enviar y cancelar la petición respectivamente. En el caso de <code>.send()</code> es posible indicar un parámetro opcional que sea un objeto para enviar junto a la petición.</p>
<h3 id="eventos-de-xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#eventos-de-xmlhttprequest">Eventos de XMLHttpRequest</a></h3>
<p>Durante el manejo de objetos <code>XMLHttpRequest</code> pueden suceder determinados eventos que podemos controlar desde nuestro código. Dichos eventos son los siguientes:</p>
<table>
<thead>
<tr>
<th>Evento</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>abort</code></td>
<td>Se dispara cuando una petición es cancelada.</td>
</tr>
<tr>
<td><code>load</code></td>
<td>Se dispara cuando una petición se ha completado correctamente.</td>
</tr>
<tr>
<td><code>loadstart</code></td>
<td>Se dispara cuando una petición comienza a cargar datos.</td>
</tr>
<tr>
<td><code>loadend</code></td>
<td>Se dispara cuando una petición termina (con error o sin ellos).</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Se dispara cuando una petición sufre un error.</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>Se dispara cuando una petición agota el tiempo máximo.</td>
</tr>
<tr>
<td><code>progress</code></td>
<td>Se dispara (varias veces) cuando una petición recibe datos.</td>
</tr>
<tr>
<td><code>readystatechange</code></td>
<td>Se dispara cuando el valor <code>.readyState</code> cambia.</td>
</tr>
</tbody>
</table>
<p>Los eventos del objeto <code>XMLHttpRequest</code> son bastante autodescriptivos. Quizás, el más complejo sea el evento <code>readystatechange</code>, el cuál tiene relación directa con la propiedad <code>.readyState</code>, que explicaremos detalladamente en el siguiente apartado.</p>
<h3 id="el-ciclo-readystate" tabindex="-1"><a class="header-anchor" href="#el-ciclo-readystate">El ciclo <code>readyState</code></a></h3>
<p>La propiedad <code>.readyState</code> de nuestra instancia <code>client</code> es un valor numérico (<em>representado por una constante</em>) que indica en el punto de progreso en que se encuentra la petición HTTP.</p>
<p>Esto es muy fácil de entender si pensamos en los clásicos <strong>spinners</strong> que se suelen utilizar para indicar que se está procediendo a obtener y descargar información. Habitualmente, estos spinners aparecen si la propiedad <code>.readyState</code> se encuentra entre <code>1</code> y <code>3</code>:</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Constante</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0</code></td>
<td><code>XMLHttpRequest.UNSENT</code></td>
<td>Estado inicial. No se ha ejecutado aún <code>.open()</code>.</td>
</tr>
<tr>
<td><code>1</code></td>
<td><code>XMLHttpRequest.OPENED</code></td>
<td>Se ha ejecutado <code>open()</code>, pero no se ha ejecutado aún <code>.send()</code>.</td>
</tr>
<tr>
<td><code>2</code></td>
<td><code>XMLHttpRequest.HEADERS_RECEIVED</code></td>
<td>Se ha ejecutado <code>send()</code>. Cabeceras recibidas.</td>
</tr>
<tr>
<td><code>3</code></td>
<td><code>XMLHttpRequest.LOADING</code></td>
<td>Descarga de información en proceso.</td>
</tr>
<tr>
<td><code>4</code></td>
<td><code>XMLHttpRequest.DONE</code></td>
<td>Descarga finalizada.</td>
</tr>
</tbody>
</table>
<p>Para verlo más claramente, podemos observar el siguiente código, donde a través de la escucha del evento <code>readystatechange</code> de la instancia en cuestión, podemos estar pendientes de cuando obtenemos la información (<em>readyState igual a 4 y status 200 OK</em>):</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"readystatechange"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isDone <span class="token operator">=</span> client<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> isOk <span class="token operator">=</span> client<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isDone <span class="token operator">&amp;&amp;</span> isOk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/robots.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Una vez hemos entendido todos estos apartados, estamos preparados para realizar peticiones HTTP utilizando <strong>XHR</strong>. Sin embargo, es altamente recomendable echar un vistazo a los siguientes capítulos, donde abordamos sistemas más modernos como <code>fetch</code>, que permiten realizar peticiones de una forma mucho más cómoda, utilizando promesas.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../ajax/index.htm" title="AJAX: Peticiones HTTP">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>AJAX: Peticiones HTTP</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../fetch/index.htm" title="Fetch: Peticiones Asíncronas">
  <div>
    <span>Fetch: Peticiones Asíncronas</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
