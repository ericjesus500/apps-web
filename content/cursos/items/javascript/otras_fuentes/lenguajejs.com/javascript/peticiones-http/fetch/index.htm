<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Fetch: Peticiones Asíncronas - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Fetch es el nuevo mecanismo para realizar peticiones HTTP asíncronas de Javascript, basado en promesas. Aprende a realizarlas.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Fetch: Peticiones Asíncronas - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Fetch es el nuevo mecanismo para realizar peticiones HTTP asíncronas de Javascript, basado en promesas. Aprende a realizarlas.">
  <meta property="og:url" content="https://lenguajejs.com/javascript/peticiones-http/fetch/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/peticiones-http/fetch/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Fetch: Peticiones Asíncronas - Javascript en español">
  <meta property="twitter:description" content="Fetch es el nuevo mecanismo para realizar peticiones HTTP asíncronas de Javascript, basado en promesas. Aprende a realizarlas.">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../asincronia/que-es/index.htm" title="¿Qué es la asincronía?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../../fundamentos/introduccion/conceptos-previos/index.htm" title="Conceptos previos">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Peticiones HTTP
      </span>
            <a class="link" href="../ajax/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              AJAX: Peticiones HTTP
            </a>
            <a class="link" href="../xhr/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              XHR: XMLHttpRequest
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Fetch: Peticiones Asíncronas
            </a>
            <a class="link" href="../url/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              URL en Javascript
            </a>
            <a class="link" href="../cors/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Política CORS
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">Fetch: Peticiones Asíncronas</a></h1><h2 class="typewriter">Mecanismo moderno para hacer peticiones asíncronas</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../xhr/index.htm">XHR: XMLHttpRequest</a>
    <a class="current" href="index.htm">Fetch: Peticiones Asíncronas</a>
    <a href="../url/index.htm">URL en Javascript</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Una vez que aprendemos a realizar <a href="../xhr/index.htm">peticiones HTTP mediante XHR</a> nos damos cuenta que es un mecanismo muy interesante y útil, y que nos abre un mundo de posibilidades trabajando con Javascript. Sin embargo, con el tiempo nos vamos dando cuenta también, que la forma de trabajar con objetos <code>XMLHttpRequest</code>, aunque es muy potente requiere mucho trabajo que hace que el código no sea tan legible y práctico como quizás debería.</p>
<p>Entonces es cuando surge <code>fetch</code>, un sistema más moderno, basado en promesas de Javascript, para realizar peticiones HTTP asíncronas de una forma más legible y cómoda.</p>
<h3 id="peticiones-http-con-fetch" tabindex="-1"><a class="header-anchor" href="#peticiones-http-con-fetch">Peticiones HTTP con fetch</a></h3>
<p><strong>Fetch</strong> es el nombre de una nueva API para Javascript con la cuál podemos realizar peticiones HTTP asíncronas utilizando promesas y de forma que el código sea un poco más sencillo y menos verbose. La forma de realizar una petición es muy sencilla, básicamente se trata de llamar a <code>fetch</code> y pasarle por parámetro la URL de la petición a realizar:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/robots.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>El <code>fetch()</code> devolverá una <badge-type class="promise"></badge-type> que será aceptada cuando reciba una respuesta y sólo será rechazada si hay un fallo de red o si por alguna razón no se pudo completar la petición.</p>
<p>El modo más habitual de manejar las promesas es utilizando <a href="../../asincronia/promesas/index.htm"><code>.then()</code></a>, aunque también se puede utilizar <a href="../../asincronia/async-await/index.htm">async/await</a>. Esto se suele reescribir de la siguiente forma, que queda mucho más simple y evitamos constantes o variables temporales de un solo uso:</p>
<pre class="language-js "><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/robots.txt"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/** Código que procesa la respuesta **/</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Al método <code>.then()</code> se le pasa una función callback donde su parámetro <code>response</code> es el objeto de respuesta de la petición que hemos realizado. En su interior realizaremos la lógica que queramos hacer con la respuesta a nuestra petición.</p>
<h3 id="opciones-de-fetch" tabindex="-1"><a class="header-anchor" href="#opciones-de-fetch">Opciones de <code>fetch()</code></a></h3>
<p>A la función <code>fetch()</code>, al margen de la <code>url</code> a la que hacemos petición, se le puede pasar un segundo parámetro de opciones de forma opcional, un <badge-type class="object"></badge-type> con opciones de la petición HTTP:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"GET"</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/robots.txt"</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">/** Procesar los datos **/</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Un poco más adelante, veremos como trabajar con la respuesta <code>response</code>, pero vamos a centrarnos ahora en el parámetro opcional <code>options</code> de la petición HTTP. En este objeto podemos definir varios detalles:</p>
<table>
<thead>
<tr>
<th>Campo</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="string"></badge-type> <code>method</code></td>
<td>Método HTTP de la petición. Por defecto, <code>GET</code>. Otras opciones: <code>HEAD</code>, <code>POST</code>, etc...</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>headers</code></td>
<td>Cabeceras HTTP. Por defecto, <code>{}</code>.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>body</code></td>
<td>Cuerpo de la petición HTTP. Puede ser de varios tipos: <code>String</code>, <code>FormData</code>, <code>Blob</code>, etc...</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>credentials</code></td>
<td>Modo de credenciales. Por defecto, <code>omit</code>. Otras opciones: <code>same-origin</code> e <code>include</code>.</td>
</tr>
</tbody>
</table>
<p>Lo primero, y más habitual, suele ser indicar el método HTTP a realizar en la petición. Por defecto, se realizará un <code>GET</code>, pero podemos cambiarlos a <code>HEAD</code>, <code>POST</code>, <code>PUT</code> o cualquier otro tipo de método. En segundo lugar, podemos indicar objetos para enviar en el <code>body</code> de la petición, así como modificar las cabeceras en el campo <code>headers</code>:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>En este ejemplo, estamos enviando una petición <code>POST</code>, indicando en la cabecera que se envía contenido JSON y en el cuerpo de los datos, enviando el objeto <code>jsonData</code>, codificado como texto mediante <code>stringify()</code>.</p>
<p>Por último, el campo <code>credentials</code> permite modificar el modo en el que se realiza la petición. Por defecto, el valor <code>omit</code> hace que no se incluyan credenciales en la petición, pero es posible indicar los valores <code>same-origin</code>, que incluye las credenciales si estamos sobre el mismo dominio, o <code>include</code> que incluye las credenciales incluso en peticiones a otros dominios.</p>
<p>Recuerda que estamos realizando peticiones relativas al <strong>mismo dominio</strong>. En el caso de realizar peticiones a dominios diferentes obtendríamos un problema de CORS (<em>Cross-Origin Resource Sharing</em>) similar al siguiente:</p>
<blockquote>
<blockquote>
<blockquote>
<p>Access to fetch at 'https://otherdomain.com/file.json' from origin 'https://domain.com/' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.</p>
</blockquote>
</blockquote>
</blockquote>
<p>Más adelante hablaremos de <a href="../cors/index.htm">CORS</a> y de como solucionar estos problemas si necesitamos realizar peticiones a otros dominios.</p>
<h3 id="cabeceras-headers" tabindex="-1"><a class="header-anchor" href="#cabeceras-headers">Cabeceras (Headers)</a></h3>
<p>Aunque en el ejemplo anterior hemos creado las cabeceras como un <badge-type class="object"></badge-type> genérico de Javascript, es posible crear un objeto <code>Headers</code> con el que trabajar:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Content-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"br"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Para ello, aparte del método <code>.set()</code> podemos utilizar varios otros para trabajar con cabeceras, comprobar su existencia, obtener o cambiar los valores o incluso eliminarlos:</p>
<table>
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.has(</code><badge-type class="string"></badge-type><code>name)</code></td>
<td>Comprueba si la cabecera <code>name</code> está definida.</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>.get(</code><badge-type class="string"></badge-type><code>name)</code></td>
<td>Obtiene el valor de la cabecera <code>name</code>.</td>
</tr>
<tr>
<td><code>.set(</code><badge-type class="string"></badge-type><code>name, </code><badge-type class="string"></badge-type><code>value)</code></td>
<td>Establece o modifica el valor <code>value</code> a la cabecera <code>name</code>.</td>
</tr>
<tr>
<td><code>.append(</code><badge-type class="string"></badge-type><code>name, </code><badge-type class="string"></badge-type><code>value)</code></td>
<td>Añade un nuevo valor <code>value</code> a la cabecera <code>name</code>.</td>
</tr>
<tr>
<td><code>.delete(</code><badge-type class="string"></badge-type><code>name)</code></td>
<td>Elimina la cabecera <code>name</code>.</td>
</tr>
</tbody>
</table>
<p>Como muchos otros <a href="../../objetos/iteradores/index.htm">objetos iterables</a>, podemos utilizar los métodos <code>.entries()</code>, <code>.keys()</code> y/o <code>.values()</code> para recorrerlos:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> headers<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Clave: "</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"valor: "</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Para peticiones con pocas cabeceras no hay mayor problema, pero en peticiones más complejas utilizar <code>Headers</code> es una buena práctica.</p>
<h3 id="respuesta-response" tabindex="-1"><a class="header-anchor" href="#respuesta-response">Respuesta (Response)</a></h3>
<p>Si volvemos a nuestro ejemplo de la petición con <code>fetch</code>, observaremos que en el primer <code>.then()</code> tenemos un objeto <code>response</code>. Se trata de la respuesta que nos llega del servidor web al momento de recibir nuestra petición:</p>
<pre class="language-js "><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/robots.txt"</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">/** Procesar los datos **/</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Aunque en este ejemplo, simplemente estamos utilizando una <a href="../../introduccion/funciones/index.htm#arrow-functions">arrow function</a> que hace un <code>return</code> implícito de la promesa que devuelve el método <code>.text()</code>, dicho objeto <code>response</code> tiene una serie de propiedades y métodos que pueden resultarnos útiles al implementar nuestro código.</p>
<p>Por el lado de las <strong>propiedades</strong>, tenemos las siguientes:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="number"></badge-type> <code>.status</code></td>
<td>Código de error HTTP de la respuesta (100-599).</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>.statusText</code></td>
<td>Texto representativo del código de error HTTP anterior.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.ok</code></td>
<td>Devuelve <code>true</code> si el código HTTP es <code>200</code> (o empieza por <code>2</code>).</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.headers</code></td>
<td>Cabeceras de la respuesta.</td>
</tr>
<tr>
<td><badge-type class="string"></badge-type> <code>.url</code></td>
<td>URL de la petición HTTP.</td>
</tr>
</tbody>
</table>
<p>Si venimos de <code>XMLHttpRequest</code>, esto no nos resultará nada extraño. Las propiedades <code>.status</code> y <code>statusText</code> nos devuelven el <strong>código de error HTTP</strong> de la respuesta en formato numérico y cadena de texto respectivamente.</p>
<p>Sin embargo, existe una novedad respecto a XHR, y es que tenemos una propiedad <code>.ok</code> que nos devuelve <code>true</code> si el código de error de la respuesta es un valor del rango <code>2xx</code>, es decir, que todo ha ido correctamente. Así pues, tenemos una forma práctica y sencilla de comprobar si todo ha ido bien al realizar la petición:</p>
<pre class="language-js "><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/robots.txt"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span>
      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>Por último, tenemos la propiedad <code>.headers</code> que nos devuelve las cabeceras de la respuesta y la propiedad <code>.url</code> que nos devuelve la URL completa de la petición que hemos realizado.</p>
<h3 id="procesar-la-respuesta" tabindex="-1"><a class="header-anchor" href="#procesar-la-respuesta">Procesar la respuesta</a></h3>
<p>Por otra parte, la instancia <code>response</code> también tiene algunos <strong>métodos</strong> interesantes, la mayoría de ellos para procesar mediante una promesa los datos recibidos y facilitar el trabajo con ellos:</p>
<table>
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="string"></badge-type> <code>.text()</code></td>
<td>Devuelve una promesa con el texto plano de la respuesta.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.json()</code></td>
<td>Idem, pero con un objeto <code>json</code>. Equivale a usar <code>JSON.parse()</code>.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.blob()</code></td>
<td>Idem, pero con un objeto <code>Blob</code> (binary large object).</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.arrayBuffer()</code></td>
<td>Idem, pero con un objeto <code>ArrayBuffer</code> (buffer binario puro).</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.formData()</code></td>
<td>Idem, pero con un objeto <code>FormData</code> (datos de formulario).</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>.clone()</code></td>
<td>Crea y devuelve un clon de la instancia en cuestión.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>Response.error()</code></td>
<td>Devuelve un nuevo objeto <code>Response</code> con un error de red asociado.</td>
</tr>
<tr>
<td><badge-type class="object"></badge-type> <code>Response.redirect(url, code)</code></td>
<td>Redirige a una <code>url</code>, opcionalmente con un <code>code</code> de error.</td>
</tr>
</tbody>
</table>
<p>Observa que en los ejemplos anteriores hemos utilizado <code>response.text()</code>. Este método indica que queremos procesar la respuesta como datos textuales, por lo que dicho método devolverá una <badge-type class="promise"></badge-type> con los datos en texto plano, facilitando trabajar con ellos de forma manual:</p>
<pre class="language-js "><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/robots.txt"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Observa que en este fragmento de código, tras procesar la respuesta con <code>response.text()</code>, devolvemos una <badge-type class="promise"></badge-type> con el contenido en texto plano. Esta <badge-type class="promise"></badge-type> se procesa en el segundo <code>.then()</code>, donde gestionamos dicho contenido almacenado en <code>data</code>.</p>
<p>Ten en cuenta que tenemos varios métodos similares para procesar las respuestas. Por ejemplo, el caso anterior utilizando el método <code>response.json()</code> en lugar de <code>response.text()</code> sería equivalente al siguiente fragmento:</p>
<pre class="language-js "><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/contents.json"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Como se puede ver, con <code>response.json()</code> nos ahorraríamos tener que hacer el <code>JSON.parse()</code> de forma manual, por lo que el código es algo más directo.</p>
<h3 id="fetch-usando-then" tabindex="-1"><a class="header-anchor" href="#fetch-usando-then">Fetch usando <code>.then()</code></a></h3>
<p>Lo que vemos a continuación sería un ejemplo un poco más completo de todo lo que hemos visto hasta ahora:</p>
<ul>
<li>Comprobamos que la petición es correcta con <code>response.ok</code></li>
<li>Utilizamos <code>response.text()</code> para procesarla</li>
<li>En el caso de producirse algún error, lanzamos excepción con el código de error</li>
<li>Procesamos los datos y los mostramos en la consola</li>
<li>En el caso de que la <badge-type class="promise"></badge-type> sea rechazada, capturamos el error con el <code>catch</code></li>
<li>Si ocurre un error 404, 500 o similar, lanzamos error con <code>throw</code> para capturarlo en el <code>catch</code></li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/robots.txt"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span>
      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Datos: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"ERROR: "</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Podemos refactorizar un poco este ejemplo para hacerlo más legible. Creamos la función <code>isResponseOk()</code> para procesar la respuesta (<em>invirtiendo el condicional para hacerlo más directo</em>). Luego, los <code>.then()</code> y <code>.catch()</code> los utilizamos con una arrow function para simplificarlos:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">isResponseOk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/robots.txt"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token function">isResponseOk</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Datos: "</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"ERROR: "</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Sin embargo, aunque es bastante común trabajar con promesas utilizando <code>.then()</code>, también podemos hacer uso de <code>async/await</code> para manejar promesas, de una forma un poco más directa. La única diferencia es que con <code>.then()</code> el código no es bloqueante, mientras que con <code>async/await</code> si es bloqueante.</p>
<h3 id="fetch-usando-asyncawait" tabindex="-1"><a class="header-anchor" href="#fetch-usando-asyncawait">Fetch usando <code>async/await</code></a></h3>
<p>Utilizar <code>async/await</code> no es más que lo que se denomina <strong>azúcar sintáctico</strong>, es decir, utilizar algo visualmente más agradable, pero que por debajo realiza la misma tarea. Para ello, lo que debemos tener siempre presente es que un <code>await</code> sólo se puede ejecutar si esta dentro de una función definida como <code>async</code>.</p>
<p>En este caso, lo que hacemos es lo siguiente:</p>
<ul>
<li>Creamos una función <code>request(url)</code> que definimos con <code>async</code></li>
<li>Llamamos a <code>fetch</code> utilizando <code>await</code> para esperar y resolver la promesa</li>
<li>Comprobamos si todo ha ido bien usando <code>response.ok</code></li>
<li>Llamamos a <code>response.text()</code> utilizando <code>await</code> y devolvemos el resultado</li>
</ul>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"WARN"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> resultOk <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"/robots.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> resultError <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"/nonExistentFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Una vez hecho esto, podemos llamar a nuestra función <code>request</code> y almacenar el resultado, usando nuevamente <code>await</code>. Si aún te cuesta entender estos conceptos, te aconsejo echar un vistazo a estos dos artículos:</p>
<ul>
<li>Explicación de <a href="../../asincronia/promesas/index.htm">Promesas con <code>.then()</code></a> (<em>thenables, no bloqueantes</em>).</li>
<li>Explicación de <a href="../../asincronia/async-await/index.htm">Promesas con <code>async</code>/<code>await</code></a> (<em>bloqueantes</em>).</li>
</ul>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../xhr/index.htm" title="XHR: XMLHttpRequest">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>XHR: XMLHttpRequest</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../url/index.htm" title="URL en Javascript">
  <div>
    <span>URL en Javascript</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
