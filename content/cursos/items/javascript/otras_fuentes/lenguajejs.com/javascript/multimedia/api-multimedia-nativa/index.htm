<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#ecc022">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>API de Audio Javascript - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Desde nuestro propio navegador podemos utilizar la API multimedia nativa de Javascript y manipular archivos multimedia (audio o video).">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="API de Audio Javascript - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/javascript/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Desde nuestro propio navegador podemos utilizar la API multimedia nativa de Javascript y manipular archivos multimedia (audio o video).">
  <meta property="og:url" content="https://lenguajejs.com/javascript/multimedia/api-multimedia-nativa/">
  <meta property="twitter:url" content="https://lenguajejs.com/javascript/multimedia/api-multimedia-nativa/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="API de Audio Javascript - Javascript en español">
  <meta property="twitter:description" content="Desde nuestro propio navegador podemos utilizar la API multimedia nativa de Javascript y manipular archivos multimedia (audio o video).">
  <meta property="twitter:image" content="https://lenguajejs.com/javascript/large-summary.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (javascript)" href="../../index.htm" style="--image: url('../../../assets/javascript.jpg')"></a>

    <header>
      <a href="../../regexp/expresiones-regulares/index.htm" title="¿Qué es una expresión regular?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../web-apis/temporizadores/index.htm" title="Temporizadores">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Multimedia
      </span>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              API de Audio Javascript
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/javascript.jpg')">
    <h1><a href="index.htm">API de Audio Javascript</a></h1><h2 class="typewriter">API multimedia para reproducir audio o video</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../../regexp/crear-expresiones-regulares/index.htm">Crear expresiones regulares</a>
    <a class="current" href="index.htm">API de Audio Javascript</a>
    <a href="../../web-apis/temporizadores/index.htm">Temporizadores</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p><strong>Javascript</strong> proporciona una serie de <strong>API</strong> nativas para trabajar con archivos multimedia directamente desde el navegador. De esta forma, podemos permitir al usuario interactuar con recursos multimedia de forma dinámica, e incluso hacer multitud de interesantes aplicaciones que utilicen tanto archivos de audio como de video.</p>
<blockquote>
<p>Aunque se puede trabajar con muchos otros tipos de formatos multimedia como archivos <code>.mp4</code> (<em>video</em>) o archivos <code>.ogg</code> (<em>audio vorbis</em>), en este artículo trataremos archivos <code>.mp3</code>, ya que son los más populares en cuanto a archivos multimedia de audio. Muchas veces hablaremos de <strong>recursos multimedia</strong>, ya que igual que lo hacemos con un archivo de audio, se puede hacer con un archivo de video.</p>
</blockquote>
<h3 id="crear-audio-desde-javascript" tabindex="-1"><a class="header-anchor" href="#crear-audio-desde-javascript">Crear Audio desde Javascript</a></h3>
<p>Un ejemplo básico para reproducir un archivo multimedia <code>.mp3</code> (<em>obsérvese que está alojado en una página de GitHub</em>) desde nuestro navegador, podría ser el siguiente:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> audio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">"https://manzdev.github.io/codevember2017/assets/eye-tiger.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>La constante <code>audio</code> contiene una instancia del objeto <code>Audio</code>, al que se le pasa por parámetro la URL del archivo <code>.mp3</code> que queremos inicializar. En lugar de una URL, también podríamos indicar simplemente el nombre de un archivo <code>.mp3</code>, con lo que el navegador buscaría dicho archivo en la misma ruta donde tenemos nuestro archivo <code>.js</code> con el código Javascript.</p>
<p>Posteriormente, ejecutamos la función <code>.play()</code> de la instancia <code>audio</code> recién creada.</p>
<p>En este ejemplo, lo que hemos hecho realmente es crear una <a href="https://lenguajehtml.com/html/multimedia/etiquetas-html-de-audio/">etiqueta HTML de audio</a>, indicándole el archivo de audio a inicializar, sólo que esa etiqueta no reside «físicamente» en el documento HTML, si no que está en memoria, en la constante <code>audio</code>.</p>
<p>En el siguiente ejemplo podemos ver un ejemplo análogo al anterior:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> audio <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"audio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
audio<span class="token punctuation">.</span>preload <span class="token operator">=</span> <span class="token string">"auto"</span><span class="token punctuation">;</span>
audio<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://manzdev.github.io/codevember2017/assets/eye-tiger.mp3"</span><span class="token punctuation">;</span>
audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>audio<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Sin embargo, en esta última línea, hemos añadido esa etiqueta audio al documento HTML en el que nos encontramos, antes de cerrar el <code>&lt;/body&gt;</code>. Si quieres más información sobre esto, mira el capítulo de <a href="../../dom/que-es/index.htm">trabajo en el DOM</a>.</p>
<h4 id="propiedades-básicas" tabindex="-1"><a class="header-anchor" href="#propiedades-básicas">Propiedades básicas</a></h4>
<p>Al crear un objeto de audio mediante Javascript (<em>que no es más que una etiqueta HTML</em>), podemos utilizar la notación de objeto para crear <strong>propiedades</strong> que reflejarán el valor en atributos de la etiqueta HTML. De esta forma, podemos utilizar las siguientes propiedades, que son todas booleanas:</p>
<table>
<thead>
<tr>
<th>Propiedades</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.autoplay</code></td>
<td>El audio se reproducirá automáticamente. <strong>OJO:</strong> Es muy probable que no funcione<sup>*</sup>.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.controls</code></td>
<td>Muestra los controles (<em>play, pausa, tiempo, etc...</em>) del elemento multimedia.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.loop</code></td>
<td>Una vez el audio llegue a su fin, volverá a empezar.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.muted</code></td>
<td>El elemento multimedia está silenciado y no se escuchará.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.defaultMuted</code></td>
<td>El valor <code>muted</code> inicial por defecto, aunque <code>muted</code> se haya modificado posteriormente.</td>
</tr>
</tbody>
</table>
<p>Un ejemplo de su uso sería el siguiente, donde vemos que podemos tanto obtener su valor como asignar un booleano para modificarlo:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> audio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">"sound.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
audio<span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
audio<span class="token punctuation">.</span>controls <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>Desde 2017, Chrome, Firefox y otros navegadores establecieron un <a href="https://developers.google.com/web/updates/2017/09/autoplay-policy-changes">cambio de políticas</a> con el atributo de reproducción automática <code>autoplay</code>. Para evitar molestos comportamientos de audio indeseado en páginas webs, por defecto la autoreproducción sólo funciona si <strong>el usuario ha interactuado antes en la página</strong>. Lo recomendable es sólo reproducir música o sonido si el usuario hace una acción específica (<em>click de ratón o similar</em>).</p>
</blockquote>
<h4 id="propiedades-de-reproducción" tabindex="-1"><a class="header-anchor" href="#propiedades-de-reproducción">Propiedades de reproducción</a></h4>
<p>Si quisieramos modificar nuestro objeto de Audio para indicarle un archivo multimedia diferente, sólo tendríamos que asignarle un <badge-type class="string"></badge-type> diferente a la propiedad <code>url</code>. De esta forma, tenemos muchas más propiedades, relacionadas con la reproducción multimedia:</p>
<table>
<thead>
<tr>
<th>Propiedades</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="string"></badge-type> <code>.src</code></td>
<td>Propiedad que devuelve la <strong>URL</strong> al archivo multimedia de audio.</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.volume</code></td>
<td>Volumen del audio, desde <code>0</code> (<em>silencio</em>) a <code>1</code> (<em>máximo</em>). Permite decimales.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.paused</code></td>
<td>Indica si el audio está pausado (<em>cualquier estado que no sea reproduciendo</em>).</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.ended</code></td>
<td>Indica si el audio se ha terminado de reproducir.</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.currentTime</code></td>
<td>Número de segundos (<em>con decimales</em>) en el que se encuentra la reproducción.</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.duration</code></td>
<td>Duración total en segundos (<em>con decimales</em>) del audio.</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.playbackRate</code></td>
<td>Velocidad de reproducción, desde <code>0</code> hasta <code>4</code>. Velocidad normal: <code>1</code>. Muteado: <code>0</code>.</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.defaultPlaybackRate</code></td>
<td>El valor inicial de <code>playbackRate</code>, tras haberlo modificado.</td>
</tr>
</tbody>
</table>
<p>Observa en el siguiente ejemplo que, <code>.currentTime</code> además de usarse para obtener el momento exacto en el que se encuentra la reproducción, también se puede utilizar para modificar ese momento. Por ejemplo, <code>.currentTime = 0</code> se podría utilizar para inicializar el sonido:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> audio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">"https://manzdev.github.io/codevember2017/assets/eye-tiger.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

audio<span class="token punctuation">.</span>volume <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>               <span class="token comment">// Volumen al 50%</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>audio<span class="token punctuation">.</span>paused<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// true (no se está reproduciendo)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>audio<span class="token punctuation">.</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>audio<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 17.81551 (17 secs, 815.51 ms)</span>
audio<span class="token punctuation">.</span>currentTime <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token comment">// Move to 5 secs</span>
audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// Starts audio from 5 sec</span></code></pre>
<h4 id="propiedades-de-precarga" tabindex="-1"><a class="header-anchor" href="#propiedades-de-precarga">Propiedades de precarga</a></h4>
<p>Cuando establecemos el atributo <code>.src</code> en un elemento de audio, el navegador automáticamente llama a la función <code>.load()</code> (<em>ver más adelante</em>) y se comienza a precargar el elemento de audio, dependiendo del valor que tenga la propiedad o atributo <code>.preload</code>. Veamos varias de las propiedades relacionadas con la precarga de un objeto de Audio:</p>
<table>
<thead>
<tr>
<th>Propiedades</th>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="string"></badge-type> <code>.preload</code></td>
<td><strong>auto</strong> (<em>valor por defecto</em>) <br><code>metadata</code> sólo deben precargarse los metadatos <br><code>none</code> no debe precargarse nada.</td>
<td>Indica si el audio debe precargarse.</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.networkState</code></td>
<td><code>NETWORK_EMPTY</code> (0) - No hay datos aún<br><code>NETWORK_IDLE</code> (1) - No está descargando información<br><code>NETWORK_LOADING</code> (2) - Está descargando información<br><code>NETWORK_NO_SOURCE</code> (3) - No se encontró fuente <code>.src</code><br></td>
<td>Indica en que estado está la red.</td>
</tr>
<tr>
<td><badge-type class="number"></badge-type> <code>.readyState</code></td>
<td><code>HAVE_NOTHING</code> (0) - Sin información<br><code>HAVE_METADATA</code> (1) - Hay metadatos, sólo de búsqueda.<br><code>HAVE_CURRENT_DATA</code> (2) - Datos suficientes para punto actual.<br><code>HAVE_FUTURE_DATA</code> (3) - Datos suficientes para saltos cercanos.<br><code>HAVE_ENOUGH_DATA</code> (4) - Datos suficientes para saltos sin cortes.</td>
<td>Indica el estado del recurso multimedia.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>.seeking</code></td>
<td colspan="2">Indica si está en proceso de moverse a un nuevo instante de tiempo (<em>buscando</em>).</td>
</tr>
</tbody>
</table>
<p>Mientras que el valor <code>preload</code> puede indicarse como un atributo HTML, el resto de propiedades no se pueden indicar, y son exclusivas de la API de Javascript. Generalmente suelen utilizarse para saber el estado de carga de un elemento de audio o información relacionada.</p>
<h3 id="métodos-o-funciones-de-audio" tabindex="-1"><a class="header-anchor" href="#métodos-o-funciones-de-audio">Métodos o funciones de audio</a></h3>
<p>Los métodos que más nos pueden interesar en la API de Audio de Javascript son los de <code>.play()</code> y <code>.pause()</code>, ya que son los que comienzan a reproducir (<em>o continuan una reproducción pausada previamente</em>) y detienen una reproducción respectivamente.</p>
<blockquote>
<p>Quizás, el método más extraño sea <code>.canPlayType(mimetype)</code>, el cuál se puede llamar, indicando como parámetro el <code>mimetype</code> de un fichero de audio: por ejemplo, en el caso de un <code>.mp3</code> sería <code>audio/mp3</code> y en el caso de un <code>.ogg</code> sería <code>audio/ogg</code>. En el primer caso, Chrome nos devuelve el <badge-type class="string"></badge-type> <code>probably</code> que indica que es muy probable que esté soportado, mientras que en el segundo caso devuelve <code>maybe</code>, con el que indica que es menos probable, y depende de otros factores (<em>sistema operativo, etc...</em>).</p>
</blockquote>
<p>Por otro lado, tenemos el método <code>.load()</code> que se encarga de inicializar un recurso y comenzar a procesarlo, dependiendo del valor actual del atributo <code>preload</code> que hablamos antes. El método <code>.load()</code> se llama automágicamente al cambiar el atributo o propiedad <code>.src</code>.</p>
<table>
<thead>
<tr>
<th>Métodos</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="string"></badge-type> <code>.canPlayType(mimetype)</code></td>
<td>Indica si el tipo <em>MIME</em> indicado está soportado (<em>probably</em>) o no (<em>maybe</em>).</td>
</tr>
<tr>
<td><code>.load()</code></td>
<td>Inicializa el recurso multimedia para prepararlo para reproducir.</td>
</tr>
<tr>
<td><badge-type class="promise"></badge-type> <code>.play()</code></td>
<td>Comienza a reproducir (<em>o reanuda</em>) el audio en cuestión.</td>
</tr>
<tr>
<td><code>.pause()</code></td>
<td>Pausa el sonido, con la posibilidad de reanudarlo.</td>
</tr>
</tbody>
</table>
<p>Por último, tenemos los métodos <code>.play()</code> (<em>reproducir un audio</em>) y <code>.pause()</code> (<em>detener un audio</em>), que tienen algunas puntualizaciones:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> audio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">"audio.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// Comienza a reproducir el audio</span>
audio<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Pausa el audio</span>
audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// Continua el audio por donde fue pausado</span>

audio<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Vuelve a pausar</span>
audio<span class="token punctuation">.</span>currentTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Coloca la reproducción en el segundo 0 (inicio)</span>
audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// Reproduce desde el inicio</span></code></pre>
<p>Es importante mencionar que el método <code>.play()</code> devuelve una promesa que se resuelve cuando el audio está descargado y ha comenzado a reproducirse. Ten en cuenta que dicho audio está alojado en una página web y puede no estar disponible en el momento de reproducir el audio, es por esto que devuelve una promesa:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> audio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">"audio.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Ha comenzado a reproducirse el sonido..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Sin embargo, el audio, al ser una acción auditiva, que no requiere visualización implícita, muchas veces no es necesario controlar la promesa y se puede ejecutar el <code>.play()</code> directamente.</p>
<h3 id="eventos-de-audio" tabindex="-1"><a class="header-anchor" href="#eventos-de-audio">Eventos de audio</a></h3>
<p>Una de las partes más interesantes de la <strong>API</strong> multimedia es la posibilidad de jugar con <strong>eventos multimedia</strong> relacionados con objetos de audio. Recuerda que los eventos en Javascript son acciones muy específicas que suceden en momentos concretos de la vida de nuestra aplicación o web:</p>
<ul>
<li><strong>Cuando</strong> el usuario hace click...</li>
<li><strong>Cuando</strong> el usuario hace scroll...</li>
<li><strong>Cuando</strong> el usuario pausa un sonido en la barra de control...</li>
</ul>
<p>De esta forma, tenemos múltiples tipos de eventos que podemos utilizar. En este primer bloque encontraremos los eventos que ocurren en momentos comunes de la reproducción de un recurso multimedia, como cuando comenzamos a reproducirlo, lo detenemos o vamos a un momento específico de su duración:</p>
<table>
<thead>
<tr>
<th>Eventos de reproducción</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.pause</code></td>
<td>Se ha pausado y detenido la reproducción del recurso multimedia.</td>
</tr>
<tr>
<td><code>.play</code></td>
<td>Se ha comenzado (<em>o reanudado</em>) la reproducción del recurso multimedia.</td>
</tr>
<tr>
<td><code>.ended</code></td>
<td>Se ha llegado al final del recurso multimedia.</td>
</tr>
<tr>
<td><code>.seeking</code></td>
<td>Ha comenzado la búsqueda de una posición de tiempo en un recurso multimedia.</td>
</tr>
<tr>
<td><code>.seeked</code></td>
<td>Ha terminado la búsqueda de una posición de tiempo en un recurso multimedia.</td>
</tr>
</tbody>
</table>
<p>Veamos un ejemplo básico de uso de algunos de estos eventos:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> audio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">"audio.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

audio<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"play"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Se ha comenzado/reanudado la reproducción"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

audio<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Se ha pausado la reproducción"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Por otro lado, también podemos ejecutar una lógica específica cuando suceden ciertos eventos relacionados con el cambio de alguno de sus parámetros iniciales, como la velocidad de reproducción o el segundo actual de reproducción:</p>
<table>
<thead>
<tr>
<th>Eventos de cambios</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.ratechange</code></td>
<td>Se ha modificado la velocidad de reproducción del recurso multimedia.</td>
</tr>
<tr>
<td><code>.durationchange</code></td>
<td>La duración del recurso multimedia ha cambiado.</td>
</tr>
<tr>
<td><code>.timeupdate</code></td>
<td>El instante actual de tiempo de reproducción ha cambiado. Se dispara continuamente.</td>
</tr>
<tr>
<td><code>.volumechange</code></td>
<td>El volumen del recurso multimedia ha sido modificado.</td>
</tr>
</tbody>
</table>
<p>Observa en el siguiente ejemplo, que el evento <code>timeupdate</code> se ejecutará varias veces en el mismo segundo, no una sola vez por segundo como quizás se imagina inicialmente. Esto ocurre porque la precisión de la actualización de tiempo, afecta a milisegundos, por lo que se ejecuta varias veces en el mismo segundo:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> audio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">"audio.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

audio<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"timeupdate"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Current second: "</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>audio<span class="token punctuation">.</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Por último, tenemos múltiples eventos relacionados con la carga o precarga de los recursos multimedia, sus metadatos o el proceso de «buffering» donde la reproducción no se puede realizar porque aún no se ha descargado la suficiente cantidad de datos para reproducir:</p>
<table>
<thead>
<tr>
<th>Eventos de carga</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.abort</code></td>
<td>La carga del recurso multimedia se ha detenido, pero no por un error.</td>
</tr>
<tr>
<td><code>.error</code></td>
<td>La carga del recurso multimedia se ha detenido, resultado de un error.</td>
</tr>
<tr>
<td><code>.suspend</code></td>
<td>Se suspende (<em>intencionalmente</em>) la carga de datos del recurso multimedia.</td>
</tr>
<tr>
<td><code>.canplay</code></td>
<td>Se puede reproducir el recurso multimedia, pero habrá que esperar por «buffering».</td>
</tr>
<tr>
<td><code>.canplaythrough</code></td>
<td>Se puede reproducir el recurso multimedia sin necesidad de esperar «buffering».</td>
</tr>
<tr>
<td><code>.emptied</code></td>
<td>La carga del recurso se ha quedado vacía. Ejemplo: Después de un <code>.load()</code>.</td>
</tr>
<tr>
<td><code>.loadstart</code></td>
<td>El navegador ha comenzado a cargar un recurso multimedia.</td>
</tr>
<tr>
<td><code>.loadeddata</code></td>
<td>El navegador ha precargado el primer bloque de datos del recurso multimedia.</td>
</tr>
<tr>
<td><code>.loadedmetadata</code></td>
<td>El navegador ha precargado los metadatos del recurso multimedia.</td>
</tr>
<tr>
<td><code>.playing</code></td>
<td>Tras una falta de datos, el recurso multimedia vuelve a estar listo para reproducirse.</td>
</tr>
<tr>
<td><code>.progress</code></td>
<td>Se dispara frecuentemente, cuando el navegador ha cargado dicho recurso.</td>
</tr>
<tr>
<td><code>.waiting</code></td>
<td>La reproducción se ha detenido por ausencia (<em>temporal</em>) de datos.</td>
</tr>
<tr>
<td><code>.stalled</code></td>
<td>El navegador intenta obtener datos de un recurso pero no los recibe.</td>
</tr>
</tbody>
</table>
<p>Muchos de estos eventos nos permiten personalizar como actuará nuestra aplicación o web respecto a lo que haya sucedido.</p>
<blockquote>
<blockquote>
<blockquote>
<p>Cuidado: No confundir el evento <code>.onplay</code> con el evento <code>.onplaying</code>. El segundo es el que ocurre cuando ya podemos reproducir un audio porque estaba en proceso de «buffering», mientras que el primero es el que se dispara cuando comenzamos o continuamos una reproducción multimedia.</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="librerías-de-terceros" tabindex="-1"><a class="header-anchor" href="#librerías-de-terceros">Librerías de terceros</a></h3>
<p>Es posible que en algunos casos, la API multimedia nativa de Javascript se nos quede corta. En ese caso, existen algunas librerías interesantes que pueden servirnos para simplificar nuestro código y realizar acciones más concretas.</p>
<p>Por ejemplo, <code>Howler.js</code> es una excelente librería para cuando la API nativa se nos queda corta o necesitamos algo un poco más potente:</p>
<table>
<thead>
<tr>
<th>Librería</th>
<th>Descripción</th>
<th>URL</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Howler.js</code></td>
<td>Librería para trabajar con audio de forma sencilla.</td>
<td><a href="https://howlerjs.com/">Howler.js</a></td>
<td><a href="https://github.com/goldfire/howler.js">GitHub</a></td>
</tr>
<tr>
<td><code>Tone.js</code></td>
<td>Framework de audio (DAW) para crear música interactiva.</td>
<td><a href="https://tonejs.github.io/">Tone.js</a></td>
<td><a href="https://github.com/Tonejs/Tone.js">GitHub</a></td>
</tr>
<tr>
<td><code>Pizzicato</code></td>
<td>Librería para crear y manipular sonidos vía Web Audio API.</td>
<td><a href="https://alemangui.github.io/pizzicato/">Pizzicato</a></td>
<td><a href="https://github.com/alemangui/pizzicato">GitHub</a></td>
</tr>
<tr>
<td><code>WaveSurferJS</code></td>
<td>Visualización en forma de onda usando Web Audio / Canvas.</td>
<td><a href="https://wavesurfer-js.org/">WaveSurfer</a></td>
<td><a href="https://github.com/katspaugh/wavesurfer.js">GitHub</a></td>
</tr>
<tr>
<td><code>Web Audio DAW</code></td>
<td>Estación de trabajo de Audio Digital. Un «jQuery» de audio.</td>
<td>-</td>
<td><a href="https://github.com/rserota/wad">GitHub</a></td>
</tr>
<tr>
<td><code>Blip</code></td>
<td>Librería ligera que usa Web Audio y lo simplifica.</td>
<td><a href="https://jshanley.github.io/blip/">BlipJS</a></td>
<td><a href="https://github.com/jshanley/blip">GitHub</a></td>
</tr>
</tbody>
</table>
<p>Otras librerías como <code>Tone.js</code> o <code>Pizzicato</code> nos permiten centrarnos en la generación de sonidos utilizando la API Web Audio y/o utilizando sonidos externos.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../../regexp/crear-expresiones-regulares/index.htm" title="Crear expresiones regulares">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Crear expresiones regulares</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../../web-apis/temporizadores/index.htm" title="Temporizadores">
  <div>
    <span>Temporizadores</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/sU4e6_i_ExU" title="Consejos y buenas prácticas (IV): Javascript + Imágenes">
  <img loading="lazy" src="../../../vi/sU4e6_i_ExU/mqdefault.jpg" alt="Consejos y buenas prácticas (IV): Javascript + Imágenes">
</a><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../../automatizadores/index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
