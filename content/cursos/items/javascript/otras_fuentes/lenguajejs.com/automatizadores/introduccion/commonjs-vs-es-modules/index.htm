<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#b59374">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>CommonJS vs ES Modules - Javascript en español - Lenguaje JS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Diferencias entre CommonJS (CJS) y ES Modules (ESM) y otros sistemas de módulos Javascript o relacionados (AMD, IFEE, UMD, etc...) y su historia.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="CommonJS vs ES Modules - Javascript en español">
  <meta property="og:image" content="https://lenguajejs.com/automatizadores/introduccion/commonjs-vs-es-modules/cjs-vs-esm.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Diferencias entre CommonJS (CJS) y ES Modules (ESM) y otros sistemas de módulos Javascript o relacionados (AMD, IFEE, UMD, etc...) y su historia.">
  <meta property="og:url" content="https://lenguajejs.com/automatizadores/introduccion/commonjs-vs-es-modules/">
  <meta property="twitter:url" content="https://lenguajejs.com/automatizadores/introduccion/commonjs-vs-es-modules/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="CommonJS vs ES Modules - Javascript en español">
  <meta property="twitter:description" content="Diferencias entre CommonJS (CJS) y ES Modules (ESM) y otros sistemas de módulos Javascript o relacionados (AMD, IFEE, UMD, etc...) y su historia.">
  <meta property="twitter:image" content="https://lenguajejs.com/automatizadores/introduccion/commonjs-vs-es-modules/cjs-vs-esm.jpg">

  </head>

<body class="js menu-open " style="--logo-color: #f0db4f"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje JS</h1>

    <a class="cover" title="Lenguaje JS (automatizadores)" href="../../index.htm" style="--image: url('../../../assets/automatizadores.jpg')"></a>

    <header>
      <a href="../../../vuejs/directivas-vue/que-son-directivas/index.htm" title="¿Qué son las directivas de Vue?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../vite/guia-tutorial-inicial-de-vite/index.htm" title="Guía tutorial inicial de Vite">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Introducción a automatizadores
      </span>
            <a class="link" href="../que-es-un-automatizador/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              ¿Qué es un automatizador?
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              CommonJS vs ES Modules
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#js"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeJS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/automatizadores.jpg')">
    <h1><a href="index.htm">CommonJS vs ES Modules</a></h1><h2 class="typewriter">CJS, ESM y otros módulos para Javascript</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../que-es-un-automatizador/index.htm">¿Qué es un automatizador?</a>
    <a class="current" href="index.htm">CommonJS vs ES Modules</a>
    <a href="../../vite/guia-tutorial-inicial-de-vite/index.htm">Guía tutorial inicial de Vite</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Es probable, sobre todo si no llevas mucho tiempo en el ecosistema Javascript, que te hayas encontrado con conceptos como <strong>CommonJS</strong> (<em>CJS</em>), <strong>ES Modules</strong> (<em>ESM</em>), o incluso algunos ya menos frecuentes como <strong>AMD</strong>, <strong>System</strong>, <strong>UMD</strong>, <strong>IIFE</strong> o similares. Dichas siglas o nombres, suelen hacer referencia al <strong>sistema de módulos</strong> (<em>importaciones desde otros archivos</em>) utilizado en Javascript.</p>
<h3 id="un-poco-de-historia" tabindex="-1"><a class="header-anchor" href="#un-poco-de-historia">Un poco de historia</a></h3>
<p>Antes de <strong>2015</strong>, momento en el que nace <strong>ECMAScript 2015</strong> (<em>antes llamado ES6</em>) con multitud de cambios y novedades, Javascript carecía de sistema de módulos oficial. Aunque pueda parecer extraño, tiene su sentido: Javascript nació como un lenguaje de programación para el navegador, que servía de apoyo a las páginas HTML+CSS para dotar de interactividad y de mayor dinamismo a su funcionamiento.</p>
<p>Con el tiempo, se comienza a utilizar más y más Javascript en los sitios web. Pero donde se produce un antes y un después, es cuando se hace posible utilizar <strong>Javascript fuera del navegador</strong>. Su implementación más popular es <a href="https://nodejs.org/es/">NodeJS</a>, aunque actualmente existen otras como por ejemplo <a href="https://deno.land/">Deno</a>. Todo esto, junto a la fuerte evolución de Javascript, vuelve muy necesario tener un sistema para incluir código desde ficheros externos y permitir organizar mejor código Javascript que comenzaba a ser muy extenso.</p>
<h3 id="qué-es-iife" tabindex="-1"><a class="header-anchor" href="#qué-es-iife">¿Qué es IIFE?</a></h3>
<p>Las siglas <strong>IIFE</strong> significan <strong>Expresión de función invocada inmediatamente</strong> (<em>Immediately-invoked function expression</em>), y es una de las primeras formas que aparecen de conseguir encapsular contenido privado en Javascript, antes de <strong>2015</strong>. Esto solía conocerse como <strong>patrón módulo revelador</strong> (<em>Revealing Module Pattern</em>):</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* Data */</span>
  <span class="token comment">/* Methods */</span>

  <span class="token comment">// Revealing module</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">/* Public data/methods */</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Aunque no lo parezca, el funcionamiento era simple. Como no teníamos forma de declarar <strong>datos privados</strong>, la opción utilizada era crear una <badge-type class="function"></badge-type> que en su interior contiene variables y/o funciones. Por último, se devolvía un <badge-type class="object"></badge-type> con los datos/funciones que queríamos que fueran públicos. Los demás, eran privados porque no salían de la función, la cuál se encerraba entre paréntesis y se «autoejecutaba». De esta forma, lo que recibíamos en <code>module</code> era el «<strong>objeto revelado</strong>».</p>
<p>Como se puede ver, algo muy similar al concepto de clases que conocemos habitualmente. Sin embargo, seguíamos con el problema de no poder importarlo/exportarlo en ficheros a parte.</p>
<h3 id="qué-es-commonjs-cjs" tabindex="-1"><a class="header-anchor" href="#qué-es-commonjs-cjs">¿Qué es CommonJS (CJS)?</a></h3>
<p><strong>CommonJS</strong> surge cerca de 2009 como una serie de pautas para crear un sistema de módulos en el ecosistema Javascript. Algo más tarde, el equipo de <strong>NodeJS</strong> implementó parcialmente una versión síncrona de CommonJS, por lo que consigue popularizar un sistema de módulos no oficial como el que puedes ver a continuación:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// module-name.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.js</span>
<span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./module-name.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">package</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>De esta forma, haciendo un <code>require()</code> podemos importar módulos <strong>CommonJS</strong> que se exportan con un <code>module.exports</code> desde otros archivos. También es habitual encontrar importaciones de paquetes que habitualmente residen en la carpeta <a href="../../../npm/administracion/carpeta-node_modules/index.htm">node_modules</a>, obteniendo la carpeta principal del campo <code>main</code> del <a href="../../../npm/administracion/package-json/index.htm">package.json</a>. Este sistema se conocería más tarde como <a href="../../../javascript/modulos/que-es-esm/index.htm#bare-imports">bare imports</a> (<em>importaciones desnudas</em>), haciendo referencia a que no se indica una ruta de un archivo, sino un <badge-type class="string"></badge-type> con el nombre del paquete.</p>
<p>Sin embargo, estos <code>require()</code> son creados por <strong>NodeJS</strong> y no son compatibles directamente en navegadores, salvo que se <strong>preprocese o transpile</strong> antes con alguna herramienta como podría ser un empaquetador o automatizador del estilo de <strong>Webpack</strong>, <strong>Parcel</strong>, <strong>Rollup</strong>, <strong>Babel</strong> o similar. Estas herramientas buscan los <code>require()</code> y los sustituyen por el código del fichero correspondiente, uniendo y empatando todos los archivos Javascript necesarios de nuestra aplicación web en un sólo archivo Javascript llamado <strong>bundle</strong>.</p>
<h3 id="qué-es-amd" tabindex="-1"><a class="header-anchor" href="#qué-es-amd">¿Qué es AMD?</a></h3>
<p><strong>AMD</strong> (<em>Asynchronous Module Definition</em>) nació del descontento de las limitaciones síncronas que tenía <strong>CommonJS</strong>, que no permitían cargar eficientemente módulos en el lado del cliente. No se llegó a hacer tan popular y extendido como <strong>CommonJS</strong>, además su sintaxis era algo más compleja de entender:</p>
<pre class="language-js "><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dep1'</span><span class="token punctuation">,</span> <span class="token string">'dep2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dep1<span class="token punctuation">,</span> dep2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>AMD</strong> podría verse como una mezcla del <strong>patrón módulo revelador</strong> y una sintaxis donde se usa <code>define(deps, module)</code> para cargar módulos. El parámetro <code>deps</code> es un <badge-type class="array"></badge-type> donde se definen los nombres de las dependencias que se necesitan para ejecutar la función <code>module</code>. Si están cargados, se ejecuta, si no, se carga asincronamente hasta que estén disponibles.</p>
<p>La implementación más popular de AMD fue <a href="https://requirejs.org/">require.js</a> y era bastante prometedora, sin embargo, los <strong>ES Modules</strong> aterrizaron en 2015 y al ser nativos y estándar (<em>y mucho más simples</em>), todos estos sistemas de módulos pasarían a un segundo plano o un plano <strong>legacy</strong>.</p>
<blockquote>
<p>Antes de popularizarse <strong>CommonJS</strong> con Node, nunca se llegó a decidir de forma unánime entre <strong>AMD</strong> y <strong>CommonJS</strong>, por lo que apareció también un patrón llamado <strong>UMD</strong> (<em>Universal Module Definition</em>), que básicamente era un fragmento de código que permitía cargar módulos independientemente de si eran <strong>AMD</strong> o <strong>CommonJS</strong>, ya que permitía cargar ambos. Eso sí, la sintaxis era considerablemente más fea y compleja. Poco más tarde, aparecería <a href="https://github.com/systemjs/systemjs">System.js</a> ofreciendo lo mismo.</p>
</blockquote>
<h3 id="qué-es-es-modules-esm" tabindex="-1"><a class="header-anchor" href="#qué-es-es-modules-esm">¿Qué es ES Modules (ESM)?</a></h3>
<p>En 2015, aterriza <strong>ECMAScript 2015</strong> (<em>antiguamente ES6</em>) y con ella multitud de novedades en Javascript. Una de ellas, el sistema de módulos nativos de Javascript. Los tienes detalladamente explicados en <a href="../../../javascript/modulos/que-es-esm/index.htm">Módulos ECMAScript (ESM)</a>, pero básicamente, son una evolución de lo mejor de los anteriores, en versión simplificada:</p>
<pre class="language-js "><code class="language-js"><span class="token comment">// module.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> method <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./module.js"</span><span class="token punctuation">;</span></code></pre>
<p>Este sistema de módulos nativo por fin nos permite cargar módulos externos con una sintaxis simple y de forma síncrona y asíncrona. Eso sí, con una pequeña pega que seguiremos sufriendo durante un tiempo: esperar que la industria vaya abandonando <strong>CommonJS</strong> a favor de <strong>ESM</strong>.</p>
<h3 id="commonjs-vs-esm" tabindex="-1"><a class="header-anchor" href="#commonjs-vs-esm">CommonJS vs ESM</a></h3>
<p>Hoy en día, de todo lo anterior, lo más común suele ser utilizar <strong>CommonJS</strong> o <strong>ESM</strong>. En ecosistemas donde predomina la utilización de <strong>NodeJS</strong>, es más frecuente encontrarse usando <strong>CommonJS</strong>, mientras que en sistemas más modernos, de navegador o, por ejemplo, <strong>Deno</strong>, es más habitual utilizar el enfoque de <strong>ESM</strong>.</p>
<p>Al margen de su sintaxis, la cuál ya hemos visto en los ejemplos anteriores, ambos tienen sus diferencias pero las más populares son las siguientes:</p>
<p><img src="commonjs-vs-esm.png" alt="CommonJS vs ES Modules" width="1024" height="550" loading="lazy"></p>
<ul>
<li>
<p><a href="https://nodejs.org/en/">NodeJS</a> soporta tradicionalmente la sintaxis <code>require</code> de <strong>CommonJS</strong>, y aunque cada vez soporta mejor <strong>ESM</strong>, aún el soporte no es completo y tiene una amplia comunidad con paquetes utilizando <strong>CommonJS</strong> a través de <strong>NPM</strong>.</p>
</li>
<li>
<p><strong>CommonJS</strong> sólo permite cargar módulos de forma síncrona, mientras que <strong>ESM</strong> permite carga síncrona y asíncrona.</p>
</li>
<li>
<p><strong>NodeJS</strong> permite hacer <code>require()</code> de <a href="../../../javascript/modulos/que-es-esm/index.htm#bare-imports">bare imports</a> utilizando <code>npm</code> mientras que <strong>ESM</strong> puede hacerlo mediante <a href="https://wicg.github.io/import-maps/">import maps</a>, un fichero <code>.json</code> que incluye la URL de referencias a los nombres de los paquetes «desnudos».</p>
</li>
<li>
<p>Los <code>require</code> de <strong>CommonJS</strong> no son compatibles en el navegador de forma directa, mientras que los <code>import</code> de <strong>ESM</strong> si lo son si se indica el atributo <code>&lt;script type=&quot;module&quot;&gt;</code> en los scripts que los utilicen.</p>
</li>
<li>
<p><strong>CommonJS</strong> no permite cargar directamente desde una URL o CDN un módulo, mientras que con <strong>ESM</strong> puedes hacerlo sin problemas y funciona directamente desde un navegador.</p>
</li>
<li>
<p>Con <strong>ESM</strong> es posible hacer <strong>tree-shaking</strong> (<em>eliminación de código no utilizado</em>) de serie, mientras que en cambio con <strong>CommonJS</strong> no es posible, aunque se puede conseguir utilizando plugins de terceros de Webpack como <a href="https://github.com/indutny/webpack-common-shake">webpack-common-shake</a>.</p>
</li>
<li>
<p><strong>CommonJS</strong> se utiliza en sistemas que generan bundles y utilizan técnicas de preprocesado o transpilado para generar builds. Por otro lado, <strong>ESM</strong> puede utilizarse tanto en entornos de procesados/transpilado o directamente desde el navegador, sin necesidad de transpilar. <a href="https://www.skypack.dev/">SkyPack.dev</a> es un proyecto que pretende fomentar y popularizar el uso de paquetes de <code>npm</code> optimizados para utilizar sin necesidad de herramientas de preprocesado.</p>
</li>
<li>
<p><a href="https://deno.land/manual#comparison-to-nodejs">Deno utiliza ESM</a> por defecto, y no soporta los <code>require</code> de <strong>CommonJS</strong>. Sin embargo, pueden soportarse con un <a href="https://github.com/denoland/deno_std/tree/main/node">módulo para Deno de compatibilidad con Node</a>.</p>
</li>
</ul>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../que-es-un-automatizador/index.htm" title="¿Qué es un automatizador?">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>¿Qué es un automatizador?</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../../vite/guia-tutorial-inicial-de-vite/index.htm" title="Guía tutorial inicial de Vite">
  <div>
    <span>Guía tutorial inicial de Vite</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/EiKYr5vjs48" title="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
  <img loading="lazy" src="../../../vi/EiKYr5vjs48/mqdefault.jpg" alt="Diferencias entre getElementById vs querySelector (y otros métodos del DOM)">
</a><a href="https://youtu.be/Xi07tHFzqR8" title="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
  <img loading="lazy" src="../../../vi/Xi07tHFzqR8/mqdefault.jpg" alt="Cómo CLONAR objetos en Javascript correctamente (structuredClone)">
</a><a href="https://youtu.be/A11eG1o611M" title="Creador de historias con Javascript y ChatGPT">
  <img loading="lazy" src="../../../vi/A11eG1o611M/mqdefault.jpg" alt="Creador de historias con Javascript y ChatGPT">
</a><a href="https://youtu.be/KE2xRDM4Amg" title="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
  <img loading="lazy" src="../../../vi/KE2xRDM4Amg/mqdefault.jpg" alt="¡Crea tus PROPIAS ETIQUETAS HTML sin FRAMEWORKS!">
</a><a href="https://youtu.be/UVauEId-jJ0" title="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
  <img loading="lazy" src="../../../vi/UVauEId-jJ0/mqdefault.jpg" alt="¡Crea código HTML REUTILIZABLE con la etiqueta TEMPLATE! ¡Sin librerías!">
</a><a href="https://youtu.be/S0YA8BadVbM" title="Cambiar clases CSS desde Javascript con classList">
  <img loading="lazy" src="../../../vi/S0YA8BadVbM/mqdefault.jpg" alt="Cambiar clases CSS desde Javascript con classList">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/css/" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="https://lenguajecss.com/postcss/" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="../../../fundamentos/index.htm" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="../../../javascript/index.htm" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="../../../npm/index.htm" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="../../../webcomponents/index.htm" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="../../../vuejs/index.htm" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="../../../retos/index.htm" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-6', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
