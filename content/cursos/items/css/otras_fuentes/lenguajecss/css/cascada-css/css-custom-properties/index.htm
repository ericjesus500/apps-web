<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#1e7bbf">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Variables CSS - CSS en español - Lenguaje CSS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Las CSS Custom Properties son un concepto muy similar (pero no igual) a las variables de programación. ¡Aprende a utilizarlas!">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Variables CSS - CSS en español">
  <meta property="og:image" content="https://lenguajecss.com/css/cascada-css/css-custom-properties/custom-properties-variables-css.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Las CSS Custom Properties son un concepto muy similar (pero no igual) a las variables de programación. ¡Aprende a utilizarlas!">
  <meta property="og:url" content="https://lenguajecss.com/css/cascada-css/css-custom-properties/">
  <meta property="twitter:url" content="https://lenguajecss.com/css/cascada-css/css-custom-properties/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Variables CSS - CSS en español">
  <meta property="twitter:description" content="Las CSS Custom Properties son un concepto muy similar (pero no igual) a las variables de programación. ¡Aprende a utilizarlas!">
  <meta property="twitter:image" content="https://lenguajecss.com/css/cascada-css/css-custom-properties/custom-properties-variables-css.png">

  </head>

<body class="css menu-open " style="--logo-color: #1e7bbf"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje CSS</h1>

    <a class="cover" title="Lenguaje CSS (css)" href="../../index.htm" style="--image: url('../../../assets/css.jpg')"></a>

    <header>
      <a href="../../introduccion/que-es-css/index.htm" title="¿Qué es CSS?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../unidades-css/que-son/index.htm" title="¿Qué son y para que sirven?">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Cascada CSS
      </span>
            <a class="link" href="../herencia-css/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Herencia en CSS
            </a>
            <a class="link" href="../que-es-cascada/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Cascada en CSS
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Variables CSS
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#css"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeCSS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/css.jpg')">
    <h1><a href="index.htm">Variables CSS</a></h1><h2 class="typewriter">CSS Custom Properties: Variables nativas de CSS</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../que-es-cascada/index.htm">Cascada en CSS</a>
    <a class="current" href="index.htm">Variables CSS</a>
    <a href="../../unidades-css/que-son/index.htm">¿Qué son y para que sirven?</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>Quizás lo desconozcas, ya que es una característica moderna que no estaba presente en las primeras versiones de CSS, pero existe una forma nativa de guardar valores a través de «<strong>variables CSS</strong>». Estas variables CSS no existían hace años, y de hecho, fue una de las razones por las que se popularizaron preprocesadores como <strong>LESS</strong> o <strong>Sass</strong>, que sí las incorporaban.</p>
<p><img src="custom-properties-variables-css.png" alt="CSS Custom Properties - Variables CSS" width="1024" height="425" loading="lazy"></p>
<p>Sin embargo, las denominadas <strong>variables CSS</strong> realmente no son variables, sino que solemos denominarlas así por su parecido con la programación y porque es más fácil comprender rápidamente lo que son, pero tienen sus diferencias. La forma oficial de llamarlas es <strong>custom properties</strong> (<em>propiedades personalizadas</em>).</p>
<h3 id="css-custom-properties" tabindex="-1"><a class="header-anchor" href="#css-custom-properties">CSS Custom Properties</a></h3>
<p>Las <strong>CSS Custom Properties</strong> (<em>muchas veces conocidas por variables CSS</em>) son un mecanismo de CSS que permite dar <strong>un valor personalizado</strong> a las propiedades. El objetivo principal suele ser evitar escribir múltiples veces ese valor, y en su lugar, ponerle un nombre más lógico y fácil de recordar, que hará referencia al valor real.</p>
<p><youtube-video v="1TbS60Fu-_M" alt="CSS Custom Properties (Variables CSS)"></youtube-video></p>
<p>De esta forma, si necesitamos cambiar el valor en algún momento, podemos hacerlo en esa <strong>propiedad personalizada</strong> y no en múltiples partes del documento, donde nos podríamos equivocar al añadir el mismo valor o incluso hacer mucho más difícil de mantener el código.</p>
<h4 id="definir-una-variable-css" tabindex="-1"><a class="header-anchor" href="#definir-una-variable-css">Definir una variable CSS</a></h4>
<p>Para definir una <strong>custom property</strong> haremos uso de los dos guiones <code>--</code> previos al nombre que queramos utilizar. Además, debemos fijarnos en el elemento que definimos la variable, en este ejemplo la pseudoclase <code>:root</code>:</p>
<pre class="language-css "><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Hay varios detalles que comentar sobre este fragmento de código:</p>
<p>En primer lugar, la pseudoclase <code>:root</code> hace referencia al elemento raíz del documento, o lo que es lo mismo, al elemento <code>&lt;html&gt;</code>. La diferencia de utilizar <code>html</code> o <code>:root</code> como selector es que este último tiene algo más de <a href="../que-es-cascada/index.htm#especificidad">especificidad CSS</a>. Mientras que <code>html</code> tiene <strong>001</strong>, <code>:root</code> tendría <strong>010</strong>.</p>
<p>Al colocarla en <code>:root</code> estamos definiendo que la <strong>custom property</strong> estará definida para el <strong>ámbito</strong> de esa etiqueta <code>&lt;html&gt;</code> (<em>o cualquier elemento hijo</em>), es decir, a todo el documento. Sin embargo, ya veremos que podemos aplicar estas variables sólo a partes concretas del DOM de nuestra página.</p>
<blockquote>
<blockquote>
<p><strong>Nota</strong>: Las <strong>custom properties</strong> se suelen agrupar en las primeras líneas de un bloque CSS, separándolas por un espacio de otras propiedades estándar. Esto facilita la lectura del código.</p>
</blockquote>
</blockquote>
<h4 id="utilizar-una-variable-css" tabindex="-1"><a class="header-anchor" href="#utilizar-una-variable-css">Utilizar una variable CSS</a></h4>
<p>A la hora de utilizar una <strong>custom property</strong>, hay que utilizarla dentro de la expresión <code>var()</code>:</p>
<pre class="language-css demo"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--background-color</span><span class="token punctuation">:</span> indigo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>En este caso estamos aplicando a la propiedad <code>background</code> el valor que contiene <code>--background-color</code> para el elemento <code>&lt;body&gt;</code>. Esto último es muy importante entenderlo, ya que una <strong>custom property</strong> puede tener diferentes valores dependiendo del ámbito en el que se encuentra.</p>
<p>Además, es muy recomendable que la expresión <code>var()</code> tenga <strong>dos parámetros</strong>. El primero de ellos, la <strong>custom property</strong> en cuestión, el segundo de ellos, el valor por defecto en el caso de que esa propiedad no esté definida en el ámbito actual:</p>
<pre class="language-css demo"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-color<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>En este caso, la variable <code>--background-color</code> no está definida, por lo que el <code>&lt;body&gt;</code> tendrá siempre el color de fondo azul, ya que es el fallback indicado.</p>
<h3 id="ámbito-de-las-custom-properties" tabindex="-1"><a class="header-anchor" href="#ámbito-de-las-custom-properties">Ámbito de las custom properties</a></h3>
<p>El ejemplo anterior es muy básico y puede que no se aprecie el detalle de los <strong>ámbitos</strong> con las <strong>custom properties</strong>, así que vamos a verlo con un ejemplo más específico.</p>
<p>Observa el marcado HTML del siguiente ejemplo, donde tenemos tres elementos con clase <code>child</code>, los dos primeros dentro de <code>parent</code> y el tercero fuera:</p>
<pre class="language-css "><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">--background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>

  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.first</span> <span class="token punctuation">{</span>
  <span class="token property">--background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.child</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-color<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre class="language-html demo"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>First child<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>second child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Second child<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>third child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Third child<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>Sin embargo, ahora estamos definiendo la variable <code>--background-color</code> en diferentes ámbitos:</p>
<ul>
<li>Los dos primeros elementos <code>.child</code> tomarán color negro, ya que se le aplica a <code>.parent</code> (<em>e hijos</em>).</li>
<li>El primer elemento <code>.child</code> se sobreescribe con color púrpura, ya que se le aplica a <code>.first</code>.</li>
<li>El tercer elemento no tendrá ninguna variable definida, por lo que tomará color azul.</li>
</ul>
<p>Esto nos permite mucha flexibilidad y potencia a la hora de utilizar <strong>custom properties</strong> en CSS, ya que son tremendamente útiles y versátiles, permitiéndonos utilizar incluso la cascada de CSS a nuestro favor.</p>
<p>Las <strong>custom properties</strong> tienen un buen soporte en navegadores en la actualidad:</p>
<p><caniuse-support title="CSS Variables (Custom Properties)" feature="css-variables" edge="16/y" firefox="31/y" chrome="49/y" safari="10/y" opera="36/y" ios_saf="10.0-10.2/y" and_chr="118/y" and_ff="118/y">
</caniuse-support></p>
<h3 id="diferencia-con-sass" tabindex="-1"><a class="header-anchor" href="#diferencia-con-sass">Diferencia con Sass</a></h3>
<p>Es importante mencionar que las <strong>variables CSS</strong> no funcionan exactamente igual que las <strong>variables Sass</strong> (<em>o en general, las variables de preprocesadores</em>). <strong>Sass</strong>, al igual que muchos otros preprocesadores de CSS, no trabajan directamente en el navegador, sino en una capa previa (<em>capa de preprocesamiento</em>).</p>
<p>Es el caso de las <strong>variables de Sass</strong>, dichas variables son leídas por <strong>Sass</strong> y convertidas a CSS «plano» (<em>sin variables</em>) antes de ser leído por el navegador:</p>
<pre class="language-scss "><code class="language-scss"><span class="token comment">/* En Sass las variables se declaran en el top */</span>
<span class="token property"><span class="token variable">$var</span></span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>

<span class="token selector">.parent </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$var</span><span class="token punctuation">;</span>   <span class="token comment">/* Será #fff */</span>
<span class="token punctuation">}</span>

<span class="token selector">.parent .element </span><span class="token punctuation">{</span>
  <span class="token property"><span class="token variable">$var</span></span><span class="token punctuation">:</span> #888<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.element </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$var</span><span class="token punctuation">;</span>   <span class="token comment">/* Será #fff */</span>
<span class="token punctuation">}</span></code></pre>
<p>Es por eso que no deben tomarse las <strong>custom properties</strong> como equivalente de las <strong>variables SCSS</strong>, ya que tienen matices diferentes.</p>
<h3 id="variables-css-desde-javascript" tabindex="-1"><a class="header-anchor" href="#variables-css-desde-javascript">Variables CSS desde Javascript</a></h3>
<p>Existen varias formas de manipular estilos CSS desde Javascript, ya sea directamente a través de la propiedad <code>.style</code> del elemento en cuestión, o utilizando la función global de cada página <code>.getComputedStyle()</code>, que devuelve los estilos computados por el navegador.</p>
<p>Sin embargo, en esta ocasión nos centraremos en una serie de métodos de ayuda que nos hacen la vida más fácil, ya que podemos establecer, obtener y/o eliminar <strong>propiedades CSS</strong> (<em>custom properties incluídas</em>) de un elemento de forma muy sencilla.</p>
<p>Observen el siguiente método mediante el cuál añadimos (<em>o modificamos</em>) la propiedad <code>border</code> de un elemento del DOM de nuestro HTML:</p>
<pre class="language-js "><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"border"</span><span class="token punctuation">,</span> <span class="token string">"2px solid red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-html demo"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Primer mensaje de texto.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Segundo mensaje de texto.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>Al igual que lo hacemos con una propiedad CSS como <code>border</code> en este caso, lo podríamos hacer con una <strong>custom property</strong>, la cuál quedaría añadida en el atributo HTML <code>style</code> del elemento.</p>
<p>Los métodos de ayuda que tenemos para modificar propiedades son los siguientes:</p>
<table>
<thead>
<tr>
<th>Método</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.setProperty(</code><badge-type class="string"></badge-type><code>name,</code><badge-type class="string"></badge-type><code>value,</code><badge-type class="string"></badge-type><code>priority)</code></td>
<td>Añade/cambia el <strong>valor</strong> de una propiedad CSS.</td>
</tr>
<tr>
<td><code>.getPropertyValue(</code><badge-type class="string"></badge-type><code>name)</code></td>
<td>Obtiene el valor de una propiedad CSS.</td>
</tr>
<tr>
<td><code>.getPropertyPriority(</code><badge-type class="string"></badge-type><code>name)</code></td>
<td>Devuelve <badge-type class="string"></badge-type> <code>important</code> si tiene prioridad.</td>
</tr>
<tr>
<td><code>.removeProperty(</code><badge-type class="string"></badge-type><code>name)</code></td>
<td>Elimina una propiedad CSS de un elemento.</td>
</tr>
</tbody>
</table>
<p>El método que hemos visto anteriormente es <code>.style.setProperty()</code>, con el cuál podemos añadir (<em>o modificar</em>) un valor a una propiedad. Además, si establecemos el tercer parámetro con el <badge-type class="string"></badge-type> <code>&quot;important&quot;</code>, sería el equivalente a añadirle el <code>!important</code> al valor de la propiedad.</p>
<p>Por otro lado, tenemos el método opuesto <code>.style.getPropertyValue()</code> mediante el cuál podemos obtener el valor de una propiedad concreta o el método <code>.style.getPropertyPriority()</code>, con el cuál te devuelve el string <code>important</code> si lo tiene definido. Por último, el método <code>.style.removeProperty()</code> como su propio nombre indica, elimina una propiedad de un elemento.</p>
<blockquote>
<p><strong>Nota</strong>: Ten en cuenta que estas propiedades solo funcionan si los estilos CSS o custom properties han sido definidas a través del atributo <code>style</code> de CSS o con estos mismos métodos (<em>que lo hacen por esta misma vía</em>).</p>
</blockquote>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../que-es-cascada/index.htm" title="Cascada en CSS">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Cascada en CSS</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../../unidades-css/que-son/index.htm" title="¿Qué son y para que sirven?">
  <div>
    <span>¿Qué son y para que sirven?</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/q4WZUTfHt6o" title="Cómo crear GRADIENTES RADIALES en CSS">
  <img loading="lazy" src="../../../vi/q4WZUTfHt6o/mqdefault.jpg" alt="Cómo crear GRADIENTES RADIALES en CSS">
</a><a href="https://youtu.be/OQtAyXHeKnc" title="Grid CSS: Grids por área">
  <img loading="lazy" src="../../../vi/OQtAyXHeKnc/mqdefault.jpg" alt="Grid CSS: Grids por área">
</a><a href="https://youtu.be/jhg2xas3av0" title="¡Carga MÁS RÁPIDO tu sitio web OPTIMIZANDO TIPOGRAFÍAS!">
  <img loading="lazy" src="../../../vi/jhg2xas3av0/mqdefault.jpg" alt="¡Carga MÁS RÁPIDO tu sitio web OPTIMIZANDO TIPOGRAFÍAS!">
</a><a href="https://youtu.be/jdGpehoFoWA" title="¡Aprende a utilizar TRANSICIONES CSS!">
  <img loading="lazy" src="../../../vi/jdGpehoFoWA/mqdefault.jpg" alt="¡Aprende a utilizar TRANSICIONES CSS!">
</a><a href="https://youtu.be/0sFtRnbe0fo" title="Novedades de CSS: Dr. CSStrange y el multiverso">
  <img loading="lazy" src="../../../vi/0sFtRnbe0fo/mqdefault.jpg" alt="Novedades de CSS: Dr. CSStrange y el multiverso">
</a><a href="https://youtu.be/s_16bzmnGoY" title="Grid CSS: Líneas con nombre">
  <img loading="lazy" src="../../../vi/s_16bzmnGoY/mqdefault.jpg" alt="Grid CSS: Líneas con nombre">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="../../../postcss/index.htm" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/fundamentos/" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/javascript/" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/npm/" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/webcomponents/" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/vuejs/" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/automatizadores/" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/retos/" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-3', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
