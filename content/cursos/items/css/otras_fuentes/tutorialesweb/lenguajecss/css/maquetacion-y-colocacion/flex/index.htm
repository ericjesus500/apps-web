<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#1e7bbf">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Flex CSS: Introducción - CSS en español - Lenguaje CSS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Flex es un módulo de CSS para crear diseños flexibles con un mecanismo novedoso que deja atrás los antiguos y problemáticos sistemas tradicionales de CSS.">
  <meta name="view-transition" content="same-origin">
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Flex CSS: Introducción - CSS en español">
  <meta property="og:image" content="https://lenguajecss.com/css/maquetacion-y-colocacion/flex/flex-css.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Flex es un módulo de CSS para crear diseños flexibles con un mecanismo novedoso que deja atrás los antiguos y problemáticos sistemas tradicionales de CSS.">
  <meta property="og:url" content="https://lenguajecss.com/css/maquetacion-y-colocacion/flex/">
  <meta property="twitter:url" content="https://lenguajecss.com/css/maquetacion-y-colocacion/flex/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Flex CSS: Introducción - CSS en español">
  <meta property="twitter:description" content="Flex es un módulo de CSS para crear diseños flexibles con un mecanismo novedoso que deja atrás los antiguos y problemáticos sistemas tradicionales de CSS.">
  <meta property="twitter:image" content="https://lenguajecss.com/css/maquetacion-y-colocacion/flex/flex-css.png">

  </head>

<body class="css menu-open " style="--logo-color: #1e7bbf"><script>
    matchMedia("(width <= 1180px)").matches && document.body.classList.toggle("menu-open");
  </script>
  








<section class="menubar">
  <div class="menubar-content">
    <h1>Lenguaje CSS</h1>

    <a class="cover" title="Lenguaje CSS (css)" href="../../index.htm" style="--image: url('../../../assets/css.jpg')"></a>

    <header>
      <a href="../../representacion-datos/tablas-css/index.htm" title="Tablas CSS">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z"></path></svg>
      </a>
      <a href="../../index.htm" title="Volver al índice">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 256 256"><path fill="#888888" d="M240 210h-18v-94.45a14.06 14.06 0 0 0-4.53-10.32l-80-75.49l-.09-.08a13.94 13.94 0 0 0-18.83 0l-.09.08l-80 75.5A14 14 0 0 0 34 115.55V210H16a6 6 0 0 0 0 12h224a6 6 0 0 0 0-12ZM46 115.55a2 2 0 0 1 .65-1.48l.09-.08l79.94-75.48a2 2 0 0 1 2.63 0L209.26 114l.08.08a2 2 0 0 1 .66 1.48V210h-52v-50a14 14 0 0 0-14-14h-32a14 14 0 0 0-14 14v50H46ZM146 210h-36v-50a2 2 0 0 1 2-2h32a2 2 0 0 1 2 2Z"></path></svg>
      </a>
      <a href="../../interacciones/contornos/index.htm" title="Contornos">
        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 32"><path fill="#888888" d="m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z"></path></svg>
      </a>
    </header>

    <div style="display:none">
      <svg id="link-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 256 256"><g fill="#888888"><path d="M208 88h-56V32Z" opacity=".2"></path><path d="m213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v176a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V88a8 8 0 0 0-2.34-5.66ZM160 51.31L188.69 80H160ZM200 216H56V40h88v48a8 8 0 0 0 8 8h48v120Z"></path></g></svg>
      <svg id="anchor-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="#888888" d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5a2.5 2.5 0 0 1 0-5H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></svg>
    </div>

    <div class="links">
      <span class="folder">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewbox="0 0 512 512"><path fill="#888888" d="M41 73v304.563L88.697 151H423v-30H185.514l-16-48H41zm62.303 96L43.092 455h381.605l60.211-286H103.303z"></path></svg>
        Maquetación y colocación
      </span>
            <a class="link" href="../propiedad-display/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              La propiedad display
            </a>
            <a class="link" href="../posicionamiento-css/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              La propiedad position
            </a>
            <a class="link" href="../desplazamientos/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              La propiedad float
            </a>
            <a class="link active" href="index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Flex CSS: Introducción
            </a>
            <a class="link" href="../flex-alinear/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Flex CSS: Alinear elementos
            </a>
            <a class="link" href="../flex-organizar/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Flex CSS: Flexibilidad
            </a>
            <a class="link" href="../grid-css/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Grid CSS: Introducción
            </a>
            <a class="link" href="../grid-css-alinear/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Grid CSS: Alinear elementos
            </a>
            <a class="link" href="../grid-css-areas/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Grid CSS: Grid por áreas
            </a>
            <a class="link" href="../grid-css-celdas-irregulares/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Grid CSS: Celdas irregulares
            </a>
            <a class="link" href="../grid-css-lineas-nombradas/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Grid CSS: Líneas con nombre
            </a>
            <a class="link" href="../multi-column/index.htm">
              <svg viewbox="0 0 32 32"><use href="#link-icon"></use></svg>
              Multi-columnas CSS
            </a>
    </div>
  </div>

  <div class="sidebox">
    <svg class="close-menu" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path fill="none" stroke="#888888" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 19V5m10 1l-6 6l6 6m-6-6h14"></path></svg>
    <div class="socials">
      <a class="twitch" href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
      <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
      <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
      <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
    </div>
  </div>
</section>

<script type="module">
  const toggleMenu = () => (document.body.classList.toggle("menu-open"));
  document.querySelector(".close-menu").addEventListener("click", toggleMenu);

  matchMedia("(width <= 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());
  matchMedia("(width > 1180px)").addEventListener("change", (ev) => ev.matches && toggleMenu());

  const activeLink = document.querySelector(".links .active");
  const icon = /* svg */`<svg viewBox="0 0 24 24"><use href="#anchor-icon" /></svg>`;
  const headers = [...document.querySelectorAll(".contents h3")].map(link => ({ text: link.textContent, id: link.id }));
  const links = [];
  headers.reverse().forEach(({ text, id }) => {
    const link = document.createElement("a");
    link.classList.add("anchor");
    link.href = "#" + id;
    link.insertAdjacentHTML("beforeend", icon);
    link.insertAdjacentText("beforeend", ` ${text}`);
    activeLink.after(link);
  });
</script>

  <div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#css"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeCSS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/css.jpg')">
    <h1><a href="index.htm">Flex CSS: Introducción</a></h1><h2 class="typewriter">Modelo de cajas flexibles</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../desplazamientos/index.htm">La propiedad float</a>
    <a class="current" href="index.htm">Flex CSS: Introducción</a>
    <a href="../flex-alinear/index.htm">Flex CSS: Alinear elementos</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev" title="Twitch"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev" title="YouTube"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev" title="TikTok"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev" title="Instagram"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz" title="Twitter"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>



    <div class="post-container">
  <div class="contents">
    
    <p>En CSS, inicialmente se utilizaba el posicionamiento (<em>static, relative, absolute...</em>), los elementos en línea o en bloque (<em>y derivados</em>) o la propiedad <strong>float</strong> para realizar maquetaciones, lo que a grandes rasgos no dejaba de ser un sistema de creación de diseños bastante tosco que no encajaba con los retos que tenemos en la actualidad: sistemas de escritorio, dispositivos móviles, múltiples resoluciones, etc...</p>
<p><strong>Flex</strong> (<em>también llamado flexbox</em>) es un sistema de <strong>elementos flexibles</strong> que llega con la idea de olvidar estos mecanismos y acostumbrarnos a una mecánica más potente, limpia y personalizable, en la que los elementos HTML se adaptan y colocan automáticamente y es más fácil personalizar los diseños de una página web.</p>
<p><img src="flex.png" alt="Flex CSS" width="1067" height="417" loading="lazy"></p>
<p><strong>Flex</strong> está especialmente diseñado para crear, mediante CSS, estructuras de <strong>una sóla dimensión</strong>.</p>
<h3 id="conceptos" tabindex="-1"><a class="header-anchor" href="#conceptos">Conceptos</a></h3>
<p>Para empezar a utilizar <strong>flex</strong> lo primero que debemos hacer es conocer algunos de los elementos básicos de este nuevo esquema, que son los siguientes:</p>
<p><img src="flex-como-funciona.png" alt="Flex CSS: ¿Cómo funciona?" width="1067" height="313" loading="lazy"></p>
<ul>
<li>
<p><strong>Contenedor</strong>: Es el elemento padre que tendrá en su interior cada uno de los ítems flexibles. Observa que al contrario que muchas otras estructuras CSS, por norma general, en Flex establecemos las propiedades al elemento padre.</p>
<ul>
<li>
<p><strong>Eje principal</strong>: Los contenedores flexibles tendrán una orientación principal específica. Por defecto, el eje principal del contenedor flex es en <strong>horizontal</strong> (<em>en fila</em>).</p>
</li>
<li>
<p><strong>Eje secundario</strong>: De la misma forma, los contenedores flexibles tendrán una orientación secundaria, perpendicular a la principal. Si la principal es en horizontal, la secundaria será en <strong>vertical</strong> (<em>y viceversa</em>).</p>
</li>
</ul>
</li>
<li>
<p><strong>Ítem</strong>: Cada uno de los <strong>hijos</strong> que tendrá el contenedor en su interior.</p>
</li>
</ul>
<p><youtube-video v="esjagdcozX0" alt="Flex CSS: ¡Aprendiendo las bases!"></youtube-video></p>
<h3 id="modalidades-de-flex" tabindex="-1"><a class="header-anchor" href="#modalidades-de-flex">Modalidades de flex</a></h3>
<p>Una vez tenemos claro esto, imaginemos el siguiente escenario:</p>
<pre class="language-html "><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- Flex container --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- Flex items --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>Para activar el modo <strong>flex</strong>, utilizaremos sobre el elemento contenedor la <a href="../propiedad-display/index.htm">propiedad display</a>, y especificaremos el valor <code>flex</code> o <code>inline-flex</code> (<em>dependiendo de como queramos que se comporte el contenedor</em>):</p>
<table>
<thead>
<tr>
<th>Tipo de elemento</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inline-flex</code></td>
<td>Establece un contenedor en línea, similar a <code>inline-block</code> (ocupa solo el contenido).</td>
</tr>
<tr>
<td><code>flex</code></td>
<td>Establece un contenedor en bloque, similar a <code>block</code> (ocupa todo el ancho del padre).</td>
</tr>
</tbody>
</table>
<p>Por defecto, y sólo con esto, observaremos que los elementos se disponen todos sobre una misma línea. Esto ocurre porque estamos utilizando el modo <strong>flex</strong> y estaremos trabajando con ítems flexibles básicos, garantizando que no se desbordarán ni mostrarán los problemas que, por ejemplo, tienen los porcentajes sobre elementos que no utilizan flex.</p>
<div class="example example-1">
  <strong>display:</strong>
  <button class="mode" data-property="display" data-value="flex">flex</button>
  <button class="mode" data-property="display" data-value="inline-flex">inline-flex</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
  </div>
</div>
<style>
  .example-1 strong {
    font-family: var(--primary-font);
    font-size: 1.5rem;
    color: #fff;
  }
  .example-1 .container {
    display: flex;
    background: steelblue;
  }
  .example-1 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-1 button.mode"));
    const container = document.querySelector(".example-1 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h3 id="dirección-de-los-ejes" tabindex="-1"><a class="header-anchor" href="#dirección-de-los-ejes">Dirección de los ejes</a></h3>
<p>Existen dos propiedades principales para manipular la dirección y comportamiento de los ítems a lo largo del eje principal del contenedor. Son las que veremos a continuación:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Significado</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>flex-direction</code></td>
<td><strong>row</strong> | row-reverse | column | column-reverse</td>
<td>Cambia la orientación del eje principal.</td>
</tr>
</tbody>
</table>
<p>Mediante la propiedad <code>flex-direction</code> podemos modificar la dirección del <strong>eje principal</strong> del contenedor para que se oriente en horizontal (<em>valor por defecto</em>) o en vertical. Además, también podemos incluir el sufijo <code>-reverse</code> para indicar que coloque los ítems en orden inverso.</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>row</code></td>
<td>Establece la dirección del eje principal en <strong>horizontal</strong>.</td>
</tr>
<tr>
<td><code>row-reverse</code></td>
<td>Establece la dirección del eje principal en <strong>horizontal invertido</strong>.</td>
</tr>
<tr>
<td><code>column</code></td>
<td>Establece la dirección del eje principal en <strong>vertical</strong>.</td>
</tr>
<tr>
<td><code>column-reverse</code></td>
<td>Establece la dirección del eje principal en <strong>vertical invertido</strong>.</td>
</tr>
</tbody>
</table>
<p>Esto nos permite tener un control muy alto sobre el orden de los elementos en una página. Veamos la aplicación de estas propiedades sobre el ejemplo anterior, para modificar el flujo del eje principal del contenedor:</p>
<pre class="language-css "><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> steelblue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>A continuación podemos ver un ejemplo interactivo:</p>
<div class="example example-2">
  <strong>flex-direction:</strong>
  <button class="mode" data-property="flex-direction" data-value="row">row</button>
  <button class="mode" data-property="flex-direction" data-value="column">column</button>
  <button class="mode" data-property="flex-direction" data-value="row-reverse">row-reverse</button>
  <button class="mode" data-property="flex-direction" data-value="column-reverse">column-reverse</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
  </div>
</div>
<style>
  .example-2 .container {
    display: flex;
    background: steelblue;
  }
  .example-2 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-2 button.mode"));
    const container = document.querySelector(".example-2 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h3 id="contenedor-flex-multilínea" tabindex="-1"><a class="header-anchor" href="#contenedor-flex-multilínea">Contenedor flex multilínea</a></h3>
<p>En general, <strong>flex</strong> se suele utilizar para estructuras de una sola dimensión, es decir, contenedores que sólo van en una dirección. Sin embargo, existe una propiedad denominada <code>flex-wrap</code> con la que podemos especificar un comportamiento especial del contenedor.</p>
<p>Por defecto, si un elemento no cabe dentro de nuestro contenedor flex, los elementos se harán más pequeños (<em>son flexibles</em>) para ajustarlos al contenedor. Este es el comportamiento por defecto de un contenedor <strong>flex</strong>. Sin embargo, con la propiedad <code>flex-wrap</code> podemos cambiar este comportamiento y permitir que nuestro contenedor flex se desborde, convirtiéndose en un <strong>contenedor flex multilínea</strong>.</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Significado</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>flex-wrap</code></td>
<td><strong>nowrap</strong> | wrap | wrap-reverse</td>
<td>Evita o permite el desbordamiento (multilinea).</td>
</tr>
</tbody>
</table>
<p>Los valores que puede tomar esta propiedad, son las siguientes:</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>nowrap</strong></td>
<td>Los ítems se ajustan para ocupar el tamaño del contenedor (no permite desbordamiento en múltiples líneas).</td>
</tr>
<tr>
<td>wrap</td>
<td>Establece los ítems en modo multilínea (permite que se desborde el contenedor).</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>Establece los ítems en modo multilínea, pero en dirección inversa.</td>
</tr>
</tbody>
</table>
<p>Teniendo en cuenta estos valores de la propiedad <code>flex-wrap</code>, podemos conseguir cosas como la siguiente:</p>
<pre class="language-css "><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> steelblue<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>En el caso de especificar <strong>nowrap</strong> (<em>u omitir la propiedad <code>flex-wrap</code></em>) en el contenedor, los 3 ítems se mostrarían en una misma línea del contenedor (<em>que es el comportamiento por defecto</em>). En ese caso, si tenemos 3 ítems, cada uno debería tener aproximadamente <code>66px</code> de ancho. Un tamaño de <code>100px</code> por ítem, sumaría un total de <code>300px</code>, que no cabrían en el contenedor de <code>200px</code>, por lo que <strong>flex</strong> reajusta los ítems flexibles para que quepan todos en la misma línea, manteniendo las mismas proporciones.</p>
<p>Sin embargo, si especificamos <code>wrap</code> en la propiedad <code>flex-wrap</code>, lo que permitimos es que el contenedor se pueda desbordar, pasando a ser un contenedor <strong>multilínea</strong>, que mostraría los <strong>ítems</strong> que quepan en la primera linea y el resto en las líneas siguientes. El valor <code>wrap-reverse</code> haría exactamente lo mismo, pero con el orden inverso.</p>
<div class="example example-3">
  <strong>flex-wrap:</strong>
  <button class="mode" data-property="flex-wrap" data-value="nowrap">nowrap</button>
  <button class="mode" data-property="flex-wrap" data-value="wrap">wrap</button>
  <button class="mode" data-property="flex-wrap" data-value="wrap-reverse">wrap-reverse</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
  </div>
</div>
<style>
  .example-3 .container {
    display: flex;
    flex-wrap: nowrap;
    background: steelblue;
    width: 200px;
    min-height: 100px;
  }
  .example-3 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50%;
    height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-3 button.mode"));
    const container = document.querySelector(".example-3 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h3 id="atajo-dirección-de-los-ejes" tabindex="-1"><a class="header-anchor" href="#atajo-dirección-de-los-ejes">Atajo: Dirección de los ejes</a></h3>
<p>Recuerda que existe una propiedad de atajo (short-hand) llamada <code>flex-flow</code>, con la que podemos resumir los valores de las propiedades <code>flex-direction</code> y <code>flex-wrap</code>, especificándolas en una sola propiedad y ahorrándonos utilizar las propiedades concretas:</p>
<pre class="language-css "><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token comment">/* flex-flow: &lt;flex-direction> &lt;flex-wrap>; */</span>
  <span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="huecos-gaps" tabindex="-1"><a class="header-anchor" href="#huecos-gaps">Huecos (gaps)</a></h3>
<p>Existen dos propiedades de flexbox que han surgido recientemente: <code>row-gap</code> y <code>column-gap</code>. Dichas propiedades, permiten establecer el tamaño de un «hueco» entre ítems desde el elemento padre contenedor, y que eliminan la necesidad de estar utilizando <code>padding</code> o <code>margin</code> en los elementos hijos, con las complicaciones que ello suele conllevar:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>row-gap</code></td>
<td><strong>normal</strong> | <badge-type class="size"></badge-type></td>
<td>Espacio entre filas (sólo funciona con <code>flex-direction: column</code>)</td>
</tr>
<tr>
<td><code>column-gap</code></td>
<td><strong>normal</strong> | <badge-type class="size"></badge-type></td>
<td>Espacio entre columnas (sólo funciona con <code>flex-direction: row</code>)</td>
</tr>
</tbody>
</table>
<p>Ten en cuenta que, como <strong>flex</strong> es un sistema para diseños de una sola dimensión, sólo una de las dos propiedades tendrá efecto. Si la propiedad <code>flex-direction</code> está establecida en <code>column</code>, podrás utilizar <code>row-gap</code>, y en el caso de que la propiedad <code>flex-direction</code> se encuentre en <code>row</code>, podrás utilizar el <code>column-gap</code>.</p>
<p>Eso sí, es posible usar ambas si tenemos la propiedad <code>flex-wrap</code> definida a <code>wrap</code> y, por lo tanto, disponemos de multicolumnas flexbox, ya que en este caso si podemos separar elementos por filas y por columnas.</p>
<blockquote>
<p>Ten en cuenta que los huecos <strong>sólo se aplican entre elementos</strong>, y no entre un elemento hijo y su contenedor padre.</p>
</blockquote>
<h3 id="atajo-huecos" tabindex="-1"><a class="header-anchor" href="#atajo-huecos">Atajo: Huecos</a></h3>
<p>En <strong>Flex CSS</strong> existe una propiedad de atajo para los huecos, denominada <code>gap</code>. Con esta propiedad podemos indicar de una sola vez valores para las propiedades <code>row-gap</code> y <code>column-gap</code>, de forma que escribimos menos y es más cómodo en ciertas situaciones:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>gap</code></td>
<td><strong>0</strong> | <badge-type class="size"></badge-type></td>
<td>Aplica el tamaño indicado para el hueco en ambos ejes.</td>
</tr>
<tr>
<td><code>gap</code></td>
<td><strong>0 0</strong> | <badge-type class="size"></badge-type> <badge-type class="size"></badge-type></td>
<td>Aplica los tamaños indicados para el hueco del eje X y el eje Y.</td>
</tr>
</tbody>
</table>
<p>Como se puede ver, por defecto, el tamaño de los huecos es de <strong>0</strong>, sin embargo, podemos utilizar tanto las propiedades individuales como la propiedad de atajo <code>gap</code> para modificar estos tamaños.</p>
<p>A continuación, podemos ver un ejemplo de su utilización en este fragmento de código:</p>
<pre class="language-css "><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 2 parámetros: &lt;row> &lt;column> */</span>
  <span class="token property">gap</span><span class="token punctuation">:</span> 4px 8px<span class="token punctuation">;</span>
  <span class="token comment">/* Equivalente a */</span>
  <span class="token property">row-gap</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
  <span class="token property">column-gap</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>

  <span class="token comment">/* 1 parámetro: usa el mismo para ambos */</span>
  <span class="token property">gap</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
  <span class="token comment">/* Equivalente a */</span>
  <span class="token property">row-gap</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
  <span class="token property">column-gap</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Recuerda que esta característica es una de las últimas en implementarse en navegadores, por lo que en algunos navegadores muy antiguos podría darte problemas. Sin embargo, el soporte actual es bastante bueno:</p>
<p><caniuse-support title="gap property for Flexbox" feature="flexbox-gap" edge="84/y" firefox="63/y" chrome="84/y" safari="14.1/y" opera="70/y" ios_saf="14.5-14.8/y" and_chr="118/y" and_ff="118/y">
</caniuse-support></p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    
    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../desplazamientos/index.htm" title="La propiedad float">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>La propiedad float</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../flex-alinear/index.htm" title="Flex CSS: Alinear elementos">
  <div>
    <span>Flex CSS: Alinear elementos</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>


<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/W6fAzw3HoWg" title="Cómo crear GRADIENTES LINEALES en CSS">
  <img loading="lazy" src="../../../vi/W6fAzw3HoWg/mqdefault.jpg" alt="Cómo crear GRADIENTES LINEALES en CSS">
</a><a href="https://youtu.be/8Jh2K3tq5n0" title="Tutorial para aprender Animaciones CSS">
  <img loading="lazy" src="../../../vi/8Jh2K3tq5n0/mqdefault.jpg" alt="Tutorial para aprender Animaciones CSS">
</a><a href="https://youtu.be/uMMLQNgsivg" title="Parcel CSS: ¿Una ALTERNATIVA RÁPIDA a PostCSS?">
  <img loading="lazy" src="../../../vi/uMMLQNgsivg/mqdefault.jpg" alt="Parcel CSS: ¿Una ALTERNATIVA RÁPIDA a PostCSS?">
</a><a href="https://youtu.be/984ry_jsExA" title="CÓMO hacer la ANIMACIÓN del header de Manz.dev">
  <img loading="lazy" src="../../../vi/984ry_jsExA/mqdefault.jpg" alt="CÓMO hacer la ANIMACIÓN del header de Manz.dev">
</a><a href="https://youtu.be/jhg2xas3av0" title="¡Carga MÁS RÁPIDO tu sitio web OPTIMIZANDO TIPOGRAFÍAS!">
  <img loading="lazy" src="../../../vi/jhg2xas3av0/mqdefault.jpg" alt="¡Carga MÁS RÁPIDO tu sitio web OPTIMIZANDO TIPOGRAFÍAS!">
</a><a href="https://youtu.be/g5QVe65vPd4" title="Grid CSS: Celdas irregulares">
  <img loading="lazy" src="../../../vi/g5QVe65vPd4/mqdefault.jpg" alt="Grid CSS: Celdas irregulares">
</a></div>
  </div>
</section>

    

<section class="featured">

  <div class="wrapper column">
    <h2>Aprender más</h2>
    <p>Si lo prefieres, puedes aprender también sobre estas temáticas:</p>

    <div class="list"><a class="topic" href="https://lenguajehtml.com/html/" title="HTML5">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#html"></use>
  </svg>
</a><a class="topic" href="https://lenguajehtml.com/svg/" title="SVG">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#svg"></use>
  </svg>
</a><a class="topic" href="../../index.htm" title="CSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#css"></use>
  </svg>
</a><a class="topic" href="../../../postcss/index.htm" title="PostCSS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#postcss"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/fundamentos/" title="Fundamentos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#blueprint"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/javascript/" title="Javascript">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#js"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/npm/" title="NPM">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#npm"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/webcomponents/" title="WebComponents">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#webcomponents"></use>
  </svg>
</a><a class="topic" href="https://terminaldelinux.com/terminal/" title="Terminal">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#terminal"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/vuejs/" title="VueJS">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#vuejs"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/automatizadores/" title="Automatizadores">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#bundler"></use>
  </svg>
</a><a class="topic" href="https://lenguajejs.com/retos/" title="Retos">
  <svg class="logo">
    <use href="../../../assets/icons/logos.svg#retos"></use>
  </svg>
</a></div>
  </div>

</section>

    <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

    

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-3', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>

  </div></body>

</html>
