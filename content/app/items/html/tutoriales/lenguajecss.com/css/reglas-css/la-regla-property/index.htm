<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#1e7bbf">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>La regla @property - CSS en español - Lenguaje CSS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="La regla @property de CSS forma parte de una serie de apis llamadas CSS Houdini y sirve para establecer un tipo de dato a una variable CSS. Te lo explico.">
  
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="La regla @property - CSS en español">
  <meta property="og:image" content="https://lenguajecss.com/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="La regla @property de CSS forma parte de una serie de apis llamadas CSS Houdini y sirve para establecer un tipo de dato a una variable CSS. Te lo explico.">
  <meta property="og:url" content="https://lenguajecss.com/css/reglas-css/la-regla-property/">
  <meta property="twitter:url" content="https://lenguajecss.com/css/reglas-css/la-regla-property/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="La regla @property - CSS en español">
  <meta property="twitter:description" content="La regla @property de CSS forma parte de una serie de apis llamadas CSS Houdini y sirve para establecer un tipo de dato a una variable CSS. Te lo explico.">
  <meta property="twitter:image" content="https://lenguajecss.com/large-summary.jpg">

  </head>

<body class="css" style="--logo-color: #1e7bbf"><div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#css"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeCSS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/css.jpg')">
    <h1><a href="index.htm">La regla @property</a></h1><h2 class="typewriter">Tipos de datos en CSS</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../la-regla-scope/index.htm">La regla @scope</a>
    <a class="current" href="index.htm">La regla @property</a>
    <a href="../../calidad-de-codigo/minificar-css/index.htm">Minificar CSS</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>

    <div class="post-container">
  <div class="contents">
    
    <p>La regla <code>@property</code> de CSS es una sencilla pero potente característica de una serie de API denominadas <strong>CSS Houdini</strong> (<em>en referencia al famoso ilusionista que hacía cosas que parecían imposibles</em>), mediante las cuales puedes realizar ciertas tareas que, en principio, eran imposibles de hacer sólo con CSS directamente en el navegador.</p>
<h3 id="qué-es-la-regla-property" tabindex="-1"><a class="header-anchor" href="#qué-es-la-regla-property">¿Qué es la regla <code>@property</code>?</a></h3>
<p>La regla <code>@property</code> nos permite indicar al navegador el <a href="https://lenguajejs.com/fundamentos/introduccion/conceptos-previos/">tipo de dato</a>, así como algunos datos relacionados, que tiene una variable CSS. Si conoces la idea base de <strong>Typescript</strong>, que es dotar de una comprobación de tipos a Javascript, la idea de la regla <code>@property</code> es muy similar.</p>
<p>¿Para qué podemos necesitar esto en CSS? Existe un caso particular donde se ve muy claro su utilización. Imagina que queremos crear una animación para mover un elemento, y el valor que vamos a animar es un tamaño que está guardado en una variable CSS. El navegador desconoce el tipo de dato que está guardado en las variables CSS, por lo que no aplicará la animación sino que saltará de golpe entre el primer valor y el último:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.element</span> <span class="token punctuation">{</span>
  <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>

  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> move 3s alternate infinite<span class="token punctuation">;</span>
  <span class="token property">translate</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">)</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>
  <span class="token selector">to</span> <span class="token punctuation">{</span> <span class="token property">--x</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Sin embargo, con la regla <code>@property</code> podemos indicarle específicamente de que tipo de dato se trata, y que actúe como corresponde, entendiendo que esa variable contendrá un tamaño, y como consecuencia, soportando la animación:</p>
<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@property</span> --x</span> <span class="token punctuation">{</span>
  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">"&lt;length>"</span><span class="token punctuation">;</span>
  <span class="token property">inherits</span><span class="token punctuation">:</span> true<span class="token punctuation">;</span>
  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0
<span class="token punctuation">}</span></code></pre>
<p>Además, ofrece otras ventajas que iremos explicando a continuación.</p>
<h3 id="sintaxis-de-la-regla-property" tabindex="-1"><a class="header-anchor" href="#sintaxis-de-la-regla-property">Sintaxis de la regla <code>@property</code></a></h3>
<p>Como hemos visto en el ejemplo anterior, para establecer una regla <code>@property</code> debemos establecer la regla seguida de la variable CSS sobre la cuál va a actuar. En su interior debemos establecer tres propiedades:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>syntax</code></td>
<td>Indica la sintaxis (<em>el tipo de dato</em>) de la variable.</td>
</tr>
<tr>
<td><code>inherits</code></td>
<td>Indica si la variable CSS debe heredarse o no. Valores <code>true</code> o <code>false</code>.</td>
</tr>
<tr>
<td><code>initial-value</code></td>
<td>Indica cual es el valor por defecto de la variable CSS.</td>
</tr>
</tbody>
</table>
<p>Así pues, veamos otro ejemplo de declaración de <code>@property</code> en acción. En este caso, hemos establecido un tipo de dato de color, para que se pueda animar el color:</p>
<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@property</span> --color</span> <span class="token punctuation">{</span>
  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">"&lt;color>"</span><span class="token punctuation">;</span>
  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span>
  <span class="token property">initial-value</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Como ves, muy sencillo.</p>
<h3 id="tipos-de-datos-css-de-property" tabindex="-1"><a class="header-anchor" href="#tipos-de-datos-css-de-property">Tipos de datos CSS de <code>@property</code></a></h3>
<p>Los valores posibles de la propiedad <code>syntax</code> deben colocarse entre signos angulares <code>&lt;</code> y <code>&gt;</code> (<em>como si fuera una etiqueta HTML</em>) y podemos utilizar cualquiera de los siguientes:</p>
<table>
<thead>
<tr>
<th>Sintaxis posibles</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;length&gt;</code></td>
<td>Indicamos una distancia o tamaño en una <a href="../../unidades-css/que-son/index.htm">unidad CSS</a>, ya sea absoluta, relativa o de viewport.</td>
</tr>
<tr>
<td><code>&lt;length-percentage&gt;</code></td>
<td>Permite tanto las unidades anteriores como los valores de porcentaje.</td>
</tr>
<tr>
<td><code>&lt;percentage&gt;</code></td>
<td>Indica sólo y exclusivamente valores de porcentajes.</td>
</tr>
<tr>
<td><code>&lt;angle&gt;</code></td>
<td>Permite indicar ángulos, con unidades como <code>deg</code> o <code>turn</code>, entre otras.</td>
</tr>
<tr>
<td><code>&lt;time&gt;</code></td>
<td>Indica valores de tiempo, como por ejemplo, <code>s</code> o <code>ms</code>.</td>
</tr>
<tr>
<td><code>&lt;resolution&gt;</code></td>
<td>Permite indicar valores de resolución, muy útiles en media queries, como <code>dpi</code>, <code>dppx</code> u otros.</td>
</tr>
<tr>
<td><code>&lt;integer&gt;</code></td>
<td>Indica valores numéricos enteros, ya sean positivos o negativos.</td>
</tr>
<tr>
<td><code>&lt;number&gt;</code></td>
<td>Permite tanto los valores anteriores, como valores decimales.</td>
</tr>
<tr>
<td><code>&lt;color&gt;</code></td>
<td>Permite indicar <a href="../../colores/codigos-color/index.htm">colores CSS</a>, mediante sintaxis hexadecimal, rgb() u otras.</td>
</tr>
<tr>
<td><code>&lt;custom-ident&gt;</code></td>
<td>Valores personalizados por el usuario, similar a un string: nombre de animaciones, propiedades, etc.</td>
</tr>
<tr>
<td><code>&lt;url&gt;</code></td>
<td>Indica una URL mediante la función <code>url()</code> de CSS.</td>
</tr>
<tr>
<td><code>&lt;image&gt;</code></td>
<td>Permite indicar los valores anteriores de <code>url()</code> o <a href="../../gradientes/linear-gradient/index.htm">gradientes CSS</a>.</td>
</tr>
<tr>
<td><code>&lt;transform-function&gt;</code></td>
<td>Indica una <a href="../../transformaciones/transform/index.htm">función de transformación</a> como <code>translate()</code>, <code>scale()</code> o similares.</td>
</tr>
<tr>
<td><code>&lt;transform-list&gt;</code></td>
<td>Permite una combinación de varias funciones de transformación de las anteriores.</td>
</tr>
</tbody>
</table>
<h3 id="la-regla-property-desde-javascript" tabindex="-1"><a class="header-anchor" href="#la-regla-property-desde-javascript">La regla <code>@property</code> desde Javascript</a></h3>
<p>Si estamos trabajando con Javascript, es posible definir estas variables CSS para añadirle su tipo de dato desde Javascript, con una sintaxis muy parecida a la que hacemos con la regla <code>@property</code>. Para ello, utilizamos el método <code>registerProperty()</code> del objeto <code>CSS</code>.</p>
<p>Veamos el mismo ejemplo anterior, en su equivalente Javascript:</p>
<pre class="language-js"><code class="language-js"><span class="token constant">CSS</span><span class="token punctuation">.</span><span class="token function">registerProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"--color"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">syntax</span><span class="token operator">:</span> <span class="token string">"&lt;color>"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">inherits</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">initialValue</span><span class="token operator">:</span> <span class="token string">"red"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>Observa, que al método <code>registerProperty()</code> se le pasa un objeto que contendrá:</p>
<ul>
<li>👩‍🎓 El nombre de la variable CSS mediante la propiedad <code>name</code>.</li>
<li>👓 La sintaxis (<em>tipo de dato</em>) igual que se le aplica en CSS, con <code>syntax</code>.</li>
<li>🎈 La propiedad <code>inherits</code> con un booleano que indica si se hereda o no.</li>
<li>✨ El valor inicial de la variable CSS. Ojo que la propiedad se pasa a camelCase: <code>initialValue</code>.</li>
</ul>
<hr>
<p>Poco a poco se va ampliando el soporte de <strong>CSS Houdini</strong> en navegadores, y la regla <code>@property</code> es uno de los mecanismos base para utilizar todo lo demás. El soporte de esta característica en navegadores es el siguiente:</p>
<p><caniuse-support title="Css at-rules property" feature="mdn-css_at-rules_property" edge="85/y" firefox="preview/y" chrome="85/y" safari="16.4/y" opera="71/y" ios_saf="16.4/y" and_chr="85/y" and_ff="✗/n">
</caniuse-support></p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    <script async="" src="../../../pagead/js/f.txt?client=ca-pub-0412426997270095" crossorigin="anonymous"></script>
<ins class="adsbygoogle" style="display:block; margin: 1em var(--pad)" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-0412426997270095" data-ad-slot="3027930890"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../la-regla-scope/index.htm" title="La regla @scope">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>La regla @scope</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../../calidad-de-codigo/minificar-css/index.htm" title="Minificar CSS">
  <div>
    <span>Minificar CSS</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>

  </div>

<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/FWDBGZQPzXk" title="Cómo crear GRADIENTES REPETIDOS en CSS">
  <img loading="lazy" src="../../../vi/FWDBGZQPzXk/mqdefault.jpg" alt="Cómo crear GRADIENTES REPETIDOS en CSS">
</a><a href="https://youtu.be/esjagdcozX0" title="Flex CSS: ¡Aprendiendo las bases!">
  <img loading="lazy" src="../../../vi/esjagdcozX0/mqdefault.jpg" alt="Flex CSS: ¡Aprendiendo las bases!">
</a><a href="https://youtu.be/L7Hi32qBIxI" title="Cómo crear SOMBRAS EN CAJAS (box-shadow)">
  <img loading="lazy" src="../../../vi/L7Hi32qBIxI/mqdefault.jpg" alt="Cómo crear SOMBRAS EN CAJAS (box-shadow)">
</a><a href="https://youtu.be/g5QVe65vPd4" title="Grid CSS: Celdas irregulares">
  <img loading="lazy" src="../../../vi/g5QVe65vPd4/mqdefault.jpg" alt="Grid CSS: Celdas irregulares">
</a><a href="https://youtu.be/K-nE-kZKLRw" title="¡NOVEDADES CSS! ¿Cuánto de este código CSS eres CAPAZ de reconocer?">
  <img loading="lazy" src="../../../vi/K-nE-kZKLRw/mqdefault.jpg" alt="¡NOVEDADES CSS! ¿Cuánto de este código CSS eres CAPAZ de reconocer?">
</a><a href="https://youtu.be/mNTj6KfYeXc" title="Cómo crear GRADIENTES CÓNICOS en CSS">
  <img loading="lazy" src="../../../vi/mNTj6KfYeXc/mqdefault.jpg" alt="Cómo crear GRADIENTES CÓNICOS en CSS">
</a></div>
  </div>
</section>

  <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

  

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-3', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>
</body>

</html>
