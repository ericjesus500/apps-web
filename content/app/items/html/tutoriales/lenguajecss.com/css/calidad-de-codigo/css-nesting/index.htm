<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#1e7bbf">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>CSS Nesting nativo - CSS en español - Lenguaje CSS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="El anidamiento CSS o CSS Nesting de forma nativa está comenzando a llegar a los navegadores. Descubre como funciona.">
  
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="CSS Nesting nativo - CSS en español">
  <meta property="og:image" content="https://lenguajecss.com/css/calidad-de-codigo/css-nesting/css-nesting.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="El anidamiento CSS o CSS Nesting de forma nativa está comenzando a llegar a los navegadores. Descubre como funciona.">
  <meta property="og:url" content="https://lenguajecss.com/css/calidad-de-codigo/css-nesting/">
  <meta property="twitter:url" content="https://lenguajecss.com/css/calidad-de-codigo/css-nesting/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="CSS Nesting nativo - CSS en español">
  <meta property="twitter:description" content="El anidamiento CSS o CSS Nesting de forma nativa está comenzando a llegar a los navegadores. Descubre como funciona.">
  <meta property="twitter:image" content="https://lenguajecss.com/css/calidad-de-codigo/css-nesting/css-nesting.png">

  </head>

<body class="css" style="--logo-color: #1e7bbf"><div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#css"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeCSS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/css.jpg')">
    <h1><a href="index.htm">CSS Nesting nativo</a></h1><h2 class="typewriter">Anidamiento CSS nativo</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../stylelint/index.htm">StyleLint: Linter CSS</a>
    <a class="current" href="index.htm">CSS Nesting nativo</a>
    <a href="../metodologias-css/index.htm">Metodologías CSS</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>

    <div class="post-container">
  <div class="contents">
    
    <p><strong>CSS</strong> es un lenguaje maravilloso, expresivo y muy fácil de entender y aprender. Sin embargo, a la misma vez, es un lenguaje díficil de dominar y <strong>muy complejo de organizar</strong>. Si llevas algo de tiempo escribiendo código CSS, te habrás dado cuenta que es muy fácil que el código de CSS crezca mucho y muy rápidamente.</p>
<p>Si no eres organizado y cuidadoso, el código CSS que estás escribiendo puede descontrolarse muy fácilmente. De hecho, aunque seas organizado y tengas destreza con CSS, si necesitas dar estilo a una página o sitio muy grande, es muy sencillo que el código se vuelva <strong>muy difícil de mantener</strong>.</p>
<p><img src="css-nesting.png" alt="CSS Nesting" width="2424" height="925" loading="lazy"></p>
<blockquote>
<blockquote>
<p><strong>Atención</strong>: El CSS Nesting nativo tiene un soporte irregular en navegadores. Puedes probarlo en <strong>Chrome 112+</strong>.</p>
</blockquote>
</blockquote>
<h3 id="qué-es-css-nesting" tabindex="-1"><a class="header-anchor" href="#qué-es-css-nesting">¿Qué es CSS Nesting?</a></h3>
<p>Tradicionalmente, el código CSS se ha trabajado siempre mediante <a href="../../selectores/selectores-basicos/index.htm">selectores CSS</a>. Sin embargo, la idea detrás del concepto de <strong>CSS Nesting</strong> (<em>código CSS anidado</em>) es tener fragmentos o bloques de código uno dentro de otros, haciendo que estos selectores sean mucho más intuitivos para el programador, y por lo tanto, mucho más fáciles de mantener.</p>
<p>Veamos un ejemplo muy sencillo. Con CSS tradicional, utilizando <strong>selectores CSS</strong> nuestro código se vería así:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.container .item</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Este código hay que comprender bien como funcionan los <strong>selectores de CSS</strong>. Cuando son fragmentos de código cortos o breves, no suele haber mucho problema, sin embargo, cuando el código crece o no está bien organizado de forma consecutiva, la cosa se puede complicar. Además, si hay colisiones imprevistas de nombres de clases la cosa empeora.</p>
<p>Utilizando <strong>CSS Nesting</strong>, sin embargo, conseguimos que sólo mirando el código se haga evidente cuando un elemento está dentro de otro, evitando colisiones y haciendo mucho más fácil de mantener y modularizar nuestros estilos:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>

  <span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Observa que en este caso, el elemento <code>.item</code> está en el interior de la clase <code>.container</code>, por lo que queda implicitamente más claro, y mucho más organizado y fácil de gestionar a medida que el código crece.</p>
<p><youtube-video v="toA0uqeuHXQ" alt="CSS Nesting: Anidamiento nativo en CSS"></youtube-video></p>
<h3 id="sintaxis-de-anidamiento" tabindex="-1"><a class="header-anchor" href="#sintaxis-de-anidamiento">Sintaxis de anidamiento</a></h3>
<p>A lo largo del tiempo, el <strong>CSS Nesting</strong> se ha implementado con diferentes sintaxis (<em>Sass, PostCSS, versiones tempranas del nesting nativo...</em>), pero finalmente, se han permitido varias formas diferentes en la versión estándar final, cada una apropiada para algunos casos:</p>
<h4 id="sintaxis-simple" tabindex="-1"><a class="header-anchor" href="#sintaxis-simple">Sintaxis simple</a></h4>
<p>La sintaxis más sencilla que podemos utilizar es la que mostramos en el ejemplo anterior. Simplemente, dentro de un elemento, podemos volver a mencionar otro. Sin embargo, aunque es más sencilla y sirve para casos simples, esta sintaxis puede tener ciertas limitaciones.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>

  <span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> indigo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>El anidamiento de <code>.item</code> corresponde al selector <code>.container .item</code>. Sin embargo, hay varios casos donde este anidamiento no funcionaría y tendríamos que utilizar el selector <code>&amp;</code>.</p>
<blockquote>
<p>Safari, en el motor <code>WebKit</code> ha establecido que el <a href="https://github.com/WebKit/WebKit/commit/c9ac90f8cbfa0ae54a296168fe0c517826ff6757">máximo de niveles de anidamiento sea <code>128</code></a>. Sin embargo, aunque no tenemos un valor estricto, deberíamos intentar mantenernos como máximo en 4-5 níveles de anidamiento apróximadamente, y sólo superarlos si está bien justificado.</p>
</blockquote>
<h4 id="sintaxis-avanzada" tabindex="-1"><a class="header-anchor" href="#sintaxis-avanzada">Sintaxis avanzada</a></h4>
<p>Dentro del <strong>CSS Nesting</strong> tenemos el operador <code>&amp;</code>, que nos permite hacer referencia al selector inmediatamente padre dentro del anidamiento. Esto puede resultarnos muy útil en algunos casos diferentes al anterior. Observa el siguiente ejemplo, donde en lugar de la clase <code>.item</code> seleccionamos cualquier elemento <code>div</code> que esté dentro de <code>.container</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>

  <span class="token selector">&amp; div</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> indigo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<blockquote>
<blockquote>
<p>El ejemplo anterior, sin el selector <code>&amp;</code> es imposible de realizar con <strong>CSS Nesting</strong>, puesto que la sintaxis simple no permite colocar elementos directos que no sean clases, id, combinadores, etc.</p>
</blockquote>
</blockquote>
</blockquote>
<p>Otra situación problemática podría ser el caso en el que queramos darle estilo a la clase <code>.container</code> cuando tenemos el ratón encima de ella. Observa el siguiente fragmento de código donde conseguimos un selector equivalente a <code>.container:hover</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>

  <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> indigo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<blockquote>
<blockquote>
<p>Si omitimos el selector <code>&amp;</code> en este ejemplo anterior, el código CSS será válido, pero no equivalente. Omitiendo el selector <code>&amp;</code> estaríamos obteniendo el selector equivalente <code>.container :hover</code> en lugar de <code>.container:hover</code>. Es decir, estaríamos aplicando estilos <code>:hover</code> a los elementos dentro de <code>.container</code> en lugar de al propio <code>.container</code>.</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="anidamiento-sobre-el-padre" tabindex="-1"><a class="header-anchor" href="#anidamiento-sobre-el-padre">Anidamiento sobre el padre</a></h3>
<p>En los casos anteriores siempre hemos colocado el selector <code>&amp;</code> al principio. Sin embargo, puede darse el caso que queramos anidar de una forma diferente. En el siguiente ejemplo, el selector equivalente sería <code>.item .container</code>, es decir, elementos <code>.item</code> que contengan al padre:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>

  <span class="token selector">.item &amp;</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Aunque en principio pueda parecer poco lógico, puede tener sentido en casos donde queremos incluir un elemento anidado porque tiene cierta relación en este contexto de anidación y quedará mejor organizado.</p>
<p>Además, también nos permite hacer anidaciones menos directas pero que pueden ser muy interesantes por su relación con el elemento contenedor. Observa los siguientes ejemplos:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>

  <span class="token selector">.item &amp; .item &amp;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment">/* Equivalente a -> .item .container .item .container */</span>
  <span class="token selector">:is(.page, .menu) &amp;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">/* Equivalente a -> .page .container, .menu .container */</span>
  <span class="token selector">:not(&amp;)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>             <span class="token comment">/* Equivalente a -> :not(.container) */</span>
<span class="token punctuation">}</span></code></pre>
<p>Esto nos permitirá organizar y mantener mejor nuestro código.</p>
<h3 id="anidamiento-de-reglas" tabindex="-1"><a class="header-anchor" href="#anidamiento-de-reglas">Anidamiento de reglas</a></h3>
<p>Es posible anidar <a href="../../reglas-css/que-son-reglas-css/index.htm">reglas CSS</a> en el interior de bloques de código CSS donde se aplica <strong>CSS Nesting</strong>. Concretamente, es posible hacerlo si se trata de reglas <code>@media</code>, <code>@supports</code>, <code>@layer</code>, <code>@scope</code> o <code>@container</code>. De esta forma, podemos organizar, por ejemplo, código responsive de un fragmento de código de forma muy compacta:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>

  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>En este caso, el código del interior de la regla <code>@media</code> se le aplica al elemento <code>.container</code>, simplificando mucho la sintaxis y haciéndolo más fácil de organizar.</p>
<h3 id="soporte-y-compatibilidad" tabindex="-1"><a class="header-anchor" href="#soporte-y-compatibilidad">Soporte y compatibilidad</a></h3>
<p>La característica de <strong>CSS Nesting</strong> es un cambio grande en la forma de escribir código CSS y se lleva esperando durante mucho tiempo. Algunos navegadores están comenzando a implementarla, pero no obstante, aún se tardará algún tiempo en tener soporte completo para todos los navegadores, ya que se debe revisar complementar que su funcionamiento sea correcto y tener en cuenta casuísticas muy concretas.</p>
<p><caniuse-support title="CSS Nesting" feature="css-nesting" edge="112/y" firefox="117/y" chrome="112/y" safari="16.5/y" opera="98/y" ios_saf="16.5/y" and_chr="116/y" and_ff="✗/n">
</caniuse-support></p>
<blockquote>
<p>Si necesitas utilizar <strong>CSS Nesting</strong> con compatibilidad para todos los navegadores (<em>incluídos navegadores antiguos</em>), un enfoque más seguro hoy en día podría ser utilizar el <a href="../../../postcss/plugins/css-nesting/index.htm">CSS Nesting con PostCSS</a>, Sass o herramientas similares.</p>
</blockquote>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    <script async="" src="../../../pagead/js/f.txt?client=ca-pub-0412426997270095" crossorigin="anonymous"></script>
<ins class="adsbygoogle" style="display:block; margin: 1em var(--pad)" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-0412426997270095" data-ad-slot="3027930890"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../stylelint/index.htm" title="StyleLint: Linter CSS">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>StyleLint: Linter CSS</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../metodologias-css/index.htm" title="Metodologías CSS">
  <div>
    <span>Metodologías CSS</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>

  </div>

<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/uMMLQNgsivg" title="Parcel CSS: ¿Una ALTERNATIVA RÁPIDA a PostCSS?">
  <img loading="lazy" src="../../../vi/uMMLQNgsivg/mqdefault.jpg" alt="Parcel CSS: ¿Una ALTERNATIVA RÁPIDA a PostCSS?">
</a><a href="https://youtu.be/bMiXLfOnuUA" title="ECSStatic: Librería CSS-in-JS">
  <img loading="lazy" src="../../../vi/bMiXLfOnuUA/mqdefault.jpg" alt="ECSStatic: Librería CSS-in-JS">
</a><a href="https://youtu.be/8Jh2K3tq5n0" title="Tutorial para aprender Animaciones CSS">
  <img loading="lazy" src="../../../vi/8Jh2K3tq5n0/mqdefault.jpg" alt="Tutorial para aprender Animaciones CSS">
</a><a href="https://youtu.be/lM4eufOnKVA" title="Especificidad CSS: ¿Cómo evitar los !important?">
  <img loading="lazy" src="../../../vi/lM4eufOnKVA/mqdefault.jpg" alt="Especificidad CSS: ¿Cómo evitar los !important?">
</a><a href="https://youtu.be/mNTj6KfYeXc" title="Cómo crear GRADIENTES CÓNICOS en CSS">
  <img loading="lazy" src="../../../vi/mNTj6KfYeXc/mqdefault.jpg" alt="Cómo crear GRADIENTES CÓNICOS en CSS">
</a><a href="https://youtu.be/8tTMYgHBQPI" title="Analizando las preguntas del STATE OF CSS 2022">
  <img loading="lazy" src="../../../vi/8tTMYgHBQPI/mqdefault.jpg" alt="Analizando las preguntas del STATE OF CSS 2022">
</a></div>
  </div>
</section>

  <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

  

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-3', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>
</body>

</html>
