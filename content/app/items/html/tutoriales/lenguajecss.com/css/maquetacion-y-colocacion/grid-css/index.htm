<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#1e7bbf">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Grid CSS: Introducción - CSS en español - Lenguaje CSS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Grid CSS permite dejar atrás la problemática forma de crear diseños en CSS, aportando un modelo de cuadrículas o rejillas muy personalizable y flexible.">
  
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Grid CSS: Introducción - CSS en español">
  <meta property="og:image" content="https://lenguajecss.com/css/maquetacion-y-colocacion/grid-css/grid-css.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Grid CSS permite dejar atrás la problemática forma de crear diseños en CSS, aportando un modelo de cuadrículas o rejillas muy personalizable y flexible.">
  <meta property="og:url" content="https://lenguajecss.com/css/maquetacion-y-colocacion/grid-css/">
  <meta property="twitter:url" content="https://lenguajecss.com/css/maquetacion-y-colocacion/grid-css/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Grid CSS: Introducción - CSS en español">
  <meta property="twitter:description" content="Grid CSS permite dejar atrás la problemática forma de crear diseños en CSS, aportando un modelo de cuadrículas o rejillas muy personalizable y flexible.">
  <meta property="twitter:image" content="https://lenguajecss.com/css/maquetacion-y-colocacion/grid-css/grid-css.png">

  </head>

<body class="css" style="--logo-color: #1e7bbf"><div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#css"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeCSS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/css.jpg')">
    <h1><a href="index.htm">Grid CSS: Introducción</a></h1><h2 class="typewriter">Cuadrículas, grillas o rejillas</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../flex-organizar/index.htm">Flex CSS: Flexibilidad</a>
    <a class="current" href="index.htm">Grid CSS: Introducción</a>
    <a href="../grid-css-alinear/index.htm">Grid CSS: Alinear elementos</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>

    <div class="post-container">
  <div class="contents">
    
    <p>Uno de los procesos más problematicos y frustrantes de CSS, sobre todo para novatos o principiantes, es el proceso de colocar y distribuir los elementos a lo largo de una página. Mecanismos como posicionamiento, floats o elementos en bloque o en línea, suelen ser insuficientes (<em>o muy complejos</em>) para crear un layout o estructuras para páginas web actuales.</p>
<p><youtube-video v="Q1CXWBtxKZU" alt="Conceptos base y fundamentos de Grid CSS"></youtube-video></p>
<p>El sistema de elementos flexibles <strong>Flex</strong> es una gran mejora, sin embargo, está orientado a estructuras de una sola dimensión, y puede ser laborioso crear estructuras más complejas, por lo que aún necesitamos algo más potente para estructuras web de varias dimensiones rápidamente. Con el paso del tiempo, muchos frameworks CSS y librerías comenzaron a utilizar un <strong>sistema basado en un grid</strong> donde se definía una cuadrícula, a la que era posible darle tamaño, posición o colocación, cambiando el nombre de sus clases.</p>
<p><img src="grid.png" alt="Grid CSS" width="1067" height="469" loading="lazy"></p>
<p><strong>Grid CSS</strong> nace de esa necesidad, obteniendo las ventajas de ese <strong>sistema grid</strong>, añadiéndole numerosas mejoras y características que permiten crear rápidamente cuadrículas flexibles y potentes de forma prácticamente instantánea con una nueva familia de propiedades CSS.</p>
<blockquote>
<p>Antes de comenzar con <strong>Grid CSS</strong>, quizás sería conveniente conocer el sistema de maquetación mediante <a href="../flex/index.htm">Flex</a>, ya que Grid toma la filosofía (<em>y muchas de las bases y conceptos</em>) que se utilizan en él.</p>
</blockquote>
<h3 id="conceptos" tabindex="-1"><a class="header-anchor" href="#conceptos">Conceptos</a></h3>
<p>Para crear diseños basados en <strong>Grid CSS</strong> necesitaremos tener en cuenta una serie de conceptos que utilizaremos a partir de ahora y que definiremos a continuación:</p>
<p><img src="grid-css-conceptos.png" alt="Grid CSS: ¿Cómo funciona?" width="851" height="534" loading="lazy"></p>
<ul>
<li><strong>Contenedor</strong>: El elemento padre contenedor que definirá la cuadrícula o rejilla.</li>
<li><strong>Ítem</strong>: Cada uno de los hijos que contiene la cuadrícula (<em>elemento contenedor</em>).</li>
<li><strong>Celda (grid cell)</strong>: Cada uno de los cuadritos (<em>unidad mínima</em>) de la cuadrícula.</li>
<li><strong>Area (grid area)</strong>: Región o conjunto de celdas de la cuadrícula.</li>
<li><strong>Banda (grid track)</strong>: Banda horizontal o vertical de celdas de la cuadrícula.</li>
<li><strong>Línea (grid line)</strong>: Separador horizontal o vertical de las celdas de la cuadrícula.</li>
</ul>
<h3 id="modalidades-de-grid" tabindex="-1"><a class="header-anchor" href="#modalidades-de-grid">Modalidades de grid</a></h3>
<p>Para utilizar cuadriculas <strong>Grid CSS</strong>, trabajaremos bajo el siguiente escenario:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- contenedor --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- cada uno de los ítems del grid --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>Para activar la cuadrícula <strong>grid</strong> hay que utilizar sobre el elemento contenedor la propiedad <code>display</code> y especificar uno de los dos valores que queramos utilizar: <strong>grid</strong> o <strong>inline-grid</strong>.</p>
<table>
<thead>
<tr>
<th>Tipo de elemento</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inline-grid</code></td>
<td>Establece una cuadrícula con ítems <strong>en línea</strong>, de forma equivalente a <code>inline-block</code>.</td>
</tr>
<tr>
<td><code>grid</code></td>
<td>Establece una cuadrícula con ítems <strong>en bloque</strong>, de forma equivalente a <code>block</code>.</td>
</tr>
</tbody>
</table>
<p>Este valor influye en como se comportará la cuadrícula con el contenido exterior. El primero de ellos permite que la cuadrícula aparezca encima/debajo del contenido exterior (<em>en bloque</em>) y el segundo de ellos permite que la cuadrícula aparezca a la izquierda/derecha (<em>en línea</em>) del contenido exterior (<em>ojo, la cuadrícula entera, no cada uno de sus ítems</em>):</p>
<div class="example example-1">
  <strong>display:</strong>
  <button class="mode" data-property="display" data-value="grid">grid</button>
  <button class="mode" data-property="display" data-value="inline-grid">inline-grid</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
    <div class="item item-4">4</div>
  </div>
</div>
<style>
  .example-1 .container {
    display: grid;
    background: steelblue;
  }
  .example-1 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-1 button.mode"));
    const container = document.querySelector(".example-1 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<p>Una vez elegido uno de estos dos valores, y establecida la propiedad <code>display</code> al elemento contenedor, hay varias formas de configurar nuestra cuadrícula grid. Al igual que con <strong>Flex</strong>, muchas de las propiedades se aplican al contenedor padre, sin embargo, existen algunas que se aplican sobre los elementos hijos. Las iremos viendo todas detalladamente.</p>
<h3 id="definir-filas-y-columnas" tabindex="-1"><a class="header-anchor" href="#definir-filas-y-columnas">Definir filas y columnas</a></h3>
<h4 id="filas-y-columnas-fijas" tabindex="-1"><a class="header-anchor" href="#filas-y-columnas-fijas">Filas y columnas fijas</a></h4>
<p>En <strong>Grid CSS</strong>, la forma principal de definir una cuadrícula es indicar el tamaño de sus filas y sus columnas de forma explícita. Para ello, sólo tenemos que usar las propiedades CSS <code>grid-template-columns</code> y <code>grid-template-rows</code>:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>grid-template-columns</code></td>
<td>[<em>col1</em>] [<em>col2</em>] ...</td>
<td>Establece el <badge-type class="size"></badge-type> de cada columna (<em>col 1, col 2...</em>).</td>
</tr>
<tr>
<td><code>grid-template-rows</code></td>
<td>[<em>fila1</em>] [<em>fila2</em>] ...</td>
<td>Establece el <badge-type class="size"></badge-type> de cada fila (<em>fila 1, fila 2...</em>).</td>
</tr>
</tbody>
</table>
<p>Conociendo estas dos propiedades, asumamos el siguiente código CSS:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.grid</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 50px 300px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 200px 75px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Con la propiedad <code>display: grid</code> definimos que queremos crear un grid, y mediante las propiedades <code>grid-template-columns</code> y <code>grid-template-rows</code> definimos los tamaños de las columnas y las filas del mismo. Esto significa que, a priori, tendríamos una cuadricula o grid de <strong>4 celdas</strong> en total:</p>
<p><img src="grid-template-columns.png" alt="Cuadrículas explícitas (grid-template-rows y grid-template-columns)" width="662" height="534" loading="lazy"></p>
<p>Veamos un ejemplo interactivo donde se pueden cambiar los valores establecidos en la propiedad <code>grid-template-columns</code> y en la propiedad <code>grid-template-rows</code>, para así poder entenderlo mejor:</p>
<div class="example example-2">
  <strong>grid-template-columns:</strong>
  <input class="mode" data-target="container" data-property="grid-template-columns" value="50px">
  <input class="mode" data-target="container" data-property="grid-template-columns" value="300px">
  <br>
  <strong>grid-template-rows:</strong>
  <input class="mode" data-target="container" data-property="grid-template-rows" value="200px">
  <input class="mode" data-target="container" data-property="grid-template-rows" value="75px">
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
    <div class="item item-4">4</div>
  </div>
</div>
<style>
  .example-2 .container {
    display: grid;
    grid-template-columns: 50px 300px;
    grid-template-rows: 200px 75px;
    background: steelblue;
  }
  .example-2 input {
    padding: 2px 4px;
    width: 45px;
  }
  .example-2 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
  }
</style>
<script>
  (() => {
    const inputs = [...document.querySelectorAll(".example-2 input.mode")];
    const gtc = document.querySelectorAll(".example-2 [data-property='grid-template-columns']");
    const gtr = document.querySelectorAll(".example-2 [data-property='grid-template-rows']");
    const container = document.querySelector(`.example-2 .container`);
    const updateGrid = () => {
      container.style.gridTemplateColumns = gtc[0].value + " " + gtc[1].value;
      container.style.gridTemplateRows = gtr[0].value + " " + gtr[1].value;
    }
    inputs.forEach(input => {
      console.log(input);
      input.oninput = () => updateGrid();
    });
  })();
</script>
<p>Ahora, ten en cuenta que corre de nuestra cuenta vigilar que el número de elementos hijos en el grid es el que debería. Dependiendo del número de <strong>elementos hijos</strong> que tenga definido el contenedor <strong>grid</strong> en su HTML, tendremos una cuadrícula de 2x2 elementos (<em>4 ítems</em>), 2x3 elementos (<em>6 ítems</em>), 2x4 elementos (<em>8 ítems</em>) y así sucesivamente. Incluso, si el número de ítems es impar (<em>por ejemplo, 5 ítems</em>), la última celda de la cuadrícula se quedaría vacía.</p>
<p>A medida que fueramos incluyendo más ítems en el grid, podríamos aumentar también el número de parámetros de la propiedad <code>grid-template-columns</code> y/o la propiedad <code>grid-template-rows</code>. En caso de tener más ítems de lo que se indica en la propiedad, los ítems restantes se incluirían sin formato. De tener menos, simplemente se ocuparían los ítems implicados.</p>
<h4 id="unidad-fracción-restante-fr" tabindex="-1"><a class="header-anchor" href="#unidad-fracción-restante-fr">Unidad fracción restante (fr)</a></h4>
<p>En el ejemplo anterior he utilizado <strong>píxels</strong> como unidades de las celdas de la cuadrícula, sin embargo, también podemos utilizar otras unidades (<em>o incluso combinarlas</em>): porcentajes, la palabra clave <code>auto</code> (<em>que obtiene el tamaño restante</em>) o la unidad especial de grid <code>fr</code> (<em>fracción restante</em>), que explicaremos a continuación.</p>
<p>Supongamos el siguiente fragmento de código, donde utilizamos las unidades <code>fr</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.grid</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 1fr<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 2fr 1fr<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Este nuevo ejemplo, también crea una cuadrícula de <strong>2x2</strong>, donde el tamaño de la cuadrícula se divide en:</p>
<ul>
<li><strong>Dos columnas</strong>: Mismo tamaño de ancho para cada una.</li>
<li><strong>Dos filas</strong>: La primera fila ocupará el doble (<em><code>2fr</code></em>) que la segunda fila (<em><code>1fr</code></em>).</li>
</ul>
<p><img src="grid-unidad-fr.png" alt="Cuadrículas explícitas mediante unidades fr" width="851" height="534" loading="lazy"></p>
<p>De esta forma, es muy fácil predecir el espacio que va a ocupar la cuadrícula, ya que sólo tenemos que sumar todas las unidades para saber el tamaño total, y comparar con cada columna o fila para saber como de grande o pequeña es respecto al total. Así tendremos un mejor control del espacio restante de la cuadrícula, y resultará más intuitivo calcularlo.</p>
<blockquote>
<p>Se pueden combinar varias <strong>unidades diferentes</strong>, como por ejemplo píxeles (<em><code>px</code></em>), fracciones restantes (<em><code>fr</code></em>), porcentajes (<em><code>%</code></em>) y otras combinaciones similares.</p>
</blockquote>
<h4 id="filas-y-columnas-repetitivas" tabindex="-1"><a class="header-anchor" href="#filas-y-columnas-repetitivas">Filas y columnas repetitivas</a></h4>
<p>En algunos casos, en las propiedades <code>grid-template-columns</code> y <code>grid-template-rows</code> podemos necesitar indicar las mismas cantidades un número alto de veces, resultando repetitivo y molesto escribirlas varias veces. Se puede utilizar la función <code>repeat()</code> para indicar repetición de valores, señalando el número de veces que se repiten y el tamaño en cuestión.</p>
<p>La expresión a utilizar sería la siguiente: <code>repeat(</code><badge-type class="number"></badge-type><code>número de veces,</code> <badge-type class="size"></badge-type><code>tamaño)</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.grid</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>

  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px <span class="token function">repeat</span><span class="token punctuation">(</span>4<span class="token punctuation">,</span> 50px<span class="token punctuation">)</span> 200px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> 1fr 2fr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Equivalente a... */</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px 50px 50px 50px 50px 200px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 1fr 2fr 1fr 2fr<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Asumiendo que tuvieramos un contenedor grid con 24 ítems hijos en el HTML, el ejemplo anterior crearía una cuadrícula con <strong>6 columnas</strong> y <strong>4 filas</strong>. Recuerda que en el caso de tener más ítems hijos, el patrón se seguiría repitiendo.</p>
<h4 id="función-minmax" tabindex="-1"><a class="header-anchor" href="#función-minmax">Función minmax()</a></h4>
<p>La función <code>minmax()</code> se puede utilizar como valor para definir rangos flexibles de celda. Funciona de la siguiente forma:</p>
<table>
<thead>
<tr>
<th>Función</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>minmax(</code><badge-type class="size"></badge-type><code>min, </code><badge-type class="size"></badge-type><code>max)</code></td>
<td>Define un rango entre <code>min</code> y <code>max</code>.</td>
</tr>
</tbody>
</table>
<p>Si establecemos un rango, por ejemplo, <code>grid-template-column: minmax(200px, 500px)</code>, estaremos indicando que la celda de columna indicada, tendrá un tamaño de <code>500px</code>, salvo que redimensionemos la ventana del navegador y la hagamos más pequeña, en cuyo caso, el tamaño de la celda podría ir disminuyendo hasta <code>200px</code>, medida en la cuál se quedaría como mínimo.</p>
<p>Prueba con este ejemplo, y prueba a redimensionar la ventana del navegador:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>400px<span class="token punctuation">,</span> 600px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">gap</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>Comprobarás que las celdas se hacen más pequeñas hasta un punto en el que se alcanza el mínimo.</p>
<h4 id="auto-fill-y-auto-fit" tabindex="-1"><a class="header-anchor" href="#auto-fill-y-auto-fit">Auto-fill y Auto-fit</a></h4>
<p>En la función <code>repeat()</code> es posible utilizar las palabras claves <code>auto-fill</code> o <code>auto-fit</code> para indicar al navegador que queremos que <strong>rellene</strong> o <strong>ajuste</strong> el contenedor grid con múltiples elementos hijos dependiendo del tamaño del <strong>viewport</strong> (<em>región visible del navegador</em>).</p>
<p>Es decir, si utilizamos <code>repeat(auto-fill, minmax(300px, 1fr)</code>, el navegador se va a encargar de que los elementos hijos con el tamaño mínimo quepan en la primera fila, y los que no quepan, se desplacen a las siguientes filas del grid, de modo que se aproveche lo mejor posible el contenedor, y consigamos un efecto similar al que se consigue con <strong>media queries</strong>, pero de una forma más directa y con menos código.</p>
<p>Imagina el siguiente ejemplo, con un grid con 10 ítems:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.grid</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>300px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
  <span class="token property">gap</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Si cambiamos el ejemplo anterior a <code>auto-fit</code> no veremos ninguna diferencia. Sin embargo, si por ejemplo cambiamos el valor mínimo de <code>300px</code> a <code>50px</code> (<em>de modo que no llegue a cubrir la primera fila completamente</em>), comprobaremos que mientras <code>auto-fill</code> va <strong>rellenando</strong> la fila del grid y deja el resto del espacio libre, <code>auto-fit</code> <strong>ajusta</strong> el tamaño de los ítems para que cubran el tamaño máximo de la fila.</p>
<h4 id="atajo-la-propiedad-grid-template" tabindex="-1"><a class="header-anchor" href="#atajo-la-propiedad-grid-template">Atajo: La propiedad grid-template</a></h4>
<p>Si acostumbras a utilizar estas propiedades frecuentemente, puedes utilizar la propiedad <code>grid-template</code>, que sirve de atajo para muchas cosas, y una de ellas, resumir en una sola propiedad los valores que tenemos en <code>grid-template-columns</code> y en <code>grid-template-rows</code>:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valores</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>grid-template</code></td>
<td><strong>none</strong> | <em>grid-template-rows</em> / <em>grid-template-columns</em></td>
<td>Atajo para definir dimensiones del grid.</td>
</tr>
</tbody>
</table>
<p>Esta propiedad convierte en un proceso bastante cómodo el crear grids de unas dimensiones concretas de forma resumida. En el caso de utilizar el valor <code>none</code>, las propiedades <code>grid-template-rows</code>, <code>grid-template-columns</code> y la propiedad <code>grid-template-areas</code>, que veremos más adelante en el tema de <a href="../grid-css-areas/index.htm">Grid por áreas</a>, se establecen a sus valores por defecto, desactivando su funcionamiento.</p>
<p>En el caso de utilizar unos valores definidos, la propiedad <code>grid-template-areas</code> se establecerá a <code>none</code>.</p>
<h3 id="huecos-en-grid" tabindex="-1"><a class="header-anchor" href="#huecos-en-grid">Huecos en grid</a></h3>
<p>Por defecto, la cuadrícula tiene todas sus celdas pegadas a sus celdas contiguas. Aunque sería posible darle un <code>margin</code> a las celdas dentro del contenedor, existe una forma más apropiada: los huecos (<em>gutters</em>).</p>
<p>Para especificar los <strong>huecos</strong> (<em>espacio entre celdas</em>) podemos utilizar las propiedades <code>column-gap</code> y/o <code>row-gap</code>. En ellas indicaremos el tamaño de dichos huecos:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>column-gap</code></td>
<td>Establece el <badge-type class="size"></badge-type> de los huecos entre columnas (<em>líneas verticales</em>).</td>
</tr>
<tr>
<td><code>row-gap</code></td>
<td>Establece el <badge-type class="size"></badge-type> de los huecos entre filas (<em>líneas horizontales</em>).</td>
</tr>
</tbody>
</table>
<p>Observa el siguiente grid irregular de ejemplo. No te preocupes por la estructura, más adelante veremos como hacerla. En él, le indicamos estas dos propiedades para colocar <strong>huecos</strong> entre las celdas de la cuadrícula.</p>
<p>El código sería el siguiente:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.grid</span> <span class="token punctuation">{</span>
  <span class="token property">column-gap</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">row-gap</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Con la primera propiedad <code>column-gap</code>, establecemos un hueco de <code>100px</code> entre celda y celda que se encuentre en columna, mientras que con la propiedad <code>row-gap</code> establecemos un hueco de <code>10px</code> entre celda y celda que se encuentre en fila. Nos quedaría algo similar a esto:</p>
<p><img src="grid-gap.png" alt="Huecos en grid CSS (Grid gaps)" width="614" height="378" loading="lazy"></p>
<h4 id="atajo-grid-con-huecos" tabindex="-1"><a class="header-anchor" href="#atajo-grid-con-huecos">Atajo: Grid con huecos</a></h4>
<p>De la misma forma que habrás visto en <strong>flex</strong>, existe una propiedad de atajo para las propiedades <code>column-gap</code> y <code>row-gap</code>, que nos permite la posibilidad de no tener que indicar las propiedades por separado. La propiedad en cuestión sería <code>gap</code> y se utilizaría de la siguiente forma:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.grid</span> <span class="token punctuation">{</span>
  <span class="token comment">/* gap: &lt;row-gap> &lt;column-gap> */</span>
  <span class="token property">gap</span><span class="token punctuation">:</span> 20px 80px<span class="token punctuation">;</span>
  <span class="token comment">/* Equivalente a... */</span>
  <span class="token property">row-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">column-gap</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>

  <span class="token property">gap</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
  <span class="token comment">/* Equivalente a... */</span>
  <span class="token property">row-gap</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
  <span class="token property">column-gap</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p><strong>OJO</strong>: Antiguamente, las propiedades <code>column-gap</code>, <code>row-gap</code> y <code>gap</code> eran conocidas como <code>grid-column-gap</code>, <code>grid-row-gap</code> y <code>grid-gap</code>, por lo que aún puede que encuentres información obsoleta que las mencione. Hoy en día deberías utilizar las tres primeras en su lugar.</p>
</blockquote>
<p>Si tienes curiosidad, esto es una charla que he dado en <a href="https://twitch.tv/ManzDev">mi canal de Twitch</a>, donde creo una baraja de cartas utilizando Flex, Grid CSS y otros mecanismos de maquetación con CSS.</p>
<p><youtube-video v="wIGAyJGx2kc" alt="Baraja de cartas hechas con Flex y Grid CSS... ¡Sin imágenes!"></youtube-video></p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    <script async="" src="../../../pagead/js/f.txt?client=ca-pub-0412426997270095" crossorigin="anonymous"></script>
<ins class="adsbygoogle" style="display:block; margin: 1em var(--pad)" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-0412426997270095" data-ad-slot="3027930890"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../flex-organizar/index.htm" title="Flex CSS: Flexibilidad">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Flex CSS: Flexibilidad</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../grid-css-alinear/index.htm" title="Grid CSS: Alinear elementos">
  <div>
    <span>Grid CSS: Alinear elementos</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>

  </div>

<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/bMiXLfOnuUA" title="ECSStatic: Librería CSS-in-JS">
  <img loading="lazy" src="../../../vi/bMiXLfOnuUA/mqdefault.jpg" alt="ECSStatic: Librería CSS-in-JS">
</a><a href="https://youtu.be/8Jh2K3tq5n0" title="Tutorial para aprender Animaciones CSS">
  <img loading="lazy" src="../../../vi/8Jh2K3tq5n0/mqdefault.jpg" alt="Tutorial para aprender Animaciones CSS">
</a><a href="https://youtu.be/mNTj6KfYeXc" title="Cómo crear GRADIENTES CÓNICOS en CSS">
  <img loading="lazy" src="../../../vi/mNTj6KfYeXc/mqdefault.jpg" alt="Cómo crear GRADIENTES CÓNICOS en CSS">
</a><a href="https://youtu.be/hju7SXmiK7Y" title="Cómo crear SOMBRAS DE TEXTO (text-shadow)">
  <img loading="lazy" src="../../../vi/hju7SXmiK7Y/mqdefault.jpg" alt="Cómo crear SOMBRAS DE TEXTO (text-shadow)">
</a><a href="https://youtu.be/984ry_jsExA" title="CÓMO hacer la ANIMACIÓN del header de Manz.dev">
  <img loading="lazy" src="../../../vi/984ry_jsExA/mqdefault.jpg" alt="CÓMO hacer la ANIMACIÓN del header de Manz.dev">
</a><a href="https://youtu.be/uMMLQNgsivg" title="Parcel CSS: ¿Una ALTERNATIVA RÁPIDA a PostCSS?">
  <img loading="lazy" src="../../../vi/uMMLQNgsivg/mqdefault.jpg" alt="Parcel CSS: ¿Una ALTERNATIVA RÁPIDA a PostCSS?">
</a></div>
  </div>
</section>

  <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

  

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-3', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>
</body>

</html>
