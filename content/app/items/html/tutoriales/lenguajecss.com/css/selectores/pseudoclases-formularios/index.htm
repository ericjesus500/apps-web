<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#1e7bbf">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Pseudoclases de formularios - CSS en español - Lenguaje CSS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Mediante las pseudoclases de formularios, puedes seleccionar elementos dependiendo de su estado, valor o validación. Te lo explico.">
  
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Pseudoclases de formularios - CSS en español">
  <meta property="og:image" content="https://lenguajecss.com/css/selectores/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Mediante las pseudoclases de formularios, puedes seleccionar elementos dependiendo de su estado, valor o validación. Te lo explico.">
  <meta property="og:url" content="https://lenguajecss.com/css/selectores/pseudoclases-formularios/">
  <meta property="twitter:url" content="https://lenguajecss.com/css/selectores/pseudoclases-formularios/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Pseudoclases de formularios - CSS en español">
  <meta property="twitter:description" content="Mediante las pseudoclases de formularios, puedes seleccionar elementos dependiendo de su estado, valor o validación. Te lo explico.">
  <meta property="twitter:image" content="https://lenguajecss.com/css/selectores/large-summary.jpg">

  </head>

<body class="css" style="--logo-color: #1e7bbf"><div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#css"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeCSS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/css.jpg')">
    <h1><a href="index.htm">Pseudoclases de formularios</a></h1><h2 class="typewriter">Formas de seleccionar elementos de un formulario</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../pseudoclases-estructura/index.htm">Pseudoclases de estructura</a>
    <a class="current" href="index.htm">Pseudoclases de formularios</a>
    <a href="../pseudoelementos/index.htm">Pseudoelementos CSS</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>

    <div class="post-container">
  <div class="contents">
    
    <p>Existe una serie de pseudoclases en CSS que pueden ser utilizadas para usar en formularios de una página web. Estas pseudoclases permiten seleccionar elementos para darle estilo dependiendo de temas relacionados con los formularios o los campos que están en el interior de un formulario.</p>
<p>Esencialmente, existen tres categorías:</p>
<ul>
<li><strong>Pseudoclases de interacción en formularios</strong>: Seleccionar elementos cuando cambia el estado de un elemento.</li>
<li><strong>Pseudoclases de estado en formularios</strong>: Seleccionar elementos cuando se encuentran en un estado concreto.</li>
<li><strong>Pseudoclases de validación</strong>: Seleccionar elementos si cumplen o no un cierto criterio de validación.</li>
</ul>
<p>Veamos cada una de ellas y las pseudoclases que las componen.</p>
<h3 id="pseudoclases-de-interacción" tabindex="-1"><a class="header-anchor" href="#pseudoclases-de-interacción">Pseudoclases de interacción</a></h3>
<p>Las siguientes pseudoclases están orientadas a un estado específico de ciertos campos de un formulario que el usuario puede modificar. Estos campos pueden ser los siguientes elementos:</p>
<ul>
<li>Elementos de tipo radio <code>&lt;input type=&quot;radio&quot;&gt;</code></li>
<li>Elementos de casilla de verificación <code>&lt;input type=&quot;checkbox&quot;&gt;</code></li>
</ul>
<p>Las pseudoclases que podemos utilizar son las siguientes:</p>
<table>
<thead>
<tr>
<th>Pseudoclase</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:checked</code></td>
<td>Selecciona el elemento cuando el campo está seleccionado.</td>
</tr>
<tr>
<td><code>:indeterminate</code></td>
<td>Selecciona el elemento cuando la casilla está en un estado indeterminado.</td>
</tr>
</tbody>
</table>
<h4 id="pseudoclase-checked" tabindex="-1"><a class="header-anchor" href="#pseudoclase-checked">Pseudoclase <code>:checked</code></a></h4>
<p>La pseudoclase <code>:checked</code> permite seleccionar un elemento que ha sido marcado o seleccionado y entonces aplicarle estilo CSS. Por ejemplo, se podría utilizar el siguiente fragmento de código:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:checked + span</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Este ejemplo está utilizando el combinador hermano adyacente <code>+</code> para darle formato al <code>&lt;span&gt;</code> que se encuentra a continuación de la casilla <code>&lt;input&gt;</code> seleccionada, ya sea de tipo <code>radio</code> o de tipo <code>checkbox</code>. De esta forma, los textos que acompañan al campo del formulario que hayan sido seleccionados, se mostrarán en verde.</p>
<p>Como detalle adicional, también pueden seleccionar los elementos de opción <code>&lt;option&gt;</code> de una lista seleccionable <code>&lt;select&gt;</code> que se encuentren seleccionados.</p>
<h4 id="pseudoclase-indeterminate" tabindex="-1"><a class="header-anchor" href="#pseudoclase-indeterminate">Pseudoclase <code>:indeterminate</code></a></h4>
<p>La pseudoclase <code>:indeterminate</code> se utiliza para seleccionar elementos que tienen un <strong>estado indeterminado</strong> donde no se sabe exactamente su estado. Hay tres situaciones donde esto puede ocurrir:</p>
<ul>
<li>Un <code>&lt;input type=&quot;checkbox&quot;&gt;</code> donde mediante Javascript se marca la propiedad <code>.indeterminate</code> a <code>true</code>.</li>
<li>Varios <code>&lt;input type=&quot;radio&quot;&gt;</code> con el mismo atributo <code>name</code> y sin definir el atributo <code>checked</code> en ninguno de ellos.</li>
<li>Un elemento <code>&lt;progress&gt;</code> donde no se define su valor y generalmente se muestra moviéndose de un lado a otro.</li>
</ul>
<p>Un ejemplo en acción:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">:indeterminate + span</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>En este caso, de forma similar al anterior, cambiamos el texto que está dentro de un elemento <code>&lt;span&gt;</code> a continuación de uno de los elementos anteriores de formulario en estado indeterminado.</p>
<h3 id="pseudoclases-de-estado" tabindex="-1"><a class="header-anchor" href="#pseudoclases-de-estado">Pseudoclases de estado</a></h3>
<p>Por norma general, los elementos de un formulario HTML están <strong>por defecto activados</strong>, aunque se pueden desactivar añadiendo el atributo <code>disabled</code> (<em>es un atributo booleano, no lleva valor específico</em>). Esto es una práctica muy utilizada para impedir al usuario escribir en cierta parte de un formulario porque, por ejemplo, no es aplicable.</p>
<p>Existen varias pseudoclases para detectar si un campo de un formulario está activado o desactivado, o cierta información relacionada con su estado:</p>
<table>
<thead>
<tr>
<th>Pseudoclase</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:enabled</code></td>
<td>Selecciona cuando el campo del formulario está activado.</td>
</tr>
<tr>
<td><code>:disabled</code></td>
<td>Selecciona cuando el campo del formulario está desactivado.</td>
</tr>
<tr>
<td><code>:read-only</code></td>
<td>Selecciona cuando el campo es de sólo lectura.</td>
</tr>
<tr>
<td><code>:read-write</code></td>
<td>Selecciona cuando el campo es editable por el usuario.</td>
</tr>
<tr>
<td><code>:placeholder-shown</code></td>
<td>Selecciona cuando el campo está mostrando un placeholder.</td>
</tr>
<tr>
<td><code>:default</code></td>
<td>Selecciona cuando el elemento tiene el valor por defecto.</td>
</tr>
</tbody>
</table>
<p>Veamos cada uno de los casos.</p>
<h4 id="pseudoclase-enabled" tabindex="-1"><a class="header-anchor" href="#pseudoclase-enabled">Pseudoclase <code>:enabled</code></a></h4>
<p>Utilizando la autoexplicativa pseudoclase <code>:enabled</code>, podemos seleccionar elementos que se encuentren activados (<em>comportamiento por defecto</em>):</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:enabled</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>En este caso restringimos a los elementos <code>&lt;input&gt;</code> que se encuentren desactivados.</p>
<h4 id="pseudoclase-disabled" tabindex="-1"><a class="header-anchor" href="#pseudoclase-disabled">Pseudoclase <code>:disabled</code></a></h4>
<p>Sin embargo, lo más interesante de este tema viene al poder darle estilo a elementos desactivados con la pseudoclase <code>:disabled</code>, donde se seleccionan los elementos a los que se le ha añadido el atributo <code>disabled</code>:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Botón activado<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>Botón desactivado<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">input:disabled</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
  <span class="token property">cursor</span><span class="token punctuation">:</span> not-allowed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>Al margen de tener la funcionalidad desactivada, también podremos darle estilos visuales que lo informen.</p>
<h4 id="pseudoclase-read-only" tabindex="-1"><a class="header-anchor" href="#pseudoclase-read-only">Pseudoclase <code>:read-only</code></a></h4>
<p>La pseudoclase <code>:read-only</code> selecciona aquellos elementos <code>&lt;input&gt;</code> de un formulario que están marcados con el atributo de sólo lectura <code>readonly</code>. La diferencia entre un campo con atributo <code>disabled</code> y un campo con atributo <code>readonly</code> es que la información del campo con <code>readonly</code> se enviará a través del formulario, mientras que la del campo con <code>disabled</code> no se enviará. Lo que tienen en común es que ambas están bloqueadas y no permiten modificar su valor, por lo que se suelen percibir como algo equivalente.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:read-only</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> darkred<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white
<span class="token punctuation">}</span></code></pre>
<p><strong>Importante</strong>: Ten en cuenta que <code>:read-only</code> aplicará los estilos a todos los elementos HTML que no puedan ser modificados por el usuario. Incluso un <code>&lt;div&gt;</code> o un <code>&lt;p&gt;</code> lo identificará como un elemento de solo lectura, siempre y cuando no lleven el atributo <code>contenteditable</code>.</p>
<h4 id="pseudoclase-read-write" tabindex="-1"><a class="header-anchor" href="#pseudoclase-read-write">Pseudoclase <code>:read-write</code></a></h4>
<p>Por otro lado, la pseudoclase <code>:read-write</code> es muy útil para dar estilos a todos aquellos elementos que son editables por el usuario, sean campos de texto <code>&lt;input&gt;</code> o <code>&lt;textarea&gt;</code>.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:read-write</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white
<span class="token punctuation">}</span></code></pre>
<p>De esta forma, todos los elementos <code>&lt;input&gt;</code> que sean de lectura y escritura (<em>editables</em>) se seleccionarán y será posible aplicarles estilo. Recuerda que la pseudoclase <code>read-write</code> también da estilos a elementos HTML que contengan el atributo <code>contenteditable</code>, como por ejemplo un párrafo editable por el usuario con dicho atributo:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">contenteditable</span><span class="token punctuation">></span></span>Mensaje editable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">:read-write</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<h4 id="pseudoclase-placeholder-shown" tabindex="-1"><a class="header-anchor" href="#pseudoclase-placeholder-shown">Pseudoclase <code>:placeholder-shown</code></a></h4>
<p>Con la pseudoclase <code>:placeholder-shown</code> se nos permite seleccionar y dar estilo a los elementos que están actualmente mostrando un <strong>placeholder</strong>. Si no lo conoces, el término <strong>placeholder</strong> es un texto o imagen de muestra que se suele colocar para que el usuario conozca un ejemplo de la información que debe ir en esa zona.</p>
<p>En nuestro caso, se puede hacer con el atributo <code>placeholder</code> en elementos <code>&lt;input&gt;</code>:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><a href="../../../cdn-cgi/l/email-protection.html" class="__cf_email__" data-cfemail="4b3e383e2a3922240b2c262a222765282426">[email&#160;protected]</a><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">input:placeholder-shown</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #000<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>Recuerda que en los <code>placeholder</code> no se debe colocar texto para indicar que campo es (<em>nick, email...</em>), sino una sugerencia de lo que podrías escribir (<em>Manz, <a href="../../../cdn-cgi/l/email-protection.html" class="__cf_email__" data-cfemail="117c707f6b51747c70787d3f727e7c">[email&#160;protected]</a>...</em>). Para el primer caso es más apropiado utilizar la etiqueta <code>&lt;label&gt;</code>.</p>
<h4 id="pseudoclase-default" tabindex="-1"><a class="header-anchor" href="#pseudoclase-default">Pseudoclase <code>:default</code></a></h4>
<p>Con la pseudoclase <code>:default</code> podemos seleccionar los elementos de un formulario que se consideran que tienen, de alguna forma, un valor por defecto. Es decir:</p>
<ul>
<li>Elementos <code>&lt;input type=&quot;checkbox&quot;&gt;</code> o <code>&lt;input type=&quot;radio&quot;&gt;</code> que tienen el atributo <code>checked</code>.</li>
<li>Elementos <code>&lt;selected&gt;</code> donde una de sus opciones tiene el atributo <code>selected</code>.</li>
<li>Elementos <code>&lt;button&gt;</code> o <code>&lt;input type=&quot;submit&quot;&gt;</code> que son el botón por defecto del <code>&lt;form&gt;</code>.</li>
</ul>
<p>Los elementos que coincidan con uno de estos casos, se podrían seleccionar con el siguiente código:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">:default</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 3px solid red<span class="token punctuation">;</span>
  <span class="token property">accent-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="pseudoclases-de-validación" tabindex="-1"><a class="header-anchor" href="#pseudoclases-de-validación">Pseudoclases de validación</a></h3>
<p>En HTML5 es posible dotar de capacidades de <strong>validación</strong> a los campos de un formulario, pudiendo interactuar con ellos desde Javascript o incluso desde CSS. Con estas validaciones podemos asegurarnos de que el usuario escribe en un campo de un formulario el valor esperado.</p>
<p>Existen algunas pseudoclases útiles para las validaciones, como por ejemplo las siguientes:</p>
<table>
<thead>
<tr>
<th>Pseudoclase</th>
<th>¿Cuándo aplica estilos?</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:required</code></td>
<td>Cuando el campo es obligatorio, o sea, tiene el atributo <code>required</code>.</td>
</tr>
<tr>
<td><code>:optional</code></td>
<td>Cuando el campo es opcional (por defecto, todos los campos).</td>
</tr>
<tr>
<td><code>:valid</code></td>
<td>Cuando los campos cumplen la validación HTML5.</td>
</tr>
<tr>
<td><code>:invalid</code></td>
<td>Cuando los campos no cumplen la validación HTML5.</td>
</tr>
<tr>
<td><code>:user-valid</code></td>
<td>Idem a <code>:valid</code>, pero cuando el usuario ha interactuado.</td>
</tr>
<tr>
<td><code>:user-invalid</code></td>
<td>Idem a <code>:invalid</code>, pero cuando el usuario ha interactuado.</td>
</tr>
<tr>
<td><code>:in-range</code></td>
<td>Cuando los campos numéricos están dentro del rango.</td>
</tr>
<tr>
<td><code>:out-of-range</code></td>
<td>Cuando los campos numéricos están fuera del rango.</td>
</tr>
</tbody>
</table>
<p>Veamos algunos detalles sobre cada una de ellas.</p>
<h4 id="pseudoclase-required" tabindex="-1"><a class="header-anchor" href="#pseudoclase-required">Pseudoclase <code>:required</code></a></h4>
<p>En un formulario HTML es posible establecer un campo obligatorio que será necesario rellenar para enviarlo. Por ejemplo, el DNI de una persona que va a matricularse en un curso, o el nombre de usuario de alta en una plataforma web para identificarse. Campos que son absolutamente necesarios.</p>
<p>Por lo general, los campos de un formulario son siempre opcionales. Para hacer obligatorio un campo, tenemos que indicar en el elemento HTML el atributo <code>required</code>, al cuál será posible darle estilo mediante la pseudoclase <code>:required</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:required</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>De esta forma, todos los campos <code>&lt;input&gt;</code> obligatorios aparecerán con un borde rojo.</p>
<h4 id="pseudoclase-optional" tabindex="-1"><a class="header-anchor" href="#pseudoclase-optional">Pseudoclase <code>:optional</code></a></h4>
<p>Por otra parte, los campos opcionales son todos aquellos que no tienen el atributo <code>required</code>. Pueden seleccionarse con la pseudoclase <code>:optional</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:optional</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid grey<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="pseudoclase-valid" tabindex="-1"><a class="header-anchor" href="#pseudoclase-valid">Pseudoclase <code>:valid</code></a></h4>
<p>Las <strong>validaciones en formularios HTML</strong> siempre han sido un proceso tedioso, al menos hasta la llegada de HTML5. Actualmente, desde HTML5 se brinda un excelente soporte de validaciones desde el lado del cliente sin necesidad de Javascript, pudiendo comprobar si los datos especificados son correctos o no antes de realizar las validaciones en el lado del servidor, y <strong>evitando la latencia</strong> de enviar la información al servidor y recibirla de vuelta.</p>
<blockquote>
<blockquote>
<blockquote>
<p><strong>Importante:</strong> Ten en cuenta que la validación de cliente es apropiada solo para reducir la latencia de envío/recepción al servidor, pero nunca como estrategia para evitar problemas de seguridad o similares, para la cuál <strong>SIEMPRE</strong> se debe tener <strong>validación en el servidor</strong>. Las validaciones utilizadas en frontend, es posible falsearlas o saltárselas.</p>
</blockquote>
</blockquote>
</blockquote>
<p>Para validar la información del campo de formulario utilizamos el atributo <code>pattern</code> y un mecanismo para detectar coincidencias llamado <a href="https://lenguajejs.com/javascript/regexp/expresiones-regulares/">expresiones regulares</a>. Imaginemos un campo de entrada en el que queremos obtener la <strong>edad del usuario</strong>. Nuestra intención es que solo se puedan introducir números. Para ello hacemos uso de la <strong>expresión regular</strong> <code>[0-9]+</code>, que significa «<em>una o más cifras del 0 al 9</em>»:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[0-9]+<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>Sin embargo, el atributo <code>pattern</code> permite expresiones regulares realmente complejas, como por ejemplo, una <strong>expresión regular</strong> para validar el formato de un DNI, ya sea en el formato nacional de España (<em>12345678L</em>) o en formato NIE (<em>X1234567L</em>), aceptando guiones si se indican:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dni<span class="token punctuation">"</span></span>
       <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(([X-Z]{1})([-]?)(\d{7})([-]?)([A-Z]{1}))|((\d{8})([-]?)([A-Z]{1}))<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>Una vez establecida la validación mediante el atributo <code>pattern</code>, ahora, mediante la pseudoclase <code>:valid</code> podemos aplicar un estilo cuando el texto escrito en el campo pase correctamente la validación:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:valid</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="pseudoclase-invalid" tabindex="-1"><a class="header-anchor" href="#pseudoclase-invalid">Pseudoclase <code>:invalid</code></a></h4>
<p>De forma opuesta, se pueden seleccionar elementos y aplicar ciertos estilos si no se cumple el patrón de validación, utilizando la pseudoclase <code>:invalid</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:invalid</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> darkred<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="pseudoclase-user-valid" tabindex="-1"><a class="header-anchor" href="#pseudoclase-user-valid">Pseudoclase <code>:user-valid</code></a></h4>
<p>La pseudoclase <code>:user-valid</code> es una versión particular de <code>:valid</code>, donde el elemento se selecciona si, además de comprobar que la validación es correcta y se cumple, el usuario ha interactuado con anterioridad con el campo en cuestión.</p>
<p><caniuse-support title="Css selectors user-valid" feature="mdn-css_selectors_user-valid" edge="✗/n" firefox="88/y" chrome="✗/n" safari="16.5/y" opera="✗/n" ios_saf="16.5/y" and_chr="✗/n" and_ff="88/y">
</caniuse-support></p>
<h4 id="pseudoclase-user-invalid" tabindex="-1"><a class="header-anchor" href="#pseudoclase-user-invalid">Pseudoclase <code>:user-invalid</code></a></h4>
<p>De la misma forma, <code>:user-invalid</code> es una versión particular correspondiente a la pseudoclase <code>:invalid</code>. Mientras que <code>:invalid</code> permite seleccionar los elementos que no cumplen la restricción de la validación, <code>:user-invalid</code> permite seleccionar los elementos que no cumplen la validación pero que además el usuario ha interactuado anteriormente con ellos.</p>
<p><caniuse-support title="Css selectors user-invalid" feature="mdn-css_selectors_user-invalid" edge="✗/n" firefox="88/y" chrome="✗/n" safari="16.5/y" opera="✗/n" ios_saf="16.5/y" and_chr="✗/n" and_ff="88/y">
</caniuse-support></p>
<h4 id="pseudoclase-in-range" tabindex="-1"><a class="header-anchor" href="#pseudoclase-in-range">Pseudoclase <code>:in-range</code></a></h4>
<p>Pero ten en cuenta que en una validación numérica, donde un usuario podría escribir <code>500</code> en el campo de <strong>edad</strong>, sería un resultado que no nos gustaría aceptar. En el patrón de validación del atributo <code>pattern</code> indicamos «una o más cifras del 0 al 9», pero no establecemos unos límites.</p>
<p>Lo ideal sería establecer un rango, algo que se suele hacer muy a menudo si tenemos campos numéricos de formulario mediante los atributos <code>min</code> y <code>max</code>:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>Este campo permite al usuario especificar su edad, utilizando los atributos de validación <code>min</code> y <code>max</code>, que sólo permiten valores entre <code>18</code> y <code>100</code> años. De esta forma, si escribimos la pseudoclase <code>:in-range</code> podremos seleccionar los elementos que indican un valor y cumplen la validación:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:in-range</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="pseudoclase-out-of-range" tabindex="-1"><a class="header-anchor" href="#pseudoclase-out-of-range">Pseudoclase <code>:out-of-range</code></a></h4>
<p>La pseudoclase <code>:out-of-range</code>, por otro lado, permite seleccionar y dar estilo a los elementos que tienen valores fuera del rango definido, y por lo tanto, no son válidos.</p>
<p>De la misma forma que antes, es posible aplicar estilos para los valores fuera de rango:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:out-of-range</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> darkred<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>

  </div>
</div>

<script data-cfasync="false" src="../../../cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    <script async="" src="../../../pagead/js/f.txt?client=ca-pub-0412426997270095" crossorigin="anonymous"></script>
<ins class="adsbygoogle" style="display:block; margin: 1em var(--pad)" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-0412426997270095" data-ad-slot="3027930890"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../pseudoclases-estructura/index.htm" title="Pseudoclases de estructura">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Pseudoclases de estructura</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../pseudoelementos/index.htm" title="Pseudoelementos CSS">
  <div>
    <span>Pseudoelementos CSS</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>

  </div>

<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/984ry_jsExA" title="CÓMO hacer la ANIMACIÓN del header de Manz.dev">
  <img loading="lazy" src="../../../vi/984ry_jsExA/mqdefault.jpg" alt="CÓMO hacer la ANIMACIÓN del header de Manz.dev">
</a><a href="https://youtu.be/D5fJxaLCjKg" title="Configurar VSCODE para CORREGIR tu CSS AUTOMÁTICAMENTE">
  <img loading="lazy" src="../../../vi/D5fJxaLCjKg/mqdefault.jpg" alt="Configurar VSCODE para CORREGIR tu CSS AUTOMÁTICAMENTE">
</a><a href="https://youtu.be/toA0uqeuHXQ" title="¿Qué es el CSS NESTING? ¿Cómo funciona?">
  <img loading="lazy" src="../../../vi/toA0uqeuHXQ/mqdefault.jpg" alt="¿Qué es el CSS NESTING? ¿Cómo funciona?">
</a><a href="https://youtu.be/9jea2qDdw7Y" title="Cómo crear SOMBRAS IDÉNTICAS (drop-shadow)">
  <img loading="lazy" src="../../../vi/9jea2qDdw7Y/mqdefault.jpg" alt="Cómo crear SOMBRAS IDÉNTICAS (drop-shadow)">
</a><a href="https://youtu.be/hiRIjRf2QD8" title="FUNCIONES de TIEMPO en CSS: ¡Controla el ritmo de tus animaciones!">
  <img loading="lazy" src="../../../vi/hiRIjRf2QD8/mqdefault.jpg" alt="FUNCIONES de TIEMPO en CSS: ¡Controla el ritmo de tus animaciones!">
</a><a href="https://youtu.be/hju7SXmiK7Y" title="Cómo crear SOMBRAS DE TEXTO (text-shadow)">
  <img loading="lazy" src="../../../vi/hju7SXmiK7Y/mqdefault.jpg" alt="Cómo crear SOMBRAS DE TEXTO (text-shadow)">
</a></div>
  </div>
</section>

  <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

  

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-3', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>
</body>

</html>
