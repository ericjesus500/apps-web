<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#1e7bbf">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>¿Qué es PostCSS? - CSS en español - Lenguaje CSS</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="PostCSS se define como un preprocesador, transformador y postprocesador de CSS construido con Javascript, pero... ¿Qué es realmente?">
  
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="¿Qué es PostCSS? - CSS en español">
  <meta property="og:image" content="https://lenguajecss.com/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="PostCSS se define como un preprocesador, transformador y postprocesador de CSS construido con Javascript, pero... ¿Qué es realmente?">
  <meta property="og:url" content="https://lenguajecss.com/postcss/introduccion/que-es/">
  <meta property="twitter:url" content="https://lenguajecss.com/postcss/introduccion/que-es/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="¿Qué es PostCSS? - CSS en español">
  <meta property="twitter:description" content="PostCSS se define como un preprocesador, transformador y postprocesador de CSS construido con Javascript, pero... ¿Qué es realmente?">
  <meta property="twitter:image" content="https://lenguajecss.com/large-summary.jpg">

  </head>

<body class="css" style="--logo-color: #972321"><div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="../../../index.htm">
  <svg><use href="../../../assets/logos.svg#css"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeCSS.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/postcss.jpg')">
    <h1><a href="index.htm">¿Qué es PostCSS?</a></h1></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a class="current" href="index.htm">¿Qué es PostCSS?</a>
    <a href="../configuracion-postcss/index.htm">Configuración de PostCSS</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>

    <div class="post-container">
  <div class="contents">
    
    <p>A medida que avanzamos en el <strong>desarrollo web</strong> (<em>y en CSS en particular</em>), nos iremos dando cuenta que la mayor parte del tiempo lo invertimos en realizar tareas repetitivas una y otra vez, y que lo ideal sería tener una forma de <strong>automatizar</strong> dichas tareas.</p>
<p>Ahí es donde entra en escena <a href="https://postcss.org/"><strong>PostCSS</strong></a>, una estupenda herramienta que permite darle mayor versatilidad a nuestro código CSS, automatizando tareas, realizando trabajo extra por nosotros y, en resumen, ahorrándonos trabajo.</p>
<h3 id="cómo-funciona-postcss" tabindex="-1"><a class="header-anchor" href="#cómo-funciona-postcss">¿Cómo funciona PostCSS?</a></h3>
<p>El formato <code>.css</code> es un formato que los navegadores comprenden y saben interpretar. Sin embargo, el formato <code>.postcss</code> o <code>.pcss</code> es un formato que, en principio, los navegadores no entenderán. En general, el código utilizado en un fichero <strong>PostCSS</strong> será igual (<em>o muy parecido</em>) a CSS, pero habrán detalles que no serán estrictamente <strong>código CSS estándar</strong>.</p>
<p>La herramienta <strong>PostCSS</strong>, realmente sólo es una aplicación Javascript que <strong>transpila</strong> código, o lo que es lo mismo, pasa de un código fuente concreto, en nuestro caso en formato <code>.postcss</code>, a otro código fuente concreto, en nuestro caso <code>.css</code>:</p>
<p><img src="postcss-a-css.png" alt="PostCSS a CSS" width="1024" height="425" loading="lazy"></p>
<p>Y como veremos a continuación, esto nos ofrece múltiples características interesantes.</p>
<blockquote>
<p><strong>OJO</strong>: Aunque al principio solemos utilizar la extensión <code>.pcss</code> o <code>.postcss</code> (<em>para diferenciarlo de un fichero <code>.css</code> estándar</em>), es muy habitual encontrarnos con que, para simplificar, se use la misma extensión <code>.css</code> incluso para los ficheros <strong>PostCSS</strong>.</p>
</blockquote>
<h3 id="instalación-de-postcss" tabindex="-1"><a class="header-anchor" href="#instalación-de-postcss">Instalación de PostCSS</a></h3>
<p>Para comenzar a trabajar con <strong>PostCSS</strong> necesitaremos tenerlo instalado en nuestro proyecto. <strong>PostCSS</strong> es simplemente una aplicación Javascript de línea de comandos (<em>CLI</em>), por lo que podemos instalarla con <code>npm</code> en nuestro proyecto y ejecutarla mediante <code>npx</code>:</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev postcss-cli postcss

$ npx postcss <span class="token parameter variable">--version</span>
<span class="token number">8.3</span>.0</code></pre>
<p>Esto instalará <strong>PostCSS</strong> en la carpeta <code>node_modules</code>, y tendremos la herramienta lista para procesar nuestros archivos <strong>PostCSS</strong>. No te olvides de instalarlo con el flag <code>--save-dev</code> o <code>-D</code>, ya que se trata de una herramienta de desarrollo que generará los archivos definitivos para producción, por lo que no tiene sentido tenerlo como dependencia de producción.</p>
<blockquote>
<p>Ten en cuenta que si lo deseas, también puedes instalar la herramienta de terminal de PostCSS <strong>de forma global</strong>. De esta forma se instalará en el sistema sin que esté asociada al proyecto. Tienes más información sobre esto en <a href="https://lenguajejs.com/npm/introduccion/instalaciones-globales/">Instalaciones globales de NPM</a>.</p>
</blockquote>
<h3 id="preparando-el-fichero-postcss" tabindex="-1"><a class="header-anchor" href="#preparando-el-fichero-postcss">Preparando el fichero PostCSS</a></h3>
<p>Vamos a crear un pequeño ejemplo para ejemplificar el funcionamiento de la mecánica de transpilación de <strong>PostCSS</strong>. Para ello, vamos a crear un fichero <code>index.pcss</code> donde escribiremos nuestro <strong>código CSS no estándar</strong>, que posteriormente será convertido a <strong>código CSS estándar</strong>.</p>
<p>En el ejemplo vamos a utilizar una característica denominada <strong>nesting css</strong> (<em>anidamiento css</em>), que permite escribir código CSS de forma <strong>más legible y mantenible</strong> «para humanos», pero incompatible para navegadores (<em>al menos, de momento</em>):</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #444<span class="token punctuation">;</span>

  <span class="token selector">&amp; .item</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Observa que este código de ejemplo no es más que una forma de escribir lo que en <strong>CSS estándar</strong> sería el selector <code>.container .item</code>. Dicho así, parece que no ofrece ventajas, pero si continuamos escribiendo código, comenzaremos a ver las ventajas.</p>
<p>Esta forma de <strong>anidamiento de CSS</strong> (<em>y escribir código en general</em>) nos permite crear agrupaciones por entidades y que el código sea mucho más fácil de entender, organizar y gestionar, sobre todo si hace mucho tiempo que no lees el código (<em>o incluso si nunca antes lo has leído</em>).</p>
<h3 id="ejecutando-postcss" tabindex="-1"><a class="header-anchor" href="#ejecutando-postcss">Ejecutando PostCSS</a></h3>
<p>Ahora, mediante <strong>PostCSS</strong>, podemos convertir este código a <strong>CSS estándar</strong>, el cuál si será capaz de leerlo el navegador. Para ello, ejecutamos <code>postcss</code> utilizando <code>npx</code> e indicamos la ruta del fichero <code>index.pcss</code> como se ve a continuación.</p>
<p>Si lo hacemos correctamente, nos aparecerá el siguiente error:</p>
<pre class="language-bash"><code class="language-bash">$ npx postcss index.pcss

You did not <span class="token builtin class-name">set</span> any plugins, parser, or stringifier. Right now, PostCSS does nothing.
Pick plugins <span class="token keyword">for</span> your <span class="token keyword">case</span> on https://www.postcss.parts/ and use them <span class="token keyword">in</span> postcss.config.js.

<span class="token punctuation">(</span><span class="token punctuation">..</span>.Código del index.pcss<span class="token punctuation">..</span>.<span class="token punctuation">)</span></code></pre>
<blockquote>
<blockquote>
<p>Es importante saber que <strong>PostCSS</strong> funciona a base de <strong>plugins</strong>. Es decir, por si solo, PostCSS no realiza ninguna funcionalidad. Lee el fichero de origen y lo devuelve <strong>sin cambios</strong>.</p>
</blockquote>
</blockquote>
<p>En este ejemplo anterior, el error aparece porque hemos ejecutado PostCSS sin utilizar aún ningún plugin, por lo tanto, nos avisa del error y nos devuelve <strong>exactamente el mismo código</strong> del fichero <code>index.pcss</code>.</p>
<h3 id="ejecutando-plugins-en-postcss" tabindex="-1"><a class="header-anchor" href="#ejecutando-plugins-en-postcss">Ejecutando plugins en PostCSS</a></h3>
<p>Así pues, vamos a instalar el <strong>plugin de PostCSS</strong> necesario para la funcionalidad que queremos probar (<em>nesting css</em>). El plugin en cuestión es <a href="https://github.com/jonathantneal/postcss-nesting">postcss-nesting</a>:</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev postcss-nesting</code></pre>
<p>Una vez instalado (<em>recuerda utilizar el parámetro <code>--save-dev</code></em>) lo tendremos en la carpeta <code>node_modules</code> del proyecto, por lo que ahora sí podremos utilizarlo con <strong>PostCSS</strong>, usando el flag <code>-u</code> (<em>use</em>) de <code>postcss</code>:</p>
<pre class="language-bash"><code class="language-bash">$ npx postcss index.pcss <span class="token parameter variable">-u</span> postcss-nesting --no-map</code></pre>
<p>Se puede ver que también estamos usando el parámetro <code>--no-map</code> para que no nos muestre al final una linea de generación del <strong>source-map</strong> (<em>relación entre el fichero original y el CSS resultante</em>) que comienza por algo parecido a <code>/*# sourceMappingURL=</code>.</p>
<p>El comando anterior nos devolverá el siguiente código por pantalla:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> name 1s<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #444
<span class="token punctuation">}</span>
<span class="token selector">.container .item</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Pero obtener el resultado final por pantalla no suele ser muy práctico, por lo que podemos añadir el parámetro <code>-o index.css</code> para indicar a <strong>PostCSS</strong> que queremos que lo guarde en un fichero en lugar de mostrarlo por pantalla:</p>
<pre class="language-bash"><code class="language-bash">$ npx postcss index.pcss <span class="token parameter variable">-u</span> postcss-nesting --no-map <span class="token parameter variable">-o</span> index.css</code></pre>
<p>Hemos procesado un fichero con <strong>PostCSS</strong>, con un plugin cargado, generando <strong>código CSS estándar</strong> que entienda el navegador. Muy a grandes rasgos, esto es lo que hace <strong>PostCSS</strong>. Pero ahora imagina que construímos una lista con varios plugins diferentes, que realizan múltiples transformaciones automatizando tareas, organizando código, corrigiendo o avisando de errores, etc... Estas son las ventajas que brinda <strong>PostCSS</strong>.</p>
<blockquote>
<p>Más adelante veremos más parámetros de PostCSS, así como la posibilidad de crear un <strong>fichero de configuración</strong> para no tener que crear comandos con muchos parámetros, así como sistemas que automatizan y hacen mucho más sencillo y práctico el uso de PostCSS.</p>
</blockquote>
<h3 id="plugins-populares-de-postcss" tabindex="-1"><a class="header-anchor" href="#plugins-populares-de-postcss">Plugins populares de PostCSS</a></h3>
<p>Antes de profundizar más, mencionar que el ecosistema de <strong>PostCSS</strong> es bastante grande y existen plugins para prácticamente cualquier tarea:</p>
<table>
<thead>
<tr>
<th>Plugin</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/postcss/autoprefixer">autoprefixer</a></td>
<td>Añade prefijos CSS automáticamente, basándose en CanIUse.</td>
</tr>
<tr>
<td><a href="https://github.com/css-modules/postcss-modules">css-modules</a></td>
<td>Aplica la estrategia <a href="https://github.com/css-modules/css-modules">CSS Modules</a> para aislar CSS y evitar la cascada.</td>
</tr>
<tr>
<td><a href="https://github.com/stylelint/stylelint">stylelint</a></td>
<td>Linter de código CSS, compatible también con preprocesadores como LESS o Sass.</td>
</tr>
<tr>
<td><a href="https://github.com/csstools/postcss-preset-env">postcss-preset-env</a></td>
<td>Convierte CSS no soportado por navegadores en CSS soportado. El Babel de CSS.</td>
</tr>
<tr>
<td><a href="https://github.com/cssnano/cssnano">cssnano</a></td>
<td>Minificador de código CSS.</td>
</tr>
<tr>
<td><a href="https://github.com/FullHuman/purgecss">purgecss</a></td>
<td>Elimina código CSS muerto (no utilizado) de nuestros proyectos.</td>
</tr>
</tbody>
</table>
<p>Existen muchos más, pero estos son algunos de los plugins que podemos encontrar para <strong>PostCSS</strong>.</p>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    <script async="" src="../../../pagead/js/f.txt?client=ca-pub-0412426997270095" crossorigin="anonymous"></script>
<ins class="adsbygoogle" style="display:block; margin: 1em var(--pad)" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-0412426997270095" data-ad-slot="3027930890"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    
    <a class="btn next" href="../configuracion-postcss/index.htm" title="Configuración de PostCSS">
  <div>
    <span>Configuración de PostCSS</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>

  </div>

<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/jdGpehoFoWA" title="¡Aprende a utilizar TRANSICIONES CSS!">
  <img loading="lazy" src="../../../vi/jdGpehoFoWA/mqdefault.jpg" alt="¡Aprende a utilizar TRANSICIONES CSS!">
</a><a href="https://youtu.be/hju7SXmiK7Y" title="Cómo crear SOMBRAS DE TEXTO (text-shadow)">
  <img loading="lazy" src="../../../vi/hju7SXmiK7Y/mqdefault.jpg" alt="Cómo crear SOMBRAS DE TEXTO (text-shadow)">
</a><a href="https://youtu.be/s_16bzmnGoY" title="Grid CSS: Líneas con nombre">
  <img loading="lazy" src="../../../vi/s_16bzmnGoY/mqdefault.jpg" alt="Grid CSS: Líneas con nombre">
</a><a href="https://youtu.be/8Jh2K3tq5n0" title="Tutorial para aprender Animaciones CSS">
  <img loading="lazy" src="../../../vi/8Jh2K3tq5n0/mqdefault.jpg" alt="Tutorial para aprender Animaciones CSS">
</a><a href="https://youtu.be/lM4eufOnKVA" title="Especificidad CSS: ¿Cómo evitar los !important?">
  <img loading="lazy" src="../../../vi/lM4eufOnKVA/mqdefault.jpg" alt="Especificidad CSS: ¿Cómo evitar los !important?">
</a><a href="https://youtu.be/bMiXLfOnuUA" title="ECSStatic: Librería CSS-in-JS">
  <img loading="lazy" src="../../../vi/bMiXLfOnuUA/mqdefault.jpg" alt="ECSStatic: Librería CSS-in-JS">
</a></div>
  </div>
</section>

  <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

  

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-3', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>
</body>

</html>
