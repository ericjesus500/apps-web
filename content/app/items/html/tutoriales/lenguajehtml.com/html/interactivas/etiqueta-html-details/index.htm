<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#e44f26">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Etiqueta HTML &lt;details&gt; - HTML en español - Lenguaje HTML</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="HTML5 nos proporciona la posibilidad de crear elementos con información desplegable de forma nativa, sin librerías. Aprendamos como.">
  
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Etiqueta HTML &lt;details&gt; - HTML en español">
  <meta property="og:image" content="https://lenguajehtml.com/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="HTML5 nos proporciona la posibilidad de crear elementos con información desplegable de forma nativa, sin librerías. Aprendamos como.">
  <meta property="og:url" content="https://lenguajehtml.com/html/interactivas/etiqueta-html-details/">
  <meta property="twitter:url" content="https://lenguajehtml.com/html/interactivas/etiqueta-html-details/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Etiqueta HTML &lt;details&gt; - HTML en español">
  <meta property="twitter:description" content="HTML5 nos proporciona la posibilidad de crear elementos con información desplegable de forma nativa, sin librerías. Aprendamos como.">
  <meta property="twitter:image" content="https://lenguajehtml.com/large-summary.jpg">

  </head>

<body class="html" style="--logo-color: #e44f26"><div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="/">
  <svg><use href="../../../assets/logos.svg#html"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeHTML.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/html.jpg')">
    <h1><a href="index.htm">Etiqueta HTML &lt;details&gt;</a></h1><h2 class="typewriter">Elementos desplegables (Acordeón HTML)</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../../scripting/bloque-de-datos/index.htm">Bloque de datos desconocido</a>
    <a class="current" href="index.htm">Etiqueta HTML &lt;details&gt;</a>
    <a href="../popover-elementos-emergentes/index.htm">Popovers: Elementos emergentes</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>

    <div class="post-container">
  <div class="contents">
    
    <p>En HTML5, aparecen algunas nuevas etiquetas que proporcionan <strong>características interactivas</strong> a una página o documento. En dichas etiquetas, el usuario debe tomar parte de forma activa para activarlas o utilizarlas.</p>
<p>Una de ellas es el llamado <strong>Acordeón HTML</strong> o <strong>elemento desplegable</strong>. Se trata de un elemento que muestra un texto y forma o icono identificativo que el usuario puede pulsar y desplegar una información que por defecto está contraída.</p>
<p>Para usar este elemento, tenemos varias etiquetas disponibles:</p>
<table>
<thead>
<tr>
<th>Etiqueta</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;details&gt;</code></td>
<td>Crea un elemento desplegable. Etiqueta contenedora.</td>
</tr>
<tr>
<td><code>&lt;summary&gt;</code></td>
<td>Título del desplegable. Aparece siempre, se encuentre desplegado o no.</td>
</tr>
</tbody>
</table>
<p>Vamos a irlas explicando una a una.</p>
<h3 id="la-etiqueta-details" tabindex="-1"><a class="header-anchor" href="#la-etiqueta-details">La etiqueta <code>&lt;details&gt;</code></a></h3>
<p>La etiqueta <code>&lt;details&gt;</code> nos proporciona la posibilidad de crear un elemento desplegable, que el usuario puede expandir o contraer para ver más información que en principio estará oculta. Se trata de una etiqueta contenedora que actúa como un <code>&lt;div&gt;</code>, salvo que todo el contenido de esta etiqueta no se muestra inicialmente.</p>
<p>En su lugar, aparece una flecha identificativa, que indica si el desplegable está <strong>contraído</strong> (<em>y su contenido oculto</em>) o <strong>desplegado</strong> (<em>y su contenido visible</em>).</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Esto es una información que en principio aparecerá oculta.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre>
<p>Observaremos que el navegador nos mostrará una fecha apuntando a la derecha, con el texto «Detalles» (<em>o similar, puede depender del navegador</em>). Si pulsamos sobre la fecha o sobre el texto «Detalles», la flecha apuntará hacia abajo y se desplegará el contenido de la etiqueta <code>&lt;details&gt;</code>.</p>
<p>Esta es una fantástica forma de añadir contenido en una página de modo que no ocupe demasiado espacio y que el usuario decida si quiere ampliar información rapidamente o seguir leyendo el resto del contenido de la página.</p>
<p>El soporte actual de esta etiqueta es muy bueno en navegadores:</p>
<p><caniuse-support title="Details & Summary elements" feature="details" edge="79/y" firefox="49/y" chrome="12/y" safari="6/y" opera="15/y" ios_saf="6.0-6.1/y" and_chr="116/y" and_ff="116/y">
</caniuse-support></p>
<h4 id="el-atributo-open" tabindex="-1"><a class="header-anchor" href="#el-atributo-open">El atributo <code>open</code></a></h4>
<p>La etiqueta <code>&lt;details&gt;</code> tiene un atributo <code>open</code>, que si se indica, el contenido del desplegable estará visible por defecto, por lo que pulsando encima lo contraemos. Esto puede ser muy interesante en algunas situaciones donde el contenido es muy importante y merece la pena estar mostrado por defecto.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span> <span class="token attr-name">open</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Este contenido estará desplegado y visible por defecto.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre>
<p>Ten en cuenta que al tratarse de un atributo, podemos utilizar Javascript y el DOM para mostrarlo de forma dinámica. Un fragmento de código Javascript que realizaría esto sería el siguiente:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> details <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"details"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
details<span class="token punctuation">.</span><span class="token function">toggleAttribute</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>En la primera línea, estamos localizando el elemento que nos interesa. En este caso, localizamos la etiqueta <code>&lt;details&gt;</code> haciendo referencia a la propia etiqueta, aunque generalmente es mejor hacerlo a través de un <code>id</code>, o mejor aún, una <strong>clase</strong>.</p>
<p>En la segunda línea, utilizamos el método <code>.toggleAttribute()</code> que añadirá un atributo si originalmente no lo tiene, o lo eliminará si originalmente lo tiene. Le indicamos que lo haga con el atributo <code>open</code>. Si este código lo incluímos dentro de una función, cada vez que lo ejecutemos, desplegamos o contraemos el acordeón HTML.</p>
<h4 id="el-evento-toggle" tabindex="-1"><a class="header-anchor" href="#el-evento-toggle">El evento <code>toggle</code></a></h4>
<p>Si sabemos trabajar con <a href="https://lenguajejs.com/javascript/eventos/que-son-eventos/">eventos Javascript</a>, esto también es detectable desde Javascript, aplicando un <code>.addEventListener()</code> que escuche un evento <code>toggle</code> en ese elemento:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> details <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"details"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
details<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"toggle"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"¡Acción detectada sobre desplegable!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>El evento <code>toggle</code> se disparará cada vez que el usuario pulse sobre el elemento y este se despliegue o contraiga, así como cuando nosotros lo hagamos dinámicamente a través de código, como en el ejemplo anterior usando el método <code>.toggleAttribute()</code>.</p>
<h3 id="la-etiqueta-summary" tabindex="-1"><a class="header-anchor" href="#la-etiqueta-summary">La etiqueta <code>&lt;summary&gt;</code></a></h3>
<p>Por defecto, la etiqueta <code>&lt;details&gt;</code> añade el texto «Detalles» al acordeón, texto que depende del idioma del navegador. Sin embargo, si dentro de la etiqueta <code>&lt;details&gt;</code> indicamos una etiqueta <code>&lt;summary&gt;</code> podremos personalizar el contenido de ese texto informativo al texto que queramos.</p>
<p>Observa este ejemplo:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>Ver más información<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Nombre del sujeto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foto.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Foto del sujeto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre>
<p>Hemos incluido una etiqueta <code>&lt;summary&gt;</code> para personalizar el texto del desplegable. A continuación, hemos añadido un elemento <code>&lt;div&gt;</code> que tiene todo el contenido a desplegar del acordeón, que por defecto estará oculto, salvo que la etiqueta <code>&lt;details&gt;</code> tenga el atributo <code>open</code> indicado.</p>
<h3 id="personalizar-la-flecha" tabindex="-1"><a class="header-anchor" href="#personalizar-la-flecha">Personalizar la flecha</a></h3>
<p>Por defecto, los navegadores suelen identificar el desplegable mediante una flecha hacia la derecha o hacia abajo, dependiendo de si el desplegable está colapsado o desplegado, respectivamente.</p>
<p>Mediante CSS, podemos cambiar este comportamiento, haciendo uso del pseudoelemento <code>::marker</code> sobre la etiqueta <code>&lt;summary&gt;</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token comment">/* Flecha en contenido colapsado */</span>
<span class="token selector">details summary::marker</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"⮞ "</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> indigo<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Flecha en contenido desplegado */</span>
<span class="token selector">details[open] summary::marker</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"⮟ "</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>En el primer caso, estamos personalizando la flecha de un desplegable que esta colapsado, ocultando su contenido. En el segundo caso, personalizamos la flecha de un desplegable con el contenido desplegado.</p>
<blockquote>
<p>Observa que estamos haciendo uso de la propiedad <code>content</code>, ya que es un elemento autogenerado de CSS. Si tienes dudas sobre esto, echa un vistazo a los <a href="https://lenguajecss.com/css/selectores/pseudoelementos/">pseudoelementos CSS</a>.</p>
</blockquote>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    <script async="" src="../../../pagead/js/f.txt?client=ca-pub-0412426997270095" crossorigin="anonymous"></script>
<ins class="adsbygoogle" style="display:block; margin: 1em var(--pad)" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-0412426997270095" data-ad-slot="3027930890"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../../scripting/bloque-de-datos/index.htm" title="Bloque de datos desconocido">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Bloque de datos desconocido</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../popover-elementos-emergentes/index.htm" title="Popovers: Elementos emergentes">
  <div>
    <span>Popovers: Elementos emergentes</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>

  </div>

<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/cQIlwKSAyAc" title="Crear packs de iconos con sprites SVG">
  <img loading="lazy" src="../../../vi/cQIlwKSAyAc/mqdefault.jpg" alt="Crear packs de iconos con sprites SVG">
</a><a href="https://youtu.be/SVomAFpMw30" title="Consejos y buenas prácticas (II): HTML + WebFonts">
  <img loading="lazy" src="../../../vi/SVomAFpMw30/mqdefault.jpg" alt="Consejos y buenas prácticas (II): HTML + WebFonts">
</a><a href="https://youtu.be/lDPJQyXow_g" title="Consejos y buenas prácticas (VII): SEO">
  <img loading="lazy" src="../../../vi/lDPJQyXow_g/mqdefault.jpg" alt="Consejos y buenas prácticas (VII): SEO">
</a><a href="https://youtu.be/7oPdEM0VXOs" title="Consejos y buenas prácticas (VI): Performance">
  <img loading="lazy" src="../../../vi/7oPdEM0VXOs/mqdefault.jpg" alt="Consejos y buenas prácticas (VI): Performance">
</a><a href="https://youtu.be/LAHR5gl07ks" title="Consejos y buenas prácticas (V): Accesibilidad">
  <img loading="lazy" src="../../../vi/LAHR5gl07ks/mqdefault.jpg" alt="Consejos y buenas prácticas (V): Accesibilidad">
</a><a href="https://youtu.be/RW5erp81FMY" title="Consejos y buenas prácticas (I): HEAD">
  <img loading="lazy" src="../../../vi/RW5erp81FMY/mqdefault.jpg" alt="Consejos y buenas prácticas (I): HEAD">
</a></div>
  </div>
</section>

  <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

  

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-5', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>
</body>

</html>
