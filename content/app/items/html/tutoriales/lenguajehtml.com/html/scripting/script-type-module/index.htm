<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#e44f26">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Los módulos Javascript (ESM) - HTML en español - Lenguaje HTML</title>
  <link rel="preload" href="../../../assets/fonts/jost-vf.woff2" as="font" crossorigin="">
  <meta name="description" content="Mediante la etiqueta &lt;script&gt; y el atributo type=module podemos cargar módulos Javascript u otros.">
  
  <link rel="stylesheet" href="../../../home.css">
  <script type="module" src="../../../index.js"></script>
<link rel="canonical" href="index.htm">
  <meta property="og:title" content="Los módulos Javascript (ESM) - HTML en español">
  <meta property="og:image" content="https://lenguajehtml.com/large-summary.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Mediante la etiqueta &lt;script&gt; y el atributo type=module podemos cargar módulos Javascript u otros.">
  <meta property="og:url" content="https://lenguajehtml.com/html/scripting/script-type-module/">
  <meta property="twitter:url" content="https://lenguajehtml.com/html/scripting/script-type-module/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Los módulos Javascript (ESM) - HTML en español">
  <meta property="twitter:description" content="Mediante la etiqueta &lt;script&gt; y el atributo type=module podemos cargar módulos Javascript u otros.">
  <meta property="twitter:image" content="https://lenguajehtml.com/large-summary.jpg">

  </head>

<body class="html" style="--logo-color: #e44f26"><div class="post page">
    <header class="hero">

  <div class="top-search">
    <a class="sitelogo" href="/">
  <svg><use href="../../../assets/logos.svg#html"></use></svg>
  <img class="manzdev" src="../../../assets/logos/manzdev-logo.webp" alt="ManzDev">
  <div class="sitelogo-text">
    <div class="text">MANZ.DEV</div>
    <div class="subtext">LenguajeHTML.com</div>
  </div>
</a>

    <search class="search-container">
  <form class="search" action="https://www.google.com/search">
    <label>
      <input type="search" name="q" placeholder="flex, grid..." autocomplete="off" spellcheck="false">
      <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewbox="0 0 256 256"><path fill="var(--color, #fff)" d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path></svg>
    </label>
    <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev">
    <div class="results"></div>
    <div class="sources">
      <label><input type="radio" name="source" value="posts" checked=""> Posts</label>
      <label><input type="radio" name="source" value="youtube"> Youtube</label>
    </div>
  </form>

  <script type="module">
    import { debounce } from "/modules.js";
    import { searchText } from "/modules.js";

    const searchInput = document.querySelector("form.search input[type=search]");
    searchInput.addEventListener("input", debounce(searchText, 400));
  </script>
</search>

  </div>

  <div class="mega" style="--cover-image: url('../../../assets/html.jpg')">
    <h1><a href="index.htm">Los módulos Javascript (ESM)</a></h1><h2 class="typewriter">Etiqueta &lt;script&gt; con el atributo type=module</h2>
    <hr></div>

  

<nav class="navpages">
  <div class="top">
    
    <a href="../../index.htm" title="Volver al índice"></a>
  </div>
  <div class="prev-next">
    <a href="../atributo-defer-async/index.htm">Atributos defer y async</a>
    <a class="current" href="index.htm">Los módulos Javascript (ESM)</a>
    <a href="../bloque-de-datos/index.htm">Bloque de datos desconocido</a>
    </div>
</nav>
<div class="mini-social">
  ——
  <a href="https://twitch.tv/ManzDev"><svg><use href="../../../assets/icons/social.svg#twitch"></use></svg></a>
  <a href="https://youtube.com/@ManzDev"><svg><use href="../../../assets/icons/social.svg#youtube"></use></svg></a>
  <a href="https://tiktok.com/@manz.dev"><svg><use href="../../../assets/icons/social.svg#tiktok"></use></svg></a>
  <a href="https://instagram.com/manz.dev"><svg><use href="../../../assets/icons/social.svg#instagram"></use></svg></a>
  <a href="https://twitter.com/manz"><svg><use href="../../../assets/icons/social.svg#twitter"></use></svg></a>
  ——
</div>



</header>

<script type="module">
  import { typewriter } from "/modules.js";

  typewriter("header.hero h2.typewriter");
</script>

    <div class="post-container">
  <div class="contents">
    
    <p>Antiguamente, Javascript sólo se escribía en navegadores y en un sólo fichero Javascript. En el mejor de los casos, podíamos incluir varios ficheros en diferentes etiquetas <code>&lt;script&gt;</code>. Sin embargo, era complicado comunicar información entre unas y otras.</p>
<p>Las versiones modernas de Javascript permiten trabajar con <a href="https://lenguajejs.com/javascript/modulos/que-es-esm/">módulos Javascript</a>, muchas veces denominado <strong>ESM</strong> (<em>ECMAScript Modules</em>). Se trata de una forma moderna de cargar y procesar ficheros externos para incorporarlos a nuestro código Javascript.</p>
<blockquote>
<p>Si quieres saber más sobre la historia de <strong>ESM</strong> y los <strong>Módulos Javascript</strong>, echa un vistazo al artículo <a href="https://lenguajejs.com/automatizadores/introduccion/commonjs-vs-es-modules/">CommonJS vs ECMAScript modules</a>, donde explico su evolución y diferencias.</p>
</blockquote>
<h3 id="módulos-esm" tabindex="-1"><a class="header-anchor" href="#módulos-esm">Módulos (ESM)</a></h3>
<p>Los módulos más populares son los <strong>módulos Javascript</strong>. Se trata de una forma moderna de reutilizar y compartir contenido (<em>variables, constantes, funciones, etc...</em>) entre diferentes ficheros Javascript, organizando mucho mejor nuestra aplicación.</p>
<p>En un script tradicional (<em>modalidad clásica</em>) no se pueden utilizar las palabras clave <code>import</code> y <code>export</code>, ya que están prohibidas por defecto. Estas palabras clave se utilizan para incorporar contenido de un fichero externo.</p>
<p>Por ejemplo, si intentamos importar un archivo externo en la etiqueta HTML <code>&lt;script&gt;</code>:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> getRandomNumber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./getRandomNumber.js"</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>En este ejemplo, estamos importando una funcionalidad llamada <code>getRandomNumber</code> desde el módulo <code>getRandomNumber.js</code>, donde dicha función debe estar exportado mediante la palabra clave <code>export</code>. Puedes aprender más sobre esto, en <a href="https://lenguajejs.com/javascript/modulos/export/">Exportar módulos en Javascript</a>.</p>
<p>Si intentamos realizar este ejemplo, obtendremos el siguiente error:</p>
<blockquote>
<blockquote>
<blockquote>
<p><strong>Uncaught SyntaxError</strong>: Cannot use import statement outside a module</p>
</blockquote>
</blockquote>
</blockquote>
<p>Esto ocurre porque no hemos indicado el atributo <code>type=&quot;module&quot;</code> en nuestro script, que es lo que habilita la posibilidad de importar y exportar módulos. Así que vamos a ver como se debería hacer.</p>
<h3 id="tipos-de-módulos-esm" tabindex="-1"><a class="header-anchor" href="#tipos-de-módulos-esm">Tipos de módulos ESM</a></h3>
<p>Cuando hablamos de módulos ESM, solemos referirnos a módulos Javascript, pero los módulos van mucho más allá. La idea es que podamos cargar multitud de archivos directamente en el navegador y utilizarlos en nuestro código Javascript.</p>
<p>Por ejemplo, estos son algunos de los módulos que podemos utilizar:</p>
<table>
<thead>
<tr>
<th>Tipo de módulo</th>
<th>Extensión</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>Módulo Javascript</td>
<td><code>.js</code></td>
<td>Permite exportar/importar contenido JS. <strong>Módulo por defecto</strong>.</td>
</tr>
<tr>
<td>Módulo JSON script</td>
<td><code>.json</code></td>
<td>Permite exportar/importar contenido JSON.</td>
</tr>
<tr>
<td>Módulo CSS script</td>
<td><code>.css</code></td>
<td>Permite exportar/importar contenido CSS.</td>
</tr>
<tr>
<td>Módulo HTML script</td>
<td><code>.html</code></td>
<td>Permite exportar/importar contenido HTML. <strong>Experimental</strong>.</td>
</tr>
</tbody>
</table>
<p>Para poder importar un módulo externo, recuerda que siempre tendrás que indicar el atributo <code>type=&quot;module&quot;</code> en la etiqueta <code>&lt;script&gt;</code>. Veamos como usar cada uno de ellos.</p>
<h4 id="módulos-javascript" tabindex="-1"><a class="header-anchor" href="#módulos-javascript">Módulos Javascript</a></h4>
<p>El caso más habitual es cargar módulos Javascript, por lo que simplemente utilizaremos la palabra clave <code>import</code> e indicaremos el fichero <code>.js</code> a importar y el contenido que queremos importar. Tenemos varias formas de hacerlo que puedes ver en <a href="https://lenguajejs.com/javascript/modulos/import/">Importar módulos</a>.</p>
<p>El fragmento de código correspondiente sería el siguiente:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> getRandomNumber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./getRandomNumber.js"</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Recuerda que no tiene por que ser un <strong>script en línea</strong>, se puede utilizar el atributo <code>src</code> para cargarlo de forma externa.</p>
<blockquote>
<p>Los scripts cargados como módulos, se ejecutarán por defecto en <a href="../atributo-defer-async/index.htm">modo diferido</a>.</p>
</blockquote>
<p><caniuse-support title="JavaScript modules via script tag" feature="es6-module" edge="16/y" firefox="60/y" chrome="61/y" safari="11/y" opera="48/y" ios_saf="11.0-11.2/y" and_chr="116/y" and_ff="116/y">
</caniuse-support></p>
<h4 id="módulos-json" tabindex="-1"><a class="header-anchor" href="#módulos-json">Módulos JSON <badge-type class="experimental"></badge-type></a></h4>
<p>Si queremos cargar un módulo JSON, también es posible hacerlo utilizando la palabra clave <code>import</code>. Sin embargo, en este caso tendremos que hacer uso de un <code>assert</code>:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> stickers <span class="token keyword">from</span> <span class="token string">"./stickers.json"</span> <span class="token keyword">assert</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"json"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Con este fragmento de código podemos importar un archivo <code>.json</code> externo, pero ten en cuenta varias cosas:</p>
<ul>
<li>La etiqueta <code>&lt;script&gt;</code> debe llevar <code>type=&quot;module&quot;</code>.</li>
<li>La importación se hace directamente, sin llaves <code>{</code> <code>}</code>.</li>
<li>Indicamos <code>assert { type: &quot;json&quot; }</code> para definir el formato esperado.</li>
</ul>
<p>Ten en cuenta que por defecto las importaciones se hacen sobre ficheros <code>.js</code>, por lo que si queremos cambiar este tipo de importaciones, hay que indicar explícitamente el formato, para evitar posibles problemas de seguridad.</p>
<blockquote>
<p>El resultado obtenido en <code>stickers</code> no es un <badge-type class="string"></badge-type> de texto, sino un <a href="https://lenguajejs.com/javascript/objetos/json/">objeto JSON</a>, tal y como si lo hubieramos procesado con el método <code>JSON.parse()</code>.</p>
</blockquote>
<h4 id="módulos-css" tabindex="-1"><a class="header-anchor" href="#módulos-css">Módulos CSS <badge-type class="experimental"></badge-type></a></h4>
<p>Si queremos cargar un módulo CSS, también es posible hacerlo utilizando la palabra clave <code>import</code>:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./styles.css"</span> <span class="token keyword">assert</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"css"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Con este fragmento de código importamos un archivo <code>.css</code> externo. Ten en cuenta lo siguiente:</p>
<ul>
<li>La etiqueta <code>&lt;script&gt;</code> debe llevar <code>type=&quot;module&quot;</code>.</li>
<li>La importación se hace directamente, sin llaves <code>{</code> <code>}</code>.</li>
<li>Indicamos <code>assert { type: &quot;css&quot; }</code> para definir el formato esperado.</li>
</ul>
<blockquote>
<p>El resultado obtenido en <code>styles</code> no es un <badge-type class="string"></badge-type> de texto, sino un objeto <code>CSSStyleSheet</code>, mediante el cuál podemos acceder al <strong>CSSOM</strong> (<em>el DOM de CSS</em>).</p>
</blockquote>
<h4 id="módulos-html" tabindex="-1"><a class="header-anchor" href="#módulos-html">Módulos HTML <badge-type class="experimental"></badge-type></a></h4>
<p>Si queremos cargar un módulo HTML, la idea es que sea posible hacerlo a través de <code>import</code>:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./container.html"</span> <span class="token keyword">assert</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"html"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Sin embargo, esta característica es sólo una propuesta y <strong>no está soportada en navegadores aún</strong>. La idea es que se puedan importar fragmentos del DOM, según sus ids o clases y utilizarlas como cuando las creamos con el <code>createElement()</code> o las localizamos con el <code>querySelector()</code>.</p>
<p>Actualmente, si lo intentamos, obtendremos el siguiente error:</p>
<blockquote>
<blockquote>
<blockquote>
<p><strong>Uncaught TypeError</strong>: &quot;html&quot; is not a valid module type.</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="el-atributo-nomodule" tabindex="-1"><a class="header-anchor" href="#el-atributo-nomodule">El atributo <code>nomodule</code></a></h3>
<p>En algunos casos, podemos crear etiquetas <code>&lt;script&gt;</code> que utilicen un atributo <code>nomodule</code>:</p>
<table>
<thead>
<tr>
<th>Atributo</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>nomodule</code></td>
<td><badge-type class="boolean"></badge-type> Si se define este atributo, el script no se carga en navegadores modernos.</td>
</tr>
</tbody>
</table>
<p>Dicho atributo indicará a navegadores modernos que soportan el atributo <code>type=module</code>, que no deben descargar ni ejecutar ese script. Por otro lado, los navegadores antiguos que no soportan módulos, no conocerán ese atributo, por lo que lo tratarán como un script normal y lo ejecutarán:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">/* Código orientado a navegadores modernos */</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> getRandomNumber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./getRandomNumber.js"</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nomodule</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">/* Código orientado a navegadores antiguos */</span>
  <span class="token keyword">function</span> <span class="token function">getRandomNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> number <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> number<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>La finalidad de este atributo es poder crear <strong>scripts</strong> a modo de <strong>fallback</strong> para realizar tareas equivalentes en navegadores antiguos y dar soporte a otros sistemas menos modernos. Esto es lo que se conoce como el <strong>patrón module/nomodule</strong>.</p>
<blockquote>
<p>Ten en cuenta que para un navegador moderno, no es necesario desperdiciar recursos en descargar, parsear y ejecutar código Javascript orientado a navegadores antiguos, y en el caso contrario, el de los navegadores antiguos, no tiene sentido descargar, parsear y ejecutar código Javascript orientado a navegadores modernos, por lo que conviene que estén separados y cargarlo sólo en la situación que sea apropiada para cada usuario.</p>
</blockquote>

  </div>
</div>

<script>
  const keystrokes = [...document.querySelectorAll(".post .contents kbd")];
  const hasKeys = keystrokes.length > 0;
  let keySound;
  keystrokes.forEach(key => key.addEventListener("click", () => {
    if (hasKeys && !keySound) {
      keySound = new Audio("/assets/sounds/kbd.ogg");
    }
    keySound.currentTime = 0;
    keySound.play();
  }));
</script>

    <script async="" src="../../../pagead/js/f.txt?client=ca-pub-0412426997270095" crossorigin="anonymous"></script>
<ins class="adsbygoogle" style="display:block; margin: 1em var(--pad)" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-0412426997270095" data-ad-slot="3027930890"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

    <div id="comentarios" class="buttons">
  <div class="wrapper">
    <a class="btn" href="../../index.htm">
      <svg viewbox="0 0 512 512">
        <path d="M100 97a37 37 0 0 1 0-54c7-7 16-11 27-11h312V0H127C88 0 57 31 57 70v372c0 39 31 70 70 70h328V108H127c-11 0-20-5-27-11zm65 43h258v340H165V140z"></path>
        <path d="M144 56a14 14 0 0 0 0 28h311V56H144z"></path>
      </svg>
      <div>
        <span>Volver</span>
        <small>Al índice</small>
      </div>
    </a>
    <a class="btn prev" href="../atributo-defer-async/index.htm" title="Atributos defer y async">
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2H7.825l5.6 5.6L12 20Z"></path>
  </svg>
  <div>
    <span>Atributos defer y async</span>
    <small>Capítulo anterior</small>
  </div>
</a>
    <a class="btn next" href="../bloque-de-datos/index.htm" title="Bloque de datos desconocido">
  <div>
    <span>Bloque de datos desconocido</span>
    <small>Capítulo siguiente</small>
  </div>
  <svg viewbox="0 0 24 24">
    <path fill="currentColor" d="m12 20l-1.425-1.4l5.6-5.6H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8Z"></path>
  </svg>
</a>
    <a class="btn" href="https://discord.manz.dev/">
      <svg viewbox="0 0 24 24">
        <path fill="currentColor" stroke-width="0" d="M19.27 5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.55.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.83 2.12-1.89 2.12z"></path>
      </svg>
      <div>
        <span>Acceder a Discord</span>
        <small>Comunidad de Manz.dev</small>
      </div>
    </a>
  </div>
</div>

  </div>

<section class="bg dark related">
  <div class="wrapper column">
    <h2>Relacionados</h2>
    <p>En mi canal de <a href="https://youtube.com/@ManzDev?sub_confirmation=1">Youtube</a>, tienes varios videos que podrían interesarte...</p>

    <div class="list"><a href="https://youtu.be/lDPJQyXow_g" title="Consejos y buenas prácticas (VII): SEO">
  <img loading="lazy" src="../../../vi/lDPJQyXow_g/mqdefault.jpg" alt="Consejos y buenas prácticas (VII): SEO">
</a><a href="https://youtu.be/7oPdEM0VXOs" title="Consejos y buenas prácticas (VI): Performance">
  <img loading="lazy" src="../../../vi/7oPdEM0VXOs/mqdefault.jpg" alt="Consejos y buenas prácticas (VI): Performance">
</a><a href="https://youtu.be/SVomAFpMw30" title="Consejos y buenas prácticas (II): HTML + WebFonts">
  <img loading="lazy" src="../../../vi/SVomAFpMw30/mqdefault.jpg" alt="Consejos y buenas prácticas (II): HTML + WebFonts">
</a><a href="https://youtu.be/LAHR5gl07ks" title="Consejos y buenas prácticas (V): Accesibilidad">
  <img loading="lazy" src="../../../vi/LAHR5gl07ks/mqdefault.jpg" alt="Consejos y buenas prácticas (V): Accesibilidad">
</a><a href="https://youtu.be/RW5erp81FMY" title="Consejos y buenas prácticas (I): HEAD">
  <img loading="lazy" src="../../../vi/RW5erp81FMY/mqdefault.jpg" alt="Consejos y buenas prácticas (I): HEAD">
</a><a href="https://youtu.be/cQIlwKSAyAc" title="Crear packs de iconos con sprites SVG">
  <img loading="lazy" src="../../../vi/cQIlwKSAyAc/mqdefault.jpg" alt="Crear packs de iconos con sprites SVG">
</a></div>
  </div>
</section>

  <section class="about">
  <div class="wrapper column">
    <h2>¿Quién soy yo?</h2>

    <div class="about-container">
      <div class="avatar"></div>
      <div>
        <p>Soy Manz, vivo en Tenerife (España) y soy streamer partner en Twitch <svg width="20" height="20" viewbox="0 0 20 20">
          <path fill="#a970ff" d="M10 2l6 2 2 6-2 6-6 2-6-2-2-6 2-6 6-2zM8.889 13.636l5.43-5.429-1.415-1.414-4.015 4.015-2.015-2.015-1.414 1.414 3.429 3.43z"></path>
          </svg> y profesor. Me apasiona el universo de la programación web, el diseño y desarrollo web y la tecnología en general.
          Aunque soy full-stack, mi pasión es el front-end, la terminal y crear cosas divertidas y locas.
        </p>
      </div>
    </div>
    <p>Puedes encontrar más sobre mi en <a href="https://manz.dev/">Manz.dev</a></p>
  </div>
</section>

<script>
  const avatar = document.querySelector(".about .avatar");
  let honk;
  avatar.addEventListener("mousedown", () => {
    if (!honk)
      honk = new Audio("/assets/sounds/toy.ogg");
    honk.currentTime = 0;
    honk.play();
  });
</script>

  

<footer class="main">

  <div class="wrapper">
    <div class="social">

      <div class="group">
        <a class="btn" href="https://twitch.tv/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#twitch"></use>
  </svg>
  <span>Twitch</span>
</a>
        <a class="btn" href="https://youtube.com/@ManzDev?sub_confirmation=1">
  <svg>
    <use href="../../../assets/icons/social.svg#youtube"></use>
  </svg>
  <span>Youtube</span>
</a>
        <a class="btn" href="https://twitter.com/Manz">
  <svg>
    <use href="../../../assets/icons/social.svg#twitter"></use>
  </svg>
  <span>Twitter</span>
</a>
        <a class="btn" href="https://instagram.com/manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#instagram"></use>
  </svg>
  <span>Instagram</span>
</a>
        <a class="btn" href="https://tiktok.com/@manz.dev">
  <svg>
    <use href="../../../assets/icons/social.svg#tiktok"></use>
  </svg>
  <span>Tiktok</span>
</a>
        <a class="btn" href="https://linkedin.com/in/joseromanhdez">
  <svg>
    <use href="../../../assets/icons/social.svg#linkedin"></use>
  </svg>
  <span>Linkedin</span>
</a>
        <a class="btn" href="https://discord.manz.dev/">
  <svg>
    <use href="../../../assets/icons/social.svg#discord"></use>
  </svg>
  <span>Discord</span>
</a>
        <a class="btn" href="https://github.com/ManzDev">
  <svg>
    <use href="../../../assets/icons/social.svg#github"></use>
  </svg>
  <span>GitHub</span>
</a>
      </div>

      <div class="group last column">
        <p>Creado por Manz con <span title="<3">❤</span> · Alojado en <a href="https://manz.dev/digitalocean">DigitalOcean</a>.</p>
        <p>&copy; Todos los derechos reservados. Los izquierdos también.</p>
      </div>
    </div>
  </div>

</footer>


<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-5', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


<script>
  const heart = document.querySelector("footer.main span[title='<3']");
  let beat;
  heart.addEventListener("mousedown", () => {
    if (!beat)
      beat = new Audio("/assets/sounds/beat.ogg");
    beat.currentTime = 0;
    beat.play();
  });
</script>
</body>

</html>
